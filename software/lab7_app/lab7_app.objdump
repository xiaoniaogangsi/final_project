
lab7_app.elf:     file format elf32-littlenios2
lab7_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0c000230

Program Header:
    LOAD off    0x00001000 vaddr 0x0c000000 paddr 0x0c000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x0c000020 paddr 0x0c000020 align 2**12
         filesz 0x000104f8 memsz 0x000104f8 flags r-x
    LOAD off    0x00011518 vaddr 0x0c010518 paddr 0x0c01200c align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x00013b00 vaddr 0x0c013b00 paddr 0x0c013b00 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  0c000000  0c000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  0c000020  0c000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fed0  0c000230  0c000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000418  0c010100  0c010100  00011100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  0c010518  0c01200c  00011518  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  0c013b00  0c013b00  00013b00  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0001300c  2**0
                  CONTENTS
  7 .sdram        00000000  0c013c60  0c013c60  0001300c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001300c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ef0  00000000  00000000  00013030  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00022eb3  00000000  00000000  00013f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008faf  00000000  00000000  00036dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b575  00000000  00000000  0003fd82  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002140  00000000  00000000  0004b2f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003993  00000000  00000000  0004d438  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017755  00000000  00000000  00050dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00068520  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018a0  00000000  00000000  00068560  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006cff2  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006cff5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006d001  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006d002  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006d003  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006d007  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006d00b  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006d00f  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006d01a  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006d025  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0006d030  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002c  00000000  00000000  0006d038  2**0
                  CONTENTS, READONLY
 30 .jdi          00004f1b  00000000  00000000  0006d064  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00085316  00000000  00000000  00071f7f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
0c000000 l    d  .entry	00000000 .entry
0c000020 l    d  .exceptions	00000000 .exceptions
0c000230 l    d  .text	00000000 .text
0c010100 l    d  .rodata	00000000 .rodata
0c010518 l    d  .rwdata	00000000 .rwdata
0c013b00 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
0c013c60 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab7_app_bsp//obj/HAL/src/crt0.o
0c000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
0c011fc4 l     O .rwdata	00000004 vga_ctrl
00000000 l    df *ABS*	00000000 text_mode_vga.c
0c011fc8 l     O .rwdata	00000004 vga_ctrl
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0c01025e l     O .rodata	00000010 zeroes.4404
0c002e3c l     F .text	000000bc __sbprintf
0c01026e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0c00304c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0c004ba4 l     F .text	00000008 __fp_unlock
0c004bb8 l     F .text	0000019c __sinit.part.1
0c004d54 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0c010518 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0c01095c l     O .rwdata	00000020 lc_ctype_charset
0c01093c l     O .rwdata	00000020 lc_message_charset
0c01097c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0c0102a0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0c0075f0 l     F .text	000000fc __sprint_r.part.0
0c0103c4 l     O .rodata	00000010 zeroes.4349
0c008c2c l     F .text	000000bc __sbprintf
0c0103d4 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0c00d7d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0c00d8e8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0c00d914 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0c00da08 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0c00daf0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0c00dbdc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0c00ddb8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0c011ffc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0c00e05c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0c00e198 l     F .text	00000034 alt_dev_reg
0c010f64 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0c00e48c l     F .text	0000020c altera_avalon_jtag_uart_irq
0c00e698 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0c00ecd0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0c00f068 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0c00f4c8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0c00f628 l     F .text	0000003c alt_get_errno
0c00f664 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0c013b34 g     O .bss	00000004 alt_instruction_exception_handler
0c007100 g     F .text	00000074 _mprec_log10
0c0071ec g     F .text	0000008c __any_on
0c0096a8 g     F .text	00000054 _isatty_r
0c0102ac g     O .rodata	00000028 __mprec_tinytens
0c00dcf4 g     F .text	0000007c alt_main
0c0002c8 g     F .text	00000050 textVGAClr
0c013b60 g     O .bss	00000100 alt_irq
0c0096fc g     F .text	00000060 _lseek_r
0c01200c g       *ABS*	00000000 __flash_rwdata_start
0c00c1ac g     F .text	00000088 .hidden __eqdf2
0c013c60 g       *ABS*	00000000 __alt_heap_start
0c000b08 g     F .text	0000003c printf
0c009fd4 g     F .text	0000009c _wcrtomb_r
0c000318 g     F .text	00000650 textVGATest
0c007418 g     F .text	0000005c __sseek
0c004f04 g     F .text	00000010 __sinit
0c009e7c g     F .text	00000140 __swbuf_r
0c005510 g     F .text	0000007c _setlocale_r
0c004d5c g     F .text	00000078 __sfmoreglue
0c00dd94 g     F .text	00000024 __malloc_unlock
0c00975c g     F .text	0000015c memmove
0c004eec g     F .text	00000018 _cleanup
0c0061c0 g     F .text	000000a8 _Balloc
0c00c234 g     F .text	000000dc .hidden __gtdf2
0c00fa50 g     F .text	00000024 altera_nios2_gen2_irq_init
0c000000 g     F .entry	0000000c __reset
0c000020 g       *ABS*	00000000 __flash_exceptions_start
0c009184 g     F .text	0000005c _fstat_r
0c013b18 g     O .bss	00000004 errno
0c007394 g     F .text	00000008 __seofread
0c013b20 g     O .bss	00000004 alt_argv
0c019fc4 g       *ABS*	00000000 _gp
0c00e02c g     F .text	00000030 usleep
0c010de4 g     O .rwdata	00000180 alt_fd_list
0c00fa74 g     F .text	00000090 alt_find_dev
0c000990 g     F .text	00000148 memcpy
0c004bac g     F .text	0000000c _cleanup_r
0c00d5ec g     F .text	000000dc .hidden __floatsidf
0c00f5ac g     F .text	0000007c alt_io_redirect
0c00c310 g     F .text	000000f4 .hidden __ltdf2
0c010100 g       *ABS*	00000000 __DTOR_END__
0c00fcd0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0c007278 g     F .text	00000074 __fpclassifyd
0c00705c g     F .text	000000a4 __ratio
0c008c10 g     F .text	0000001c __vfiprintf_internal
0c00e890 g     F .text	0000021c altera_avalon_jtag_uart_read
0c000ad8 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0c00ae74 g     F .text	00000064 .hidden __udivsi3
0c00da44 g     F .text	000000ac isatty
0c0102fc g     O .rodata	000000c8 __mprec_tens
0c00558c g     F .text	0000000c __locale_charset
0c013b14 g     O .bss	00000004 __malloc_top_pad
0c011fd4 g     O .rwdata	00000004 __mb_cur_max
0c0055bc g     F .text	0000000c _localeconv_r
0c0091e0 g     F .text	000004c8 __sfvwrite_r
0c0065f4 g     F .text	0000003c __i2b
0c0072ec g     F .text	00000054 _sbrk_r
0c0098b8 g     F .text	00000060 _read_r
0c011ff4 g     O .rwdata	00000004 alt_max_fd
0c008e78 g     F .text	000000f0 _fclose_r
0c004b74 g     F .text	00000030 fflush
0c013b10 g     O .bss	00000004 __malloc_max_sbrked_mem
0c00af30 g     F .text	000008ac .hidden __adddf3
0c006e04 g     F .text	0000010c __b2d
0c00a7b8 g     F .text	000005c4 .hidden __umoddi3
0c00dc18 g     F .text	000000dc lseek
0c011fcc g     O .rwdata	00000004 _global_impure_ptr
0c009918 g     F .text	00000564 _realloc_r
0c013c60 g       *ABS*	00000000 __bss_end
0c00f3d8 g     F .text	000000f0 alt_iic_isr_register
0c00f948 g     F .text	00000108 alt_tick
0c00a1bc g     F .text	000005fc .hidden __udivdi3
0c0090e0 g     F .text	00000024 _fputwc_r
0c0102d4 g     O .rodata	00000028 __mprec_bigtens
0c0063d8 g     F .text	00000104 __s2b
0c00d6c8 g     F .text	000000a8 .hidden __floatunsidf
0c006b44 g     F .text	00000060 __mcmp
0c004f24 g     F .text	00000018 __fp_lock_all
0c00f38c g     F .text	0000004c alt_ic_irq_enabled
0c00f8ac g     F .text	0000009c alt_alarm_stop
0c013b28 g     O .bss	00000004 alt_irq_active
0c0000fc g     F .exceptions	000000d4 alt_irq_handler
0c010dbc g     O .rwdata	00000028 alt_dev_null
0c00f048 g     F .text	00000020 alt_dcache_flush_all
0c0064dc g     F .text	00000068 __hi0bits
0c00d56c g     F .text	00000080 .hidden __fixdfsi
0c01200c g       *ABS*	00000000 __ram_rwdata_end
0c011fec g     O .rwdata	00000008 alt_dev_list
0c00e098 g     F .text	00000100 write
0c010518 g       *ABS*	00000000 __ram_rodata_end
0c00d950 g     F .text	000000b8 fstat
0c00c310 g     F .text	000000f4 .hidden __ledf2
0c0068bc g     F .text	00000140 __pow5mult
0c007704 g     F .text	0000150c ___vfiprintf_internal_r
0c013b08 g     O .bss	00000004 __nlocale_changed
0c00aed8 g     F .text	00000058 .hidden __umodsi3
0c013c60 g       *ABS*	00000000 end
0c00e3cc g     F .text	000000c0 altera_avalon_jtag_uart_init
0c0001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0c010100 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0c00ed48 g     F .text	0000007c alt_avalon_timer_sc_init
0c00d770 g     F .text	00000064 .hidden __clzsi2
0c00eaac g     F .text	00000224 altera_avalon_jtag_uart_write
0c004f14 g     F .text	00000004 __sfp_lock_acquire
0c005fb4 g     F .text	000000e4 memchr
0c000b44 g     F .text	000022dc ___vfprintf_internal_r
0c005078 g     F .text	00000310 _free_r
0c005598 g     F .text	00000010 __locale_mb_cur_max
0c00ff4c g     F .text	00000180 __call_exitprocs
0c013b04 g     O .bss	00000004 __mlocale_changed
0c011fd8 g     O .rwdata	00000004 __malloc_sbrk_base
0c000230 g     F .text	0000003c _start
0c013b2c g     O .bss	00000004 _alt_tick_rate
0c0069fc g     F .text	00000148 __lshift
0c013b30 g     O .bss	00000004 _alt_nticks
0c00ddf4 g     F .text	00000104 read
0c00e204 g     F .text	00000064 alt_sys_init
0c00fe34 g     F .text	00000118 __register_exitproc
0c006630 g     F .text	0000028c __multiply
0c00e738 g     F .text	00000068 altera_avalon_jtag_uart_close
0c000968 g     F .text	00000028 .hidden __mulsi3
0c010518 g       *ABS*	00000000 __ram_rwdata_start
0c010100 g       *ABS*	00000000 __ram_rodata_start
0c013b38 g     O .bss	00000028 __malloc_current_mallinfo
0c006f10 g     F .text	0000014c __d2b
0c00e268 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0c00fc0c g     F .text	000000c4 alt_get_fd
0c00eef0 g     F .text	00000158 alt_busy_sleep
0c008d48 g     F .text	00000054 _close_r
0c00fdb8 g     F .text	0000007c memcmp
0c00e328 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0c013c60 g       *ABS*	00000000 __alt_stack_base
0c00e378 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0c002ef8 g     F .text	00000154 __swsetup_r
0c00b7dc g     F .text	000009d0 .hidden __divdf3
0c004dd4 g     F .text	00000118 __sfp
0c007174 g     F .text	00000078 __copybits
0c0109b4 g     O .rwdata	00000408 __malloc_av_
0c004f20 g     F .text	00000004 __sinit_lock_release
0c00c404 g     F .text	0000086c .hidden __muldf3
0c007340 g     F .text	00000054 __sread
0c00fb04 g     F .text	00000108 alt_find_file
0c00f0a4 g     F .text	000000a4 alt_dev_llist_insert
0c00dd70 g     F .text	00000024 __malloc_lock
0c00df7c g     F .text	000000b0 sbrk
0c004b18 g     F .text	0000005c _fflush_r
0c008d9c g     F .text	000000dc _calloc_r
0c013b00 g       *ABS*	00000000 __bss_start
0c006098 g     F .text	00000128 memset
0c00026c g     F .text	00000018 main
0c013b24 g     O .bss	00000004 alt_envp
0c013b0c g     O .bss	00000004 __malloc_max_total_mem
0c00e2c8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0c009fbc g     F .text	00000018 __swbuf
0c007474 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
0c008f68 g     F .text	00000014 fclose
0c003274 g     F .text	00001688 _dtoa_r
0c0057a8 g     F .text	0000080c _malloc_r
0c00a130 g     F .text	00000030 __ascii_wctomb
0c011ff8 g     O .rwdata	00000004 alt_errno
0c005388 g     F .text	000000c4 _fwalk
0c00ad7c g     F .text	00000084 .hidden __divsi3
0c004f54 g     F .text	00000124 _malloc_trim_r
0c010100 g       *ABS*	00000000 __CTOR_END__
0c00747c g     F .text	000000dc strcmp
0c010100 g       *ABS*	00000000 __flash_rodata_start
0c010100 g       *ABS*	00000000 __DTOR_LIST__
0c00c1ac g     F .text	00000088 .hidden __nedf2
0c00e1cc g     F .text	00000038 alt_irq_init
0c00def8 g     F .text	00000084 alt_release_fd
0c0103e4 g     O .rodata	00000100 .hidden __clz_tab
0c013b00 g     O .bss	00000004 _PathLocale
0c00fd6c g     F .text	00000014 atexit
0c008ce8 g     F .text	00000060 _write_r
0c0055c8 g     F .text	00000018 setlocale
0c000284 g     F .text	00000044 textVGASetColor
0c011fd0 g     O .rwdata	00000004 _impure_ptr
0c013b1c g     O .bss	00000004 alt_argc
0c0048fc g     F .text	0000021c __sflush_r
0c00f1a8 g     F .text	00000060 _do_dtors
0c0055b4 g     F .text	00000008 __locale_cjk_lang
0c000020 g       .exceptions	00000000 alt_irq_entry
0c006da0 g     F .text	00000064 __ulp
0c004f3c g     F .text	00000018 __fp_unlock_all
0c011fe4 g     O .rwdata	00000008 alt_fs_list
0c000020 g       *ABS*	00000000 __ram_exceptions_start
0c0055e0 g     F .text	0000000c localeconv
0c00f228 g     F .text	00000050 alt_ic_isr_register
0c01200c g       *ABS*	00000000 _edata
0c013c60 g       *ABS*	00000000 _end
0c008f7c g     F .text	00000164 __fputwc
0c000230 g       *ABS*	00000000 __ram_exceptions_end
0c00e7a0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0c00f300 g     F .text	0000008c alt_ic_irq_disable
0c00739c g     F .text	0000007c __swrite
0c011fdc g     O .rwdata	00000004 __malloc_trim_threshold
0c0055a8 g     F .text	0000000c __locale_msgcharset
0c00fd80 g     F .text	00000038 exit
0c00544c g     F .text	000000c4 _fwalk_reent
0c006ba4 g     F .text	000001fc __mdiff
0c00ae00 g     F .text	00000074 .hidden __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
0c000020 g     F .exceptions	00000000 alt_exception
0c004f18 g     F .text	00000004 __sfp_lock_release
0c000000 g       *ABS*	00000000 __alt_mem_sdram
0c0100cc g     F .text	00000034 _exit
0c00edc4 g     F .text	0000012c alt_alarm_start
0c0055ec g     F .text	000001bc __smakebuf_r
0c007558 g     F .text	00000098 strlen
0c00f750 g     F .text	0000015c open
0c00c234 g     F .text	000000dc .hidden __gedf2
0c011fe0 g     O .rwdata	00000004 __wctomb
0c0076ec g     F .text	00000018 __sprint_r
0c00f208 g     F .text	00000020 alt_icache_flush_all
0c012000 g     O .rwdata	00000004 alt_priority_mask
0c00f278 g     F .text	00000088 alt_ic_irq_enable
0c002e20 g     F .text	0000001c __vfprintf_internal
0c00a160 g     F .text	0000005c _wctomb_r
0c00cc70 g     F .text	000008fc .hidden __subdf3
0c006544 g     F .text	000000b0 __lo0bits
0c012004 g     O .rwdata	00000008 alt_alarm_list
0c00f148 g     F .text	00000060 _do_ctors
0c00a070 g     F .text	000000c0 wcrtomb
0c00d810 g     F .text	000000d8 close
0c00db58 g     F .text	00000084 alt_load
0c009104 g     F .text	00000080 fputwc
0c004f1c g     F .text	00000004 __sinit_lock_acquire
0c006290 g     F .text	00000148 __multadd
0c006268 g     F .text	00000028 _Bfree



Disassembly of section .entry:

0c000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 c000000:	00430034 	movhi	at,3072
    ori r1, r1, %lo(_start)
 c000004:	08408c14 	ori	at,at,560
    jmp r1
 c000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

0c000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 c000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 c000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 c000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 c00002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 c000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 c000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 c000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 c00003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 c000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 c000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 c000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 c00004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 c000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 c000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 c000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 c00005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 c000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 c000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 c000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 c00006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 c000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 c000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 c000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 c00007c:	10000326 	beq	r2,zero,c00008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 c000080:	20000226 	beq	r4,zero,c00008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 c000084:	c0000fc0 	call	c0000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 c000088:	00000706 	br	c0000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 c00008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 c000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 c000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 c000098:	c0001d00 	call	c0001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 c00009c:	1000021e 	bne	r2,zero,c0000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 c0000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 c0000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 c0000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 c0000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 c0000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 c0000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 c0000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 c0000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 c0000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 c0000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 c0000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 c0000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 c0000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 c0000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 c0000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 c0000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 c0000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 c0000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 c0000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 c0000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 c0000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 c0000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 c0000f8:	ef80083a 	eret

0c0000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 c0000fc:	defff904 	addi	sp,sp,-28
 c000100:	dfc00615 	stw	ra,24(sp)
 c000104:	df000515 	stw	fp,20(sp)
 c000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 c00010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 c000110:	0005313a 	rdctl	r2,ipending
 c000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 c000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 c00011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 c000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 c000124:	00800044 	movi	r2,1
 c000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 c00012c:	e0fffb17 	ldw	r3,-20(fp)
 c000130:	e0bffc17 	ldw	r2,-16(fp)
 c000134:	1884703a 	and	r2,r3,r2
 c000138:	10001426 	beq	r2,zero,c00018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 c00013c:	00830074 	movhi	r2,3073
 c000140:	108ed804 	addi	r2,r2,15200
 c000144:	e0fffd17 	ldw	r3,-12(fp)
 c000148:	180690fa 	slli	r3,r3,3
 c00014c:	10c5883a 	add	r2,r2,r3
 c000150:	10c00017 	ldw	r3,0(r2)
 c000154:	00830074 	movhi	r2,3073
 c000158:	108ed804 	addi	r2,r2,15200
 c00015c:	e13ffd17 	ldw	r4,-12(fp)
 c000160:	200890fa 	slli	r4,r4,3
 c000164:	1105883a 	add	r2,r2,r4
 c000168:	10800104 	addi	r2,r2,4
 c00016c:	10800017 	ldw	r2,0(r2)
 c000170:	1009883a 	mov	r4,r2
 c000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 c000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 c00017c:	0005313a 	rdctl	r2,ipending
 c000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 c000184:	e0bfff17 	ldw	r2,-4(fp)
 c000188:	00000706 	br	c0001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 c00018c:	e0bffc17 	ldw	r2,-16(fp)
 c000190:	1085883a 	add	r2,r2,r2
 c000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 c000198:	e0bffd17 	ldw	r2,-12(fp)
 c00019c:	10800044 	addi	r2,r2,1
 c0001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 c0001a4:	003fe106 	br	c00012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 c0001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 c0001ac:	e0bffb17 	ldw	r2,-20(fp)
 c0001b0:	103fdb1e 	bne	r2,zero,c000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 c0001b4:	0001883a 	nop
}
 c0001b8:	0001883a 	nop
 c0001bc:	e037883a 	mov	sp,fp
 c0001c0:	dfc00117 	ldw	ra,4(sp)
 c0001c4:	df000017 	ldw	fp,0(sp)
 c0001c8:	dec00204 	addi	sp,sp,8
 c0001cc:	f800283a 	ret

0c0001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 c0001d0:	defffb04 	addi	sp,sp,-20
 c0001d4:	dfc00415 	stw	ra,16(sp)
 c0001d8:	df000315 	stw	fp,12(sp)
 c0001dc:	df000304 	addi	fp,sp,12
 c0001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 c0001e4:	00bfffc4 	movi	r2,-1
 c0001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 c0001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 c0001f0:	d0a6dc17 	ldw	r2,-25744(gp)
 c0001f4:	10000726 	beq	r2,zero,c000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 c0001f8:	d0a6dc17 	ldw	r2,-25744(gp)
 c0001fc:	e0fffd17 	ldw	r3,-12(fp)
 c000200:	e1bffe17 	ldw	r6,-8(fp)
 c000204:	e17fff17 	ldw	r5,-4(fp)
 c000208:	1809883a 	mov	r4,r3
 c00020c:	103ee83a 	callr	r2
 c000210:	00000206 	br	c00021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 c000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 c000218:	0005883a 	mov	r2,zero
}
 c00021c:	e037883a 	mov	sp,fp
 c000220:	dfc00117 	ldw	ra,4(sp)
 c000224:	df000017 	ldw	fp,0(sp)
 c000228:	dec00204 	addi	sp,sp,8
 c00022c:	f800283a 	ret

Disassembly of section .text:

0c000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 c000230:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 c000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 c000238:	06830074 	movhi	gp,3073
    ori gp, gp, %lo(_gp)
 c00023c:	d6a7f114 	ori	gp,gp,40900
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 c000240:	00830074 	movhi	r2,3073
    ori r2, r2, %lo(__bss_start)
 c000244:	108ec014 	ori	r2,r2,15104

    movhi r3, %hi(__bss_end)
 c000248:	00c30074 	movhi	r3,3073
    ori r3, r3, %lo(__bss_end)
 c00024c:	18cf1814 	ori	r3,r3,15456

    beq r2, r3, 1f
 c000250:	10c00326 	beq	r2,r3,c000260 <_start+0x30>

0:
    stw zero, (r2)
 c000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 c000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 c00025c:	10fffd36 	bltu	r2,r3,c000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 c000260:	c00db580 	call	c00db58 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 c000264:	c00dcf40 	call	c00dcf4 <alt_main>

0c000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 c000268:	003fff06 	br	c000268 <__alt_data_end+0xfc000268>

0c00026c <main>:
#include "text_mode_vga.h"
int main(){
 c00026c:	defffe04 	addi	sp,sp,-8
 c000270:	dfc00115 	stw	ra,4(sp)
 c000274:	df000015 	stw	fp,0(sp)
 c000278:	d839883a 	mov	fp,sp
    while (1+1 != 3){
        textVGATest();
 c00027c:	c0003180 	call	c000318 <textVGATest>
    }
 c000280:	003ffe06 	br	c00027c <__alt_data_end+0xfc00027c>

0c000284 <textVGASetColor>:
#include <alt_types.h>
#include "text_mode_vga.h"


void textVGASetColor(int background, int foreground)
{
 c000284:	defffd04 	addi	sp,sp,-12
 c000288:	df000215 	stw	fp,8(sp)
 c00028c:	df000204 	addi	fp,sp,8
 c000290:	e13ffe15 	stw	r4,-8(fp)
 c000294:	e17fff15 	stw	r5,-4(fp)
	vga_ctrl->CTRL = foreground << 13 |
 c000298:	d0e00117 	ldw	r3,-32764(gp)
 c00029c:	e0bfff17 	ldw	r2,-4(fp)
 c0002a0:	1008937a 	slli	r4,r2,13
					 background << 1;
 c0002a4:	e0bffe17 	ldw	r2,-8(fp)
 c0002a8:	1085883a 	add	r2,r2,r2
#include "text_mode_vga.h"


void textVGASetColor(int background, int foreground)
{
	vga_ctrl->CTRL = foreground << 13 |
 c0002ac:	2084b03a 	or	r2,r4,r2
 c0002b0:	18825815 	stw	r2,2400(r3)
					 background << 1;
}
 c0002b4:	0001883a 	nop
 c0002b8:	e037883a 	mov	sp,fp
 c0002bc:	df000017 	ldw	fp,0(sp)
 c0002c0:	dec00104 	addi	sp,sp,4
 c0002c4:	f800283a 	ret

0c0002c8 <textVGAClr>:

void textVGAClr()
{
 c0002c8:	defffe04 	addi	sp,sp,-8
 c0002cc:	df000115 	stw	fp,4(sp)
 c0002d0:	df000104 	addi	fp,sp,4
	for (int i = 0; i<(ROWS*COLUMNS); i++)
 c0002d4:	e03fff15 	stw	zero,-4(fp)
 c0002d8:	00000706 	br	c0002f8 <textVGAClr+0x30>
	{
		vga_ctrl->VRAM[i] = 0x00;
 c0002dc:	d0e00117 	ldw	r3,-32764(gp)
 c0002e0:	e0bfff17 	ldw	r2,-4(fp)
 c0002e4:	1885883a 	add	r2,r3,r2
 c0002e8:	10000005 	stb	zero,0(r2)
					 background << 1;
}

void textVGAClr()
{
	for (int i = 0; i<(ROWS*COLUMNS); i++)
 c0002ec:	e0bfff17 	ldw	r2,-4(fp)
 c0002f0:	10800044 	addi	r2,r2,1
 c0002f4:	e0bfff15 	stw	r2,-4(fp)
 c0002f8:	e0bfff17 	ldw	r2,-4(fp)
 c0002fc:	10825810 	cmplti	r2,r2,2400
 c000300:	103ff61e 	bne	r2,zero,c0002dc <__alt_data_end+0xfc0002dc>
	{
		vga_ctrl->VRAM[i] = 0x00;
	}
}
 c000304:	0001883a 	nop
 c000308:	e037883a 	mov	sp,fp
 c00030c:	df000017 	ldw	fp,0(sp)
 c000310:	dec00104 	addi	sp,sp,4
 c000314:	f800283a 	ret

0c000318 <textVGATest>:

void textVGATest()
{
 c000318:	deff8904 	addi	sp,sp,-476
 c00031c:	dfc07615 	stw	ra,472(sp)
 c000320:	df007515 	stw	fp,468(sp)
 c000324:	dc007415 	stw	r16,464(sp)
 c000328:	df007504 	addi	fp,sp,468
	textVGASetColor(BLACK, WHITE);
 c00032c:	0143ffc4 	movi	r5,4095
 c000330:	0009883a 	mov	r4,zero
 c000334:	c0002840 	call	c000284 <textVGASetColor>
	textVGAClr();
 c000338:	c0002c80 	call	c0002c8 <textVGAClr>

	//Register write and readback test
	alt_u32 checksum[ROWS], readsum[ROWS];

	for (int j = 0; j < ROWS; j++)
 c00033c:	e03f8b15 	stw	zero,-468(fp)
 c000340:	00003106 	br	c000408 <textVGATest+0xf0>
	{
		checksum[j] = 0;
 c000344:	e0bf8b17 	ldw	r2,-468(fp)
 c000348:	1085883a 	add	r2,r2,r2
 c00034c:	1085883a 	add	r2,r2,r2
 c000350:	e0ff8b04 	addi	r3,fp,-468
 c000354:	1885883a 	add	r2,r3,r2
 c000358:	10800904 	addi	r2,r2,36
 c00035c:	10000015 	stw	zero,0(r2)
		for (int i = 0; i < COLUMNS; i++)
 c000360:	e03f8c15 	stw	zero,-464(fp)
 c000364:	00002206 	br	c0003f0 <textVGATest+0xd8>
		{
			vga_ctrl->VRAM[j*COLUMNS + i] = i + j;
 c000368:	d4200117 	ldw	r16,-32764(gp)
 c00036c:	01401404 	movi	r5,80
 c000370:	e13f8b17 	ldw	r4,-468(fp)
 c000374:	c0009680 	call	c000968 <__mulsi3>
 c000378:	1007883a 	mov	r3,r2
 c00037c:	e0bf8c17 	ldw	r2,-464(fp)
 c000380:	1885883a 	add	r2,r3,r2
 c000384:	e0ff8c17 	ldw	r3,-464(fp)
 c000388:	1809883a 	mov	r4,r3
 c00038c:	e0ff8b17 	ldw	r3,-468(fp)
 c000390:	20c7883a 	add	r3,r4,r3
 c000394:	8085883a 	add	r2,r16,r2
 c000398:	10c00005 	stb	r3,0(r2)
			checksum[j] += i + j;
 c00039c:	e0bf8b17 	ldw	r2,-468(fp)
 c0003a0:	1085883a 	add	r2,r2,r2
 c0003a4:	1085883a 	add	r2,r2,r2
 c0003a8:	e13f8b04 	addi	r4,fp,-468
 c0003ac:	2085883a 	add	r2,r4,r2
 c0003b0:	10800904 	addi	r2,r2,36
 c0003b4:	10800017 	ldw	r2,0(r2)
 c0003b8:	e13f8c17 	ldw	r4,-464(fp)
 c0003bc:	e0ff8b17 	ldw	r3,-468(fp)
 c0003c0:	20c7883a 	add	r3,r4,r3
 c0003c4:	10c7883a 	add	r3,r2,r3
 c0003c8:	e0bf8b17 	ldw	r2,-468(fp)
 c0003cc:	1085883a 	add	r2,r2,r2
 c0003d0:	1085883a 	add	r2,r2,r2
 c0003d4:	e13f8b04 	addi	r4,fp,-468
 c0003d8:	2085883a 	add	r2,r4,r2
 c0003dc:	10800904 	addi	r2,r2,36
 c0003e0:	10c00015 	stw	r3,0(r2)
	alt_u32 checksum[ROWS], readsum[ROWS];

	for (int j = 0; j < ROWS; j++)
	{
		checksum[j] = 0;
		for (int i = 0; i < COLUMNS; i++)
 c0003e4:	e0bf8c17 	ldw	r2,-464(fp)
 c0003e8:	10800044 	addi	r2,r2,1
 c0003ec:	e0bf8c15 	stw	r2,-464(fp)
 c0003f0:	e0bf8c17 	ldw	r2,-464(fp)
 c0003f4:	10801410 	cmplti	r2,r2,80
 c0003f8:	103fdb1e 	bne	r2,zero,c000368 <__alt_data_end+0xfc000368>
	textVGAClr();

	//Register write and readback test
	alt_u32 checksum[ROWS], readsum[ROWS];

	for (int j = 0; j < ROWS; j++)
 c0003fc:	e0bf8b17 	ldw	r2,-468(fp)
 c000400:	10800044 	addi	r2,r2,1
 c000404:	e0bf8b15 	stw	r2,-468(fp)
 c000408:	e0bf8b17 	ldw	r2,-468(fp)
 c00040c:	10800790 	cmplti	r2,r2,30
 c000410:	103fcc1e 	bne	r2,zero,c000344 <__alt_data_end+0xfc000344>
		{
			vga_ctrl->VRAM[j*COLUMNS + i] = i + j;
			checksum[j] += i + j;
		}
	}
	for (int j = 0; j < ROWS; j++)
 c000414:	e03f8d15 	stw	zero,-460(fp)
 c000418:	00005206 	br	c000564 <textVGATest+0x24c>
	{
		readsum[j] = 0;
 c00041c:	e0bf8d17 	ldw	r2,-460(fp)
 c000420:	1085883a 	add	r2,r2,r2
 c000424:	1085883a 	add	r2,r2,r2
 c000428:	e0ff8b04 	addi	r3,fp,-468
 c00042c:	1885883a 	add	r2,r3,r2
 c000430:	10802704 	addi	r2,r2,156
 c000434:	10000015 	stw	zero,0(r2)
		for (int i = 0; i < COLUMNS; i++)
 c000438:	e03f8e15 	stw	zero,-456(fp)
 c00043c:	00001c06 	br	c0004b0 <textVGATest+0x198>
		{
			readsum[j] += vga_ctrl->VRAM[j*COLUMNS + i];
 c000440:	d4200117 	ldw	r16,-32764(gp)
 c000444:	01401404 	movi	r5,80
 c000448:	e13f8d17 	ldw	r4,-460(fp)
 c00044c:	c0009680 	call	c000968 <__mulsi3>
 c000450:	1007883a 	mov	r3,r2
 c000454:	e0bf8e17 	ldw	r2,-456(fp)
 c000458:	1885883a 	add	r2,r3,r2
 c00045c:	8085883a 	add	r2,r16,r2
 c000460:	11000003 	ldbu	r4,0(r2)
 c000464:	e0bf8d17 	ldw	r2,-460(fp)
 c000468:	1085883a 	add	r2,r2,r2
 c00046c:	1085883a 	add	r2,r2,r2
 c000470:	e0ff8b04 	addi	r3,fp,-468
 c000474:	1885883a 	add	r2,r3,r2
 c000478:	10802704 	addi	r2,r2,156
 c00047c:	10c00017 	ldw	r3,0(r2)
 c000480:	20803fcc 	andi	r2,r4,255
 c000484:	1887883a 	add	r3,r3,r2
 c000488:	e0bf8d17 	ldw	r2,-460(fp)
 c00048c:	1085883a 	add	r2,r2,r2
 c000490:	1085883a 	add	r2,r2,r2
 c000494:	e13f8b04 	addi	r4,fp,-468
 c000498:	2085883a 	add	r2,r4,r2
 c00049c:	10802704 	addi	r2,r2,156
 c0004a0:	10c00015 	stw	r3,0(r2)
		}
	}
	for (int j = 0; j < ROWS; j++)
	{
		readsum[j] = 0;
		for (int i = 0; i < COLUMNS; i++)
 c0004a4:	e0bf8e17 	ldw	r2,-456(fp)
 c0004a8:	10800044 	addi	r2,r2,1
 c0004ac:	e0bf8e15 	stw	r2,-456(fp)
 c0004b0:	e0bf8e17 	ldw	r2,-456(fp)
 c0004b4:	10801410 	cmplti	r2,r2,80
 c0004b8:	103fe11e 	bne	r2,zero,c000440 <__alt_data_end+0xfc000440>
		{
			readsum[j] += vga_ctrl->VRAM[j*COLUMNS + i];
			//printf ("%x \n\r", vga_ctrl->VRAM[j*COLUMNS + i]);
		}
		printf ("Row: %d, Checksum: %x, Read-back Checksum: %x\n\r", j, checksum[j], readsum[j]);
 c0004bc:	e0bf8d17 	ldw	r2,-460(fp)
 c0004c0:	1085883a 	add	r2,r2,r2
 c0004c4:	1085883a 	add	r2,r2,r2
 c0004c8:	e0ff8b04 	addi	r3,fp,-468
 c0004cc:	1885883a 	add	r2,r3,r2
 c0004d0:	10800904 	addi	r2,r2,36
 c0004d4:	10c00017 	ldw	r3,0(r2)
 c0004d8:	e0bf8d17 	ldw	r2,-460(fp)
 c0004dc:	1085883a 	add	r2,r2,r2
 c0004e0:	1085883a 	add	r2,r2,r2
 c0004e4:	e13f8b04 	addi	r4,fp,-468
 c0004e8:	2085883a 	add	r2,r4,r2
 c0004ec:	10802704 	addi	r2,r2,156
 c0004f0:	10800017 	ldw	r2,0(r2)
 c0004f4:	100f883a 	mov	r7,r2
 c0004f8:	180d883a 	mov	r6,r3
 c0004fc:	e17f8d17 	ldw	r5,-460(fp)
 c000500:	01030074 	movhi	r4,3073
 c000504:	21004004 	addi	r4,r4,256
 c000508:	c000b080 	call	c000b08 <printf>
		if (checksum[j] != readsum[j])
 c00050c:	e0bf8d17 	ldw	r2,-460(fp)
 c000510:	1085883a 	add	r2,r2,r2
 c000514:	1085883a 	add	r2,r2,r2
 c000518:	e0ff8b04 	addi	r3,fp,-468
 c00051c:	1885883a 	add	r2,r3,r2
 c000520:	10800904 	addi	r2,r2,36
 c000524:	10c00017 	ldw	r3,0(r2)
 c000528:	e0bf8d17 	ldw	r2,-460(fp)
 c00052c:	1085883a 	add	r2,r2,r2
 c000530:	1085883a 	add	r2,r2,r2
 c000534:	e13f8b04 	addi	r4,fp,-468
 c000538:	2085883a 	add	r2,r4,r2
 c00053c:	10802704 	addi	r2,r2,156
 c000540:	10800017 	ldw	r2,0(r2)
 c000544:	18800426 	beq	r3,r2,c000558 <textVGATest+0x240>
		{
			printf ("Checksum mismatch!, check your Avalon-MM code\n\r");
 c000548:	01030074 	movhi	r4,3073
 c00054c:	21004c04 	addi	r4,r4,304
 c000550:	c000b080 	call	c000b08 <printf>
			while (1){};
 c000554:	003fff06 	br	c000554 <__alt_data_end+0xfc000554>
		{
			vga_ctrl->VRAM[j*COLUMNS + i] = i + j;
			checksum[j] += i + j;
		}
	}
	for (int j = 0; j < ROWS; j++)
 c000558:	e0bf8d17 	ldw	r2,-460(fp)
 c00055c:	10800044 	addi	r2,r2,1
 c000560:	e0bf8d15 	stw	r2,-460(fp)
 c000564:	e0bf8d17 	ldw	r2,-460(fp)
 c000568:	10800790 	cmplti	r2,r2,30
 c00056c:	103fab1e 	bne	r2,zero,c00041c <__alt_data_end+0xfc00041c>
		{
			printf ("Checksum mismatch!, check your Avalon-MM code\n\r");
			while (1){};
		}
	}
	printf ("Checksum code passed!...starting color test \n\r");
 c000570:	01030074 	movhi	r4,3073
 c000574:	21005804 	addi	r4,r4,352
 c000578:	c000b080 	call	c000b08 <printf>
	usleep (500000);
 c00057c:	01000234 	movhi	r4,8
 c000580:	21284804 	addi	r4,r4,-24288
 c000584:	c00e02c0 	call	c00e02c <usleep>
	textVGASetColor(DIM_GRN, BRIGHT_GRN);
 c000588:	01403c04 	movi	r5,240
 c00058c:	01001c04 	movi	r4,112
 c000590:	c0002840 	call	c000284 <textVGASetColor>
	textVGAClr();
 c000594:	c0002c80 	call	c0002c8 <textVGAClr>
	char greentest[] = "This text should draw in green";
 c000598:	009cda74 	movhi	r2,29545
 c00059c:	109a1504 	addi	r2,r2,26708
 c0005a0:	e0bfd015 	stw	r2,-192(fp)
 c0005a4:	009e1974 	movhi	r2,30821
 c0005a8:	109d0804 	addi	r2,r2,29728
 c0005ac:	e0bfd115 	stw	r2,-188(fp)
 c0005b0:	009a1cf4 	movhi	r2,26739
 c0005b4:	10881d04 	addi	r2,r2,8308
 c0005b8:	e0bfd215 	stw	r2,-184(fp)
 c0005bc:	00991b34 	movhi	r2,25708
 c0005c0:	109d5bc4 	addi	r2,r2,30063
 c0005c4:	e0bfd315 	stw	r2,-180(fp)
 c0005c8:	00985cb4 	movhi	r2,24946
 c0005cc:	10990804 	addi	r2,r2,25632
 c0005d0:	e0bfd415 	stw	r2,-176(fp)
 c0005d4:	009b9a74 	movhi	r2,28265
 c0005d8:	10881dc4 	addi	r2,r2,8311
 c0005dc:	e0bfd515 	stw	r2,-172(fp)
 c0005e0:	00995cb4 	movhi	r2,25970
 c0005e4:	1099c804 	addi	r2,r2,26400
 c0005e8:	e0bfd615 	stw	r2,-168(fp)
 c0005ec:	009b9944 	movi	r2,28261
 c0005f0:	e0bfd70d 	sth	r2,-164(fp)
 c0005f4:	e03fd785 	stb	zero,-162(fp)
	{
		for (int j = 0; j < ROWS; j++)
 c0005f8:	e03f8f15 	stw	zero,-452(fp)
 c0005fc:	00001006 	br	c000640 <textVGATest+0x328>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,greentest, sizeof(greentest));
 c000600:	d4200117 	ldw	r16,-32764(gp)
 c000604:	01401404 	movi	r5,80
 c000608:	e13f8f17 	ldw	r4,-452(fp)
 c00060c:	c0009680 	call	c000968 <__mulsi3>
 c000610:	8087883a 	add	r3,r16,r2
 c000614:	e0bf8f17 	ldw	r2,-452(fp)
 c000618:	1885883a 	add	r2,r3,r2
 c00061c:	1009883a 	mov	r4,r2
 c000620:	e0bfd004 	addi	r2,fp,-192
 c000624:	00c007c4 	movi	r3,31
 c000628:	180d883a 	mov	r6,r3
 c00062c:	100b883a 	mov	r5,r2
 c000630:	c0009900 	call	c000990 <memcpy>
	usleep (500000);
	textVGASetColor(DIM_GRN, BRIGHT_GRN);
	textVGAClr();
	char greentest[] = "This text should draw in green";
	{
		for (int j = 0; j < ROWS; j++)
 c000634:	e0bf8f17 	ldw	r2,-452(fp)
 c000638:	10800044 	addi	r2,r2,1
 c00063c:	e0bf8f15 	stw	r2,-452(fp)
 c000640:	e0bf8f17 	ldw	r2,-452(fp)
 c000644:	10800790 	cmplti	r2,r2,30
 c000648:	103fed1e 	bne	r2,zero,c000600 <__alt_data_end+0xfc000600>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,greentest, sizeof(greentest));
		}
	}
	usleep (500000);
 c00064c:	01000234 	movhi	r4,8
 c000650:	21284804 	addi	r4,r4,-24288
 c000654:	c00e02c0 	call	c00e02c <usleep>
	textVGASetColor(DIM_RED, BRIGHT_RED);
 c000658:	0143c004 	movi	r5,3840
 c00065c:	0101c004 	movi	r4,1792
 c000660:	c0002840 	call	c000284 <textVGASetColor>
	textVGAClr();
 c000664:	c0002c80 	call	c0002c8 <textVGAClr>
	char redtest[] = "This text should draw in red";
 c000668:	00830074 	movhi	r2,3073
 c00066c:	10806604 	addi	r2,r2,408
 c000670:	e0ffd7c4 	addi	r3,fp,-161
 c000674:	1009883a 	mov	r4,r2
 c000678:	00800744 	movi	r2,29
 c00067c:	100d883a 	mov	r6,r2
 c000680:	200b883a 	mov	r5,r4
 c000684:	1809883a 	mov	r4,r3
 c000688:	c0009900 	call	c000990 <memcpy>
	{
		for (int j = 0; j < ROWS; j++)
 c00068c:	e03f9015 	stw	zero,-448(fp)
 c000690:	00001206 	br	c0006dc <textVGATest+0x3c4>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+(ROWS-j),redtest, sizeof(redtest));
 c000694:	d4200117 	ldw	r16,-32764(gp)
 c000698:	01401404 	movi	r5,80
 c00069c:	e13f9017 	ldw	r4,-448(fp)
 c0006a0:	c0009680 	call	c000968 <__mulsi3>
 c0006a4:	8085883a 	add	r2,r16,r2
 c0006a8:	01000784 	movi	r4,30
 c0006ac:	e0ff9017 	ldw	r3,-448(fp)
 c0006b0:	20c7c83a 	sub	r3,r4,r3
 c0006b4:	10c5883a 	add	r2,r2,r3
 c0006b8:	1009883a 	mov	r4,r2
 c0006bc:	e0bfd7c4 	addi	r2,fp,-161
 c0006c0:	00c00744 	movi	r3,29
 c0006c4:	180d883a 	mov	r6,r3
 c0006c8:	100b883a 	mov	r5,r2
 c0006cc:	c0009900 	call	c000990 <memcpy>
	usleep (500000);
	textVGASetColor(DIM_RED, BRIGHT_RED);
	textVGAClr();
	char redtest[] = "This text should draw in red";
	{
		for (int j = 0; j < ROWS; j++)
 c0006d0:	e0bf9017 	ldw	r2,-448(fp)
 c0006d4:	10800044 	addi	r2,r2,1
 c0006d8:	e0bf9015 	stw	r2,-448(fp)
 c0006dc:	e0bf9017 	ldw	r2,-448(fp)
 c0006e0:	10800790 	cmplti	r2,r2,30
 c0006e4:	103feb1e 	bne	r2,zero,c000694 <__alt_data_end+0xfc000694>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+(ROWS-j),redtest, sizeof(redtest));
		}
	}
	usleep (500000);
 c0006e8:	01000234 	movhi	r4,8
 c0006ec:	21284804 	addi	r4,r4,-24288
 c0006f0:	c00e02c0 	call	c00e02c <usleep>
	textVGASetColor(DIM_BLU, BRIGHT_BLU);
 c0006f4:	014003c4 	movi	r5,15
 c0006f8:	010001c4 	movi	r4,7
 c0006fc:	c0002840 	call	c000284 <textVGASetColor>
	textVGAClr();
 c000700:	c0002c80 	call	c0002c8 <textVGAClr>
	char blutest[] = "This text should draw in blue";
 c000704:	009cda74 	movhi	r2,29545
 c000708:	109a1504 	addi	r2,r2,26708
 c00070c:	e0bfdf15 	stw	r2,-132(fp)
 c000710:	009e1974 	movhi	r2,30821
 c000714:	109d0804 	addi	r2,r2,29728
 c000718:	e0bfe015 	stw	r2,-128(fp)
 c00071c:	009a1cf4 	movhi	r2,26739
 c000720:	10881d04 	addi	r2,r2,8308
 c000724:	e0bfe115 	stw	r2,-124(fp)
 c000728:	00991b34 	movhi	r2,25708
 c00072c:	109d5bc4 	addi	r2,r2,30063
 c000730:	e0bfe215 	stw	r2,-120(fp)
 c000734:	00985cb4 	movhi	r2,24946
 c000738:	10990804 	addi	r2,r2,25632
 c00073c:	e0bfe315 	stw	r2,-116(fp)
 c000740:	009b9a74 	movhi	r2,28265
 c000744:	10881dc4 	addi	r2,r2,8311
 c000748:	e0bfe415 	stw	r2,-112(fp)
 c00074c:	009d5b34 	movhi	r2,30060
 c000750:	10988804 	addi	r2,r2,25120
 c000754:	e0bfe515 	stw	r2,-108(fp)
 c000758:	00801944 	movi	r2,101
 c00075c:	e0bfe60d 	sth	r2,-104(fp)
	{
		for (int j = 0; j < ROWS; j++)
 c000760:	e03f9115 	stw	zero,-444(fp)
 c000764:	00000e06 	br	c0007a0 <textVGATest+0x488>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS],blutest, sizeof(blutest));
 c000768:	d4200117 	ldw	r16,-32764(gp)
 c00076c:	01401404 	movi	r5,80
 c000770:	e13f9117 	ldw	r4,-444(fp)
 c000774:	c0009680 	call	c000968 <__mulsi3>
 c000778:	8085883a 	add	r2,r16,r2
 c00077c:	1009883a 	mov	r4,r2
 c000780:	e0bfdf04 	addi	r2,fp,-132
 c000784:	00c00784 	movi	r3,30
 c000788:	180d883a 	mov	r6,r3
 c00078c:	100b883a 	mov	r5,r2
 c000790:	c0009900 	call	c000990 <memcpy>
	usleep (500000);
	textVGASetColor(DIM_BLU, BRIGHT_BLU);
	textVGAClr();
	char blutest[] = "This text should draw in blue";
	{
		for (int j = 0; j < ROWS; j++)
 c000794:	e0bf9117 	ldw	r2,-444(fp)
 c000798:	10800044 	addi	r2,r2,1
 c00079c:	e0bf9115 	stw	r2,-444(fp)
 c0007a0:	e0bf9117 	ldw	r2,-444(fp)
 c0007a4:	10800790 	cmplti	r2,r2,30
 c0007a8:	103fef1e 	bne	r2,zero,c000768 <__alt_data_end+0xfc000768>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS],blutest, sizeof(blutest));
		}
	}
	usleep (500000);
 c0007ac:	01000234 	movhi	r4,8
 c0007b0:	21284804 	addi	r4,r4,-24288
 c0007b4:	c00e02c0 	call	c00e02c <usleep>
	textVGAClr();
 c0007b8:	c0002c80 	call	c0002c8 <textVGAClr>
	char inverted[] = "This text should draw inverted";
 c0007bc:	00830074 	movhi	r2,3073
 c0007c0:	10806e04 	addi	r2,r2,440
 c0007c4:	e0ffe684 	addi	r3,fp,-102
 c0007c8:	1009883a 	mov	r4,r2
 c0007cc:	008007c4 	movi	r2,31
 c0007d0:	100d883a 	mov	r6,r2
 c0007d4:	200b883a 	mov	r5,r4
 c0007d8:	1809883a 	mov	r4,r3
 c0007dc:	c0009900 	call	c000990 <memcpy>
	for (int i = 0; i < sizeof(inverted); i++)
 c0007e0:	e03f9215 	stw	zero,-440(fp)
 c0007e4:	00000e06 	br	c000820 <textVGATest+0x508>
		inverted[i] |= 0x80;
 c0007e8:	e0ffe684 	addi	r3,fp,-102
 c0007ec:	e0bf9217 	ldw	r2,-440(fp)
 c0007f0:	1885883a 	add	r2,r3,r2
 c0007f4:	10c00003 	ldbu	r3,0(r2)
 c0007f8:	00bfe004 	movi	r2,-128
 c0007fc:	1884b03a 	or	r2,r3,r2
 c000800:	1009883a 	mov	r4,r2
 c000804:	e0ffe684 	addi	r3,fp,-102
 c000808:	e0bf9217 	ldw	r2,-440(fp)
 c00080c:	1885883a 	add	r2,r3,r2
 c000810:	11000005 	stb	r4,0(r2)
		}
	}
	usleep (500000);
	textVGAClr();
	char inverted[] = "This text should draw inverted";
	for (int i = 0; i < sizeof(inverted); i++)
 c000814:	e0bf9217 	ldw	r2,-440(fp)
 c000818:	10800044 	addi	r2,r2,1
 c00081c:	e0bf9215 	stw	r2,-440(fp)
 c000820:	e0bf9217 	ldw	r2,-440(fp)
 c000824:	108007f0 	cmpltui	r2,r2,31
 c000828:	103fef1e 	bne	r2,zero,c0007e8 <__alt_data_end+0xfc0007e8>
		inverted[i] |= 0x80;

	textVGASetColor(DIM_GRN, BRIGHT_GRN);
 c00082c:	01403c04 	movi	r5,240
 c000830:	01001c04 	movi	r4,112
 c000834:	c0002840 	call	c000284 <textVGASetColor>
	{
		for (int j = 0; j < ROWS; j++)
 c000838:	e03f9315 	stw	zero,-436(fp)
 c00083c:	00002106 	br	c0008c4 <textVGATest+0x5ac>
		{
			if (j%2==0)
 c000840:	e0bf9317 	ldw	r2,-436(fp)
 c000844:	1080004c 	andi	r2,r2,1
 c000848:	10000e1e 	bne	r2,zero,c000884 <textVGATest+0x56c>
				memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,greentest, sizeof(greentest));
 c00084c:	d4200117 	ldw	r16,-32764(gp)
 c000850:	01401404 	movi	r5,80
 c000854:	e13f9317 	ldw	r4,-436(fp)
 c000858:	c0009680 	call	c000968 <__mulsi3>
 c00085c:	8087883a 	add	r3,r16,r2
 c000860:	e0bf9317 	ldw	r2,-436(fp)
 c000864:	1885883a 	add	r2,r3,r2
 c000868:	1009883a 	mov	r4,r2
 c00086c:	e0bfd004 	addi	r2,fp,-192
 c000870:	00c007c4 	movi	r3,31
 c000874:	180d883a 	mov	r6,r3
 c000878:	100b883a 	mov	r5,r2
 c00087c:	c0009900 	call	c000990 <memcpy>
 c000880:	00000d06 	br	c0008b8 <textVGATest+0x5a0>
			else
				memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,inverted, sizeof(inverted));
 c000884:	d4200117 	ldw	r16,-32764(gp)
 c000888:	01401404 	movi	r5,80
 c00088c:	e13f9317 	ldw	r4,-436(fp)
 c000890:	c0009680 	call	c000968 <__mulsi3>
 c000894:	8087883a 	add	r3,r16,r2
 c000898:	e0bf9317 	ldw	r2,-436(fp)
 c00089c:	1885883a 	add	r2,r3,r2
 c0008a0:	1009883a 	mov	r4,r2
 c0008a4:	e0bfe684 	addi	r2,fp,-102
 c0008a8:	00c007c4 	movi	r3,31
 c0008ac:	180d883a 	mov	r6,r3
 c0008b0:	100b883a 	mov	r5,r2
 c0008b4:	c0009900 	call	c000990 <memcpy>
	for (int i = 0; i < sizeof(inverted); i++)
		inverted[i] |= 0x80;

	textVGASetColor(DIM_GRN, BRIGHT_GRN);
	{
		for (int j = 0; j < ROWS; j++)
 c0008b8:	e0bf9317 	ldw	r2,-436(fp)
 c0008bc:	10800044 	addi	r2,r2,1
 c0008c0:	e0bf9315 	stw	r2,-436(fp)
 c0008c4:	e0bf9317 	ldw	r2,-436(fp)
 c0008c8:	10800790 	cmplti	r2,r2,30
 c0008cc:	103fdc1e 	bne	r2,zero,c000840 <__alt_data_end+0xfc000840>
				memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,greentest, sizeof(greentest));
			else
				memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,inverted, sizeof(inverted));
		}
	}
	usleep (500000);
 c0008d0:	01000234 	movhi	r4,8
 c0008d4:	21284804 	addi	r4,r4,-24288
 c0008d8:	c00e02c0 	call	c00e02c <usleep>

	textVGASetColor(BLACK, WHITE);
 c0008dc:	0143ffc4 	movi	r5,4095
 c0008e0:	0009883a 	mov	r4,zero
 c0008e4:	c0002840 	call	c000284 <textVGASetColor>
	textVGAClr();
 c0008e8:	c0002c80 	call	c0002c8 <textVGAClr>

	char completed[] = "All visual tests completed, verify on-screen results are correct.";
 c0008ec:	00830074 	movhi	r2,3073
 c0008f0:	10807604 	addi	r2,r2,472
 c0008f4:	e0ffee44 	addi	r3,fp,-71
 c0008f8:	1009883a 	mov	r4,r2
 c0008fc:	00801084 	movi	r2,66
 c000900:	100d883a 	mov	r6,r2
 c000904:	200b883a 	mov	r5,r4
 c000908:	1809883a 	mov	r4,r3
 c00090c:	c0009900 	call	c000990 <memcpy>
	memcpy((void*)&vga_ctrl->VRAM[0],completed, sizeof(completed));
 c000910:	d0a00117 	ldw	r2,-32764(gp)
 c000914:	1009883a 	mov	r4,r2
 c000918:	e0bfee44 	addi	r2,fp,-71
 c00091c:	00c01084 	movi	r3,66
 c000920:	180d883a 	mov	r6,r3
 c000924:	100b883a 	mov	r5,r2
 c000928:	c0009900 	call	c000990 <memcpy>
	printf( "%s \n\r", completed);
 c00092c:	e0bfee44 	addi	r2,fp,-71
 c000930:	100b883a 	mov	r5,r2
 c000934:	01030074 	movhi	r4,3073
 c000938:	21006404 	addi	r4,r4,400
 c00093c:	c000b080 	call	c000b08 <printf>

	usleep (1000000);
 c000940:	010003f4 	movhi	r4,15
 c000944:	21109004 	addi	r4,r4,16960
 c000948:	c00e02c0 	call	c00e02c <usleep>

}
 c00094c:	0001883a 	nop
 c000950:	e6ffff04 	addi	sp,fp,-4
 c000954:	dfc00217 	ldw	ra,8(sp)
 c000958:	df000117 	ldw	fp,4(sp)
 c00095c:	dc000017 	ldw	r16,0(sp)
 c000960:	dec00304 	addi	sp,sp,12
 c000964:	f800283a 	ret

0c000968 <__mulsi3>:
 c000968:	0005883a 	mov	r2,zero
 c00096c:	20000726 	beq	r4,zero,c00098c <__mulsi3+0x24>
 c000970:	20c0004c 	andi	r3,r4,1
 c000974:	2008d07a 	srli	r4,r4,1
 c000978:	18000126 	beq	r3,zero,c000980 <__mulsi3+0x18>
 c00097c:	1145883a 	add	r2,r2,r5
 c000980:	294b883a 	add	r5,r5,r5
 c000984:	203ffa1e 	bne	r4,zero,c000970 <__alt_data_end+0xfc000970>
 c000988:	f800283a 	ret
 c00098c:	f800283a 	ret

0c000990 <memcpy>:
 c000990:	defffd04 	addi	sp,sp,-12
 c000994:	dfc00215 	stw	ra,8(sp)
 c000998:	dc400115 	stw	r17,4(sp)
 c00099c:	dc000015 	stw	r16,0(sp)
 c0009a0:	00c003c4 	movi	r3,15
 c0009a4:	2005883a 	mov	r2,r4
 c0009a8:	1980452e 	bgeu	r3,r6,c000ac0 <memcpy+0x130>
 c0009ac:	2906b03a 	or	r3,r5,r4
 c0009b0:	18c000cc 	andi	r3,r3,3
 c0009b4:	1800441e 	bne	r3,zero,c000ac8 <memcpy+0x138>
 c0009b8:	347ffc04 	addi	r17,r6,-16
 c0009bc:	8822d13a 	srli	r17,r17,4
 c0009c0:	28c00104 	addi	r3,r5,4
 c0009c4:	23400104 	addi	r13,r4,4
 c0009c8:	8820913a 	slli	r16,r17,4
 c0009cc:	2b000204 	addi	r12,r5,8
 c0009d0:	22c00204 	addi	r11,r4,8
 c0009d4:	84000504 	addi	r16,r16,20
 c0009d8:	2a800304 	addi	r10,r5,12
 c0009dc:	22400304 	addi	r9,r4,12
 c0009e0:	2c21883a 	add	r16,r5,r16
 c0009e4:	2811883a 	mov	r8,r5
 c0009e8:	200f883a 	mov	r7,r4
 c0009ec:	41000017 	ldw	r4,0(r8)
 c0009f0:	1fc00017 	ldw	ra,0(r3)
 c0009f4:	63c00017 	ldw	r15,0(r12)
 c0009f8:	39000015 	stw	r4,0(r7)
 c0009fc:	53800017 	ldw	r14,0(r10)
 c000a00:	6fc00015 	stw	ra,0(r13)
 c000a04:	5bc00015 	stw	r15,0(r11)
 c000a08:	4b800015 	stw	r14,0(r9)
 c000a0c:	18c00404 	addi	r3,r3,16
 c000a10:	39c00404 	addi	r7,r7,16
 c000a14:	42000404 	addi	r8,r8,16
 c000a18:	6b400404 	addi	r13,r13,16
 c000a1c:	63000404 	addi	r12,r12,16
 c000a20:	5ac00404 	addi	r11,r11,16
 c000a24:	52800404 	addi	r10,r10,16
 c000a28:	4a400404 	addi	r9,r9,16
 c000a2c:	1c3fef1e 	bne	r3,r16,c0009ec <__alt_data_end+0xfc0009ec>
 c000a30:	89c00044 	addi	r7,r17,1
 c000a34:	380e913a 	slli	r7,r7,4
 c000a38:	310003cc 	andi	r4,r6,15
 c000a3c:	02c000c4 	movi	r11,3
 c000a40:	11c7883a 	add	r3,r2,r7
 c000a44:	29cb883a 	add	r5,r5,r7
 c000a48:	5900212e 	bgeu	r11,r4,c000ad0 <memcpy+0x140>
 c000a4c:	1813883a 	mov	r9,r3
 c000a50:	2811883a 	mov	r8,r5
 c000a54:	200f883a 	mov	r7,r4
 c000a58:	42800017 	ldw	r10,0(r8)
 c000a5c:	4a400104 	addi	r9,r9,4
 c000a60:	39ffff04 	addi	r7,r7,-4
 c000a64:	4abfff15 	stw	r10,-4(r9)
 c000a68:	42000104 	addi	r8,r8,4
 c000a6c:	59fffa36 	bltu	r11,r7,c000a58 <__alt_data_end+0xfc000a58>
 c000a70:	213fff04 	addi	r4,r4,-4
 c000a74:	2008d0ba 	srli	r4,r4,2
 c000a78:	318000cc 	andi	r6,r6,3
 c000a7c:	21000044 	addi	r4,r4,1
 c000a80:	2109883a 	add	r4,r4,r4
 c000a84:	2109883a 	add	r4,r4,r4
 c000a88:	1907883a 	add	r3,r3,r4
 c000a8c:	290b883a 	add	r5,r5,r4
 c000a90:	30000626 	beq	r6,zero,c000aac <memcpy+0x11c>
 c000a94:	198d883a 	add	r6,r3,r6
 c000a98:	29c00003 	ldbu	r7,0(r5)
 c000a9c:	18c00044 	addi	r3,r3,1
 c000aa0:	29400044 	addi	r5,r5,1
 c000aa4:	19ffffc5 	stb	r7,-1(r3)
 c000aa8:	19bffb1e 	bne	r3,r6,c000a98 <__alt_data_end+0xfc000a98>
 c000aac:	dfc00217 	ldw	ra,8(sp)
 c000ab0:	dc400117 	ldw	r17,4(sp)
 c000ab4:	dc000017 	ldw	r16,0(sp)
 c000ab8:	dec00304 	addi	sp,sp,12
 c000abc:	f800283a 	ret
 c000ac0:	2007883a 	mov	r3,r4
 c000ac4:	003ff206 	br	c000a90 <__alt_data_end+0xfc000a90>
 c000ac8:	2007883a 	mov	r3,r4
 c000acc:	003ff106 	br	c000a94 <__alt_data_end+0xfc000a94>
 c000ad0:	200d883a 	mov	r6,r4
 c000ad4:	003fee06 	br	c000a90 <__alt_data_end+0xfc000a90>

0c000ad8 <_printf_r>:
 c000ad8:	defffd04 	addi	sp,sp,-12
 c000adc:	2805883a 	mov	r2,r5
 c000ae0:	dfc00015 	stw	ra,0(sp)
 c000ae4:	d9800115 	stw	r6,4(sp)
 c000ae8:	d9c00215 	stw	r7,8(sp)
 c000aec:	21400217 	ldw	r5,8(r4)
 c000af0:	d9c00104 	addi	r7,sp,4
 c000af4:	100d883a 	mov	r6,r2
 c000af8:	c000b440 	call	c000b44 <___vfprintf_internal_r>
 c000afc:	dfc00017 	ldw	ra,0(sp)
 c000b00:	dec00304 	addi	sp,sp,12
 c000b04:	f800283a 	ret

0c000b08 <printf>:
 c000b08:	defffc04 	addi	sp,sp,-16
 c000b0c:	dfc00015 	stw	ra,0(sp)
 c000b10:	d9400115 	stw	r5,4(sp)
 c000b14:	d9800215 	stw	r6,8(sp)
 c000b18:	d9c00315 	stw	r7,12(sp)
 c000b1c:	00830074 	movhi	r2,3073
 c000b20:	1087f404 	addi	r2,r2,8144
 c000b24:	10800017 	ldw	r2,0(r2)
 c000b28:	200b883a 	mov	r5,r4
 c000b2c:	d9800104 	addi	r6,sp,4
 c000b30:	11000217 	ldw	r4,8(r2)
 c000b34:	c002e200 	call	c002e20 <__vfprintf_internal>
 c000b38:	dfc00017 	ldw	ra,0(sp)
 c000b3c:	dec00404 	addi	sp,sp,16
 c000b40:	f800283a 	ret

0c000b44 <___vfprintf_internal_r>:
 c000b44:	deffb804 	addi	sp,sp,-288
 c000b48:	dfc04715 	stw	ra,284(sp)
 c000b4c:	ddc04515 	stw	r23,276(sp)
 c000b50:	dd404315 	stw	r21,268(sp)
 c000b54:	d9002d15 	stw	r4,180(sp)
 c000b58:	282f883a 	mov	r23,r5
 c000b5c:	302b883a 	mov	r21,r6
 c000b60:	d9c02e15 	stw	r7,184(sp)
 c000b64:	df004615 	stw	fp,280(sp)
 c000b68:	dd804415 	stw	r22,272(sp)
 c000b6c:	dd004215 	stw	r20,264(sp)
 c000b70:	dcc04115 	stw	r19,260(sp)
 c000b74:	dc804015 	stw	r18,256(sp)
 c000b78:	dc403f15 	stw	r17,252(sp)
 c000b7c:	dc003e15 	stw	r16,248(sp)
 c000b80:	c0055bc0 	call	c0055bc <_localeconv_r>
 c000b84:	10800017 	ldw	r2,0(r2)
 c000b88:	1009883a 	mov	r4,r2
 c000b8c:	d8803415 	stw	r2,208(sp)
 c000b90:	c0075580 	call	c007558 <strlen>
 c000b94:	d8803715 	stw	r2,220(sp)
 c000b98:	d8802d17 	ldw	r2,180(sp)
 c000b9c:	10000226 	beq	r2,zero,c000ba8 <___vfprintf_internal_r+0x64>
 c000ba0:	10800e17 	ldw	r2,56(r2)
 c000ba4:	1000fb26 	beq	r2,zero,c000f94 <___vfprintf_internal_r+0x450>
 c000ba8:	b880030b 	ldhu	r2,12(r23)
 c000bac:	10c8000c 	andi	r3,r2,8192
 c000bb0:	1800061e 	bne	r3,zero,c000bcc <___vfprintf_internal_r+0x88>
 c000bb4:	b9001917 	ldw	r4,100(r23)
 c000bb8:	00f7ffc4 	movi	r3,-8193
 c000bbc:	10880014 	ori	r2,r2,8192
 c000bc0:	20c6703a 	and	r3,r4,r3
 c000bc4:	b880030d 	sth	r2,12(r23)
 c000bc8:	b8c01915 	stw	r3,100(r23)
 c000bcc:	10c0020c 	andi	r3,r2,8
 c000bd0:	1800c326 	beq	r3,zero,c000ee0 <___vfprintf_internal_r+0x39c>
 c000bd4:	b8c00417 	ldw	r3,16(r23)
 c000bd8:	1800c126 	beq	r3,zero,c000ee0 <___vfprintf_internal_r+0x39c>
 c000bdc:	1080068c 	andi	r2,r2,26
 c000be0:	00c00284 	movi	r3,10
 c000be4:	10c0c626 	beq	r2,r3,c000f00 <___vfprintf_internal_r+0x3bc>
 c000be8:	d8c00404 	addi	r3,sp,16
 c000bec:	05030074 	movhi	r20,3073
 c000bf0:	d9001e04 	addi	r4,sp,120
 c000bf4:	a5009784 	addi	r20,r20,606
 c000bf8:	d8c01e15 	stw	r3,120(sp)
 c000bfc:	d8002015 	stw	zero,128(sp)
 c000c00:	d8001f15 	stw	zero,124(sp)
 c000c04:	d8003315 	stw	zero,204(sp)
 c000c08:	d8003615 	stw	zero,216(sp)
 c000c0c:	d8003815 	stw	zero,224(sp)
 c000c10:	1811883a 	mov	r8,r3
 c000c14:	d8003915 	stw	zero,228(sp)
 c000c18:	d8003a15 	stw	zero,232(sp)
 c000c1c:	d8002f15 	stw	zero,188(sp)
 c000c20:	d9002815 	stw	r4,160(sp)
 c000c24:	a8800007 	ldb	r2,0(r21)
 c000c28:	10028b26 	beq	r2,zero,c001658 <___vfprintf_internal_r+0xb14>
 c000c2c:	00c00944 	movi	r3,37
 c000c30:	a823883a 	mov	r17,r21
 c000c34:	10c0021e 	bne	r2,r3,c000c40 <___vfprintf_internal_r+0xfc>
 c000c38:	00001406 	br	c000c8c <___vfprintf_internal_r+0x148>
 c000c3c:	10c00326 	beq	r2,r3,c000c4c <___vfprintf_internal_r+0x108>
 c000c40:	8c400044 	addi	r17,r17,1
 c000c44:	88800007 	ldb	r2,0(r17)
 c000c48:	103ffc1e 	bne	r2,zero,c000c3c <__alt_data_end+0xfc000c3c>
 c000c4c:	8d61c83a 	sub	r16,r17,r21
 c000c50:	80000e26 	beq	r16,zero,c000c8c <___vfprintf_internal_r+0x148>
 c000c54:	d8c02017 	ldw	r3,128(sp)
 c000c58:	d8801f17 	ldw	r2,124(sp)
 c000c5c:	45400015 	stw	r21,0(r8)
 c000c60:	1c07883a 	add	r3,r3,r16
 c000c64:	10800044 	addi	r2,r2,1
 c000c68:	d8c02015 	stw	r3,128(sp)
 c000c6c:	44000115 	stw	r16,4(r8)
 c000c70:	d8801f15 	stw	r2,124(sp)
 c000c74:	00c001c4 	movi	r3,7
 c000c78:	1880a916 	blt	r3,r2,c000f20 <___vfprintf_internal_r+0x3dc>
 c000c7c:	42000204 	addi	r8,r8,8
 c000c80:	d9402f17 	ldw	r5,188(sp)
 c000c84:	2c0b883a 	add	r5,r5,r16
 c000c88:	d9402f15 	stw	r5,188(sp)
 c000c8c:	88800007 	ldb	r2,0(r17)
 c000c90:	1000aa26 	beq	r2,zero,c000f3c <___vfprintf_internal_r+0x3f8>
 c000c94:	8d400044 	addi	r21,r17,1
 c000c98:	8c400047 	ldb	r17,1(r17)
 c000c9c:	0021883a 	mov	r16,zero
 c000ca0:	00bfffc4 	movi	r2,-1
 c000ca4:	0025883a 	mov	r18,zero
 c000ca8:	dc002905 	stb	r16,164(sp)
 c000cac:	d8002785 	stb	zero,158(sp)
 c000cb0:	d8002b05 	stb	zero,172(sp)
 c000cb4:	d8802a15 	stw	r2,168(sp)
 c000cb8:	d8003115 	stw	zero,196(sp)
 c000cbc:	04c01604 	movi	r19,88
 c000cc0:	05800244 	movi	r22,9
 c000cc4:	9021883a 	mov	r16,r18
 c000cc8:	4039883a 	mov	fp,r8
 c000ccc:	ad400044 	addi	r21,r21,1
 c000cd0:	88bff804 	addi	r2,r17,-32
 c000cd4:	98833236 	bltu	r19,r2,c0019a0 <___vfprintf_internal_r+0xe5c>
 c000cd8:	100490ba 	slli	r2,r2,2
 c000cdc:	00c30034 	movhi	r3,3072
 c000ce0:	18c33c04 	addi	r3,r3,3312
 c000ce4:	10c5883a 	add	r2,r2,r3
 c000ce8:	10800017 	ldw	r2,0(r2)
 c000cec:	1000683a 	jmp	r2
 c000cf0:	0c001898 	cmpnei	r16,at,98
 c000cf4:	0c0019a0 	cmpeqi	r16,at,102
 c000cf8:	0c0019a0 	cmpeqi	r16,at,102
 c000cfc:	0c0018b8 	rdprs	r16,at,98
 c000d00:	0c0019a0 	cmpeqi	r16,at,102
 c000d04:	0c0019a0 	cmpeqi	r16,at,102
 c000d08:	0c0019a0 	cmpeqi	r16,at,102
 c000d0c:	0c0019a0 	cmpeqi	r16,at,102
 c000d10:	0c0019a0 	cmpeqi	r16,at,102
 c000d14:	0c0019a0 	cmpeqi	r16,at,102
 c000d18:	0c000fa0 	cmpeqi	r16,at,62
 c000d1c:	0c0017a8 	cmpgeui	r16,at,94
 c000d20:	0c0019a0 	cmpeqi	r16,at,102
 c000d24:	0c000e64 	muli	r16,at,57
 c000d28:	0c000fc4 	addi	r16,at,63
 c000d2c:	0c0019a0 	cmpeqi	r16,at,102
 c000d30:	0c001014 	ori	r16,at,64
 c000d34:	0c001020 	cmpeqi	r16,at,64
 c000d38:	0c001020 	cmpeqi	r16,at,64
 c000d3c:	0c001020 	cmpeqi	r16,at,64
 c000d40:	0c001020 	cmpeqi	r16,at,64
 c000d44:	0c001020 	cmpeqi	r16,at,64
 c000d48:	0c001020 	cmpeqi	r16,at,64
 c000d4c:	0c001020 	cmpeqi	r16,at,64
 c000d50:	0c001020 	cmpeqi	r16,at,64
 c000d54:	0c001020 	cmpeqi	r16,at,64
 c000d58:	0c0019a0 	cmpeqi	r16,at,102
 c000d5c:	0c0019a0 	cmpeqi	r16,at,102
 c000d60:	0c0019a0 	cmpeqi	r16,at,102
 c000d64:	0c0019a0 	cmpeqi	r16,at,102
 c000d68:	0c0019a0 	cmpeqi	r16,at,102
 c000d6c:	0c0019a0 	cmpeqi	r16,at,102
 c000d70:	0c0019a0 	cmpeqi	r16,at,102
 c000d74:	0c0019a0 	cmpeqi	r16,at,102
 c000d78:	0c0019a0 	cmpeqi	r16,at,102
 c000d7c:	0c0019a0 	cmpeqi	r16,at,102
 c000d80:	0c00105c 	xori	r16,at,65
 c000d84:	0c001124 	muli	r16,at,68
 c000d88:	0c0019a0 	cmpeqi	r16,at,102
 c000d8c:	0c001124 	muli	r16,at,68
 c000d90:	0c0019a0 	cmpeqi	r16,at,102
 c000d94:	0c0019a0 	cmpeqi	r16,at,102
 c000d98:	0c0019a0 	cmpeqi	r16,at,102
 c000d9c:	0c0019a0 	cmpeqi	r16,at,102
 c000da0:	0c0011d0 	cmplti	r16,at,71
 c000da4:	0c0019a0 	cmpeqi	r16,at,102
 c000da8:	0c0019a0 	cmpeqi	r16,at,102
 c000dac:	0c0011dc 	xori	r16,at,71
 c000db0:	0c0019a0 	cmpeqi	r16,at,102
 c000db4:	0c0019a0 	cmpeqi	r16,at,102
 c000db8:	0c0019a0 	cmpeqi	r16,at,102
 c000dbc:	0c0019a0 	cmpeqi	r16,at,102
 c000dc0:	0c0019a0 	cmpeqi	r16,at,102
 c000dc4:	0c001660 	cmpeqi	r16,at,89
 c000dc8:	0c0019a0 	cmpeqi	r16,at,102
 c000dcc:	0c0019a0 	cmpeqi	r16,at,102
 c000dd0:	0c0016cc 	andi	r16,at,91
 c000dd4:	0c0019a0 	cmpeqi	r16,at,102
 c000dd8:	0c0019a0 	cmpeqi	r16,at,102
 c000ddc:	0c0019a0 	cmpeqi	r16,at,102
 c000de0:	0c0019a0 	cmpeqi	r16,at,102
 c000de4:	0c0019a0 	cmpeqi	r16,at,102
 c000de8:	0c0019a0 	cmpeqi	r16,at,102
 c000dec:	0c0019a0 	cmpeqi	r16,at,102
 c000df0:	0c0019a0 	cmpeqi	r16,at,102
 c000df4:	0c0019a0 	cmpeqi	r16,at,102
 c000df8:	0c0019a0 	cmpeqi	r16,at,102
 c000dfc:	0c001944 	addi	r16,at,101
 c000e00:	0c0018c4 	addi	r16,at,99
 c000e04:	0c001124 	muli	r16,at,68
 c000e08:	0c001124 	muli	r16,at,68
 c000e0c:	0c001124 	muli	r16,at,68
 c000e10:	0c0018e4 	muli	r16,at,99
 c000e14:	0c0018c4 	addi	r16,at,99
 c000e18:	0c0019a0 	cmpeqi	r16,at,102
 c000e1c:	0c0019a0 	cmpeqi	r16,at,102
 c000e20:	0c0018f0 	cmpltui	r16,at,99
 c000e24:	0c0019a0 	cmpeqi	r16,at,102
 c000e28:	0c001904 	addi	r16,at,100
 c000e2c:	0c001788 	cmpgei	r16,at,94
 c000e30:	0c000e70 	cmpltui	r16,at,57
 c000e34:	0c0017c0 	call	c0017c <__alt_mem_onchip_memory2_0+0xc0017c>
 c000e38:	0c0019a0 	cmpeqi	r16,at,102
 c000e3c:	0c0017cc 	andi	r16,at,95
 c000e40:	0c0019a0 	cmpeqi	r16,at,102
 c000e44:	0c001830 	cmpltui	r16,at,96
 c000e48:	0c0019a0 	cmpeqi	r16,at,102
 c000e4c:	0c0019a0 	cmpeqi	r16,at,102
 c000e50:	0c001850 	cmplti	r16,at,97
 c000e54:	d8c03117 	ldw	r3,196(sp)
 c000e58:	d8802e15 	stw	r2,184(sp)
 c000e5c:	00c7c83a 	sub	r3,zero,r3
 c000e60:	d8c03115 	stw	r3,196(sp)
 c000e64:	84000114 	ori	r16,r16,4
 c000e68:	ac400007 	ldb	r17,0(r21)
 c000e6c:	003f9706 	br	c000ccc <__alt_data_end+0xfc000ccc>
 c000e70:	00800c04 	movi	r2,48
 c000e74:	d8802705 	stb	r2,156(sp)
 c000e78:	00801e04 	movi	r2,120
 c000e7c:	d8802745 	stb	r2,157(sp)
 c000e80:	d9002a17 	ldw	r4,168(sp)
 c000e84:	d8802e17 	ldw	r2,184(sp)
 c000e88:	d8002785 	stb	zero,158(sp)
 c000e8c:	e011883a 	mov	r8,fp
 c000e90:	10c00104 	addi	r3,r2,4
 c000e94:	14c00017 	ldw	r19,0(r2)
 c000e98:	002d883a 	mov	r22,zero
 c000e9c:	80800094 	ori	r2,r16,2
 c000ea0:	2002ca16 	blt	r4,zero,c0019cc <___vfprintf_internal_r+0xe88>
 c000ea4:	00bfdfc4 	movi	r2,-129
 c000ea8:	80a4703a 	and	r18,r16,r2
 c000eac:	d8c02e15 	stw	r3,184(sp)
 c000eb0:	94800094 	ori	r18,r18,2
 c000eb4:	9802b41e 	bne	r19,zero,c001988 <___vfprintf_internal_r+0xe44>
 c000eb8:	01430074 	movhi	r5,3073
 c000ebc:	29409004 	addi	r5,r5,576
 c000ec0:	d9403915 	stw	r5,228(sp)
 c000ec4:	04401e04 	movi	r17,120
 c000ec8:	d8802a17 	ldw	r2,168(sp)
 c000ecc:	0039883a 	mov	fp,zero
 c000ed0:	1001fa26 	beq	r2,zero,c0016bc <___vfprintf_internal_r+0xb78>
 c000ed4:	0027883a 	mov	r19,zero
 c000ed8:	002d883a 	mov	r22,zero
 c000edc:	00021906 	br	c001744 <___vfprintf_internal_r+0xc00>
 c000ee0:	d9002d17 	ldw	r4,180(sp)
 c000ee4:	b80b883a 	mov	r5,r23
 c000ee8:	c002ef80 	call	c002ef8 <__swsetup_r>
 c000eec:	1005dc1e 	bne	r2,zero,c002660 <___vfprintf_internal_r+0x1b1c>
 c000ef0:	b880030b 	ldhu	r2,12(r23)
 c000ef4:	00c00284 	movi	r3,10
 c000ef8:	1080068c 	andi	r2,r2,26
 c000efc:	10ff3a1e 	bne	r2,r3,c000be8 <__alt_data_end+0xfc000be8>
 c000f00:	b880038f 	ldh	r2,14(r23)
 c000f04:	103f3816 	blt	r2,zero,c000be8 <__alt_data_end+0xfc000be8>
 c000f08:	d9c02e17 	ldw	r7,184(sp)
 c000f0c:	d9002d17 	ldw	r4,180(sp)
 c000f10:	a80d883a 	mov	r6,r21
 c000f14:	b80b883a 	mov	r5,r23
 c000f18:	c002e3c0 	call	c002e3c <__sbprintf>
 c000f1c:	00001106 	br	c000f64 <___vfprintf_internal_r+0x420>
 c000f20:	d9002d17 	ldw	r4,180(sp)
 c000f24:	d9801e04 	addi	r6,sp,120
 c000f28:	b80b883a 	mov	r5,r23
 c000f2c:	c0076ec0 	call	c0076ec <__sprint_r>
 c000f30:	1000081e 	bne	r2,zero,c000f54 <___vfprintf_internal_r+0x410>
 c000f34:	da000404 	addi	r8,sp,16
 c000f38:	003f5106 	br	c000c80 <__alt_data_end+0xfc000c80>
 c000f3c:	d8802017 	ldw	r2,128(sp)
 c000f40:	10000426 	beq	r2,zero,c000f54 <___vfprintf_internal_r+0x410>
 c000f44:	d9002d17 	ldw	r4,180(sp)
 c000f48:	d9801e04 	addi	r6,sp,120
 c000f4c:	b80b883a 	mov	r5,r23
 c000f50:	c0076ec0 	call	c0076ec <__sprint_r>
 c000f54:	b880030b 	ldhu	r2,12(r23)
 c000f58:	1080100c 	andi	r2,r2,64
 c000f5c:	1005c01e 	bne	r2,zero,c002660 <___vfprintf_internal_r+0x1b1c>
 c000f60:	d8802f17 	ldw	r2,188(sp)
 c000f64:	dfc04717 	ldw	ra,284(sp)
 c000f68:	df004617 	ldw	fp,280(sp)
 c000f6c:	ddc04517 	ldw	r23,276(sp)
 c000f70:	dd804417 	ldw	r22,272(sp)
 c000f74:	dd404317 	ldw	r21,268(sp)
 c000f78:	dd004217 	ldw	r20,264(sp)
 c000f7c:	dcc04117 	ldw	r19,260(sp)
 c000f80:	dc804017 	ldw	r18,256(sp)
 c000f84:	dc403f17 	ldw	r17,252(sp)
 c000f88:	dc003e17 	ldw	r16,248(sp)
 c000f8c:	dec04804 	addi	sp,sp,288
 c000f90:	f800283a 	ret
 c000f94:	d9002d17 	ldw	r4,180(sp)
 c000f98:	c004f040 	call	c004f04 <__sinit>
 c000f9c:	003f0206 	br	c000ba8 <__alt_data_end+0xfc000ba8>
 c000fa0:	d9002e17 	ldw	r4,184(sp)
 c000fa4:	d9402e17 	ldw	r5,184(sp)
 c000fa8:	21000017 	ldw	r4,0(r4)
 c000fac:	28800104 	addi	r2,r5,4
 c000fb0:	d9003115 	stw	r4,196(sp)
 c000fb4:	203fa716 	blt	r4,zero,c000e54 <__alt_data_end+0xfc000e54>
 c000fb8:	d8802e15 	stw	r2,184(sp)
 c000fbc:	ac400007 	ldb	r17,0(r21)
 c000fc0:	003f4206 	br	c000ccc <__alt_data_end+0xfc000ccc>
 c000fc4:	ac400007 	ldb	r17,0(r21)
 c000fc8:	01000a84 	movi	r4,42
 c000fcc:	a8c00044 	addi	r3,r21,1
 c000fd0:	89075826 	beq	r17,r4,c002d34 <___vfprintf_internal_r+0x21f0>
 c000fd4:	8cbff404 	addi	r18,r17,-48
 c000fd8:	b486ae36 	bltu	r22,r18,c002a94 <___vfprintf_internal_r+0x1f50>
 c000fdc:	0009883a 	mov	r4,zero
 c000fe0:	1823883a 	mov	r17,r3
 c000fe4:	01400284 	movi	r5,10
 c000fe8:	c0009680 	call	c000968 <__mulsi3>
 c000fec:	88c00007 	ldb	r3,0(r17)
 c000ff0:	1489883a 	add	r4,r2,r18
 c000ff4:	8d400044 	addi	r21,r17,1
 c000ff8:	1cbff404 	addi	r18,r3,-48
 c000ffc:	a823883a 	mov	r17,r21
 c001000:	b4bff82e 	bgeu	r22,r18,c000fe4 <__alt_data_end+0xfc000fe4>
 c001004:	1823883a 	mov	r17,r3
 c001008:	2005f616 	blt	r4,zero,c0027e4 <___vfprintf_internal_r+0x1ca0>
 c00100c:	d9002a15 	stw	r4,168(sp)
 c001010:	003f2f06 	br	c000cd0 <__alt_data_end+0xfc000cd0>
 c001014:	84002014 	ori	r16,r16,128
 c001018:	ac400007 	ldb	r17,0(r21)
 c00101c:	003f2b06 	br	c000ccc <__alt_data_end+0xfc000ccc>
 c001020:	8cbff404 	addi	r18,r17,-48
 c001024:	d8003115 	stw	zero,196(sp)
 c001028:	0009883a 	mov	r4,zero
 c00102c:	a823883a 	mov	r17,r21
 c001030:	01400284 	movi	r5,10
 c001034:	c0009680 	call	c000968 <__mulsi3>
 c001038:	88c00007 	ldb	r3,0(r17)
 c00103c:	9089883a 	add	r4,r18,r2
 c001040:	ad400044 	addi	r21,r21,1
 c001044:	1cbff404 	addi	r18,r3,-48
 c001048:	a823883a 	mov	r17,r21
 c00104c:	b4bff82e 	bgeu	r22,r18,c001030 <__alt_data_end+0xfc001030>
 c001050:	1823883a 	mov	r17,r3
 c001054:	d9003115 	stw	r4,196(sp)
 c001058:	003f1d06 	br	c000cd0 <__alt_data_end+0xfc000cd0>
 c00105c:	8025883a 	mov	r18,r16
 c001060:	dc002903 	ldbu	r16,164(sp)
 c001064:	e011883a 	mov	r8,fp
 c001068:	84003fcc 	andi	r16,r16,255
 c00106c:	8007531e 	bne	r16,zero,c002dbc <___vfprintf_internal_r+0x2278>
 c001070:	94800414 	ori	r18,r18,16
 c001074:	9080080c 	andi	r2,r18,32
 c001078:	1003a326 	beq	r2,zero,c001f08 <___vfprintf_internal_r+0x13c4>
 c00107c:	d9002e17 	ldw	r4,184(sp)
 c001080:	20800117 	ldw	r2,4(r4)
 c001084:	24c00017 	ldw	r19,0(r4)
 c001088:	21000204 	addi	r4,r4,8
 c00108c:	d9002e15 	stw	r4,184(sp)
 c001090:	102d883a 	mov	r22,r2
 c001094:	10047316 	blt	r2,zero,c002264 <___vfprintf_internal_r+0x1720>
 c001098:	d9002a17 	ldw	r4,168(sp)
 c00109c:	df002783 	ldbu	fp,158(sp)
 c0010a0:	2003e416 	blt	r4,zero,c002034 <___vfprintf_internal_r+0x14f0>
 c0010a4:	00ffdfc4 	movi	r3,-129
 c0010a8:	9d84b03a 	or	r2,r19,r22
 c0010ac:	90e4703a 	and	r18,r18,r3
 c0010b0:	10018026 	beq	r2,zero,c0016b4 <___vfprintf_internal_r+0xb70>
 c0010b4:	b003ab26 	beq	r22,zero,c001f64 <___vfprintf_internal_r+0x1420>
 c0010b8:	dc402915 	stw	r17,164(sp)
 c0010bc:	dc001e04 	addi	r16,sp,120
 c0010c0:	b023883a 	mov	r17,r22
 c0010c4:	402d883a 	mov	r22,r8
 c0010c8:	9809883a 	mov	r4,r19
 c0010cc:	880b883a 	mov	r5,r17
 c0010d0:	01800284 	movi	r6,10
 c0010d4:	000f883a 	mov	r7,zero
 c0010d8:	c00a7b80 	call	c00a7b8 <__umoddi3>
 c0010dc:	10800c04 	addi	r2,r2,48
 c0010e0:	843fffc4 	addi	r16,r16,-1
 c0010e4:	9809883a 	mov	r4,r19
 c0010e8:	880b883a 	mov	r5,r17
 c0010ec:	80800005 	stb	r2,0(r16)
 c0010f0:	01800284 	movi	r6,10
 c0010f4:	000f883a 	mov	r7,zero
 c0010f8:	c00a1bc0 	call	c00a1bc <__udivdi3>
 c0010fc:	1027883a 	mov	r19,r2
 c001100:	10c4b03a 	or	r2,r2,r3
 c001104:	1823883a 	mov	r17,r3
 c001108:	103fef1e 	bne	r2,zero,c0010c8 <__alt_data_end+0xfc0010c8>
 c00110c:	d8c02817 	ldw	r3,160(sp)
 c001110:	dc402917 	ldw	r17,164(sp)
 c001114:	b011883a 	mov	r8,r22
 c001118:	1c07c83a 	sub	r3,r3,r16
 c00111c:	d8c02b15 	stw	r3,172(sp)
 c001120:	00005f06 	br	c0012a0 <___vfprintf_internal_r+0x75c>
 c001124:	8025883a 	mov	r18,r16
 c001128:	dc002903 	ldbu	r16,164(sp)
 c00112c:	e011883a 	mov	r8,fp
 c001130:	84003fcc 	andi	r16,r16,255
 c001134:	80071e1e 	bne	r16,zero,c002db0 <___vfprintf_internal_r+0x226c>
 c001138:	9080020c 	andi	r2,r18,8
 c00113c:	1004af26 	beq	r2,zero,c0023fc <___vfprintf_internal_r+0x18b8>
 c001140:	d9002e17 	ldw	r4,184(sp)
 c001144:	d9402e17 	ldw	r5,184(sp)
 c001148:	d8802e17 	ldw	r2,184(sp)
 c00114c:	21000017 	ldw	r4,0(r4)
 c001150:	29400117 	ldw	r5,4(r5)
 c001154:	10800204 	addi	r2,r2,8
 c001158:	d9003615 	stw	r4,216(sp)
 c00115c:	d9403815 	stw	r5,224(sp)
 c001160:	d8802e15 	stw	r2,184(sp)
 c001164:	d9003617 	ldw	r4,216(sp)
 c001168:	d9403817 	ldw	r5,224(sp)
 c00116c:	da003d15 	stw	r8,244(sp)
 c001170:	04000044 	movi	r16,1
 c001174:	c0072780 	call	c007278 <__fpclassifyd>
 c001178:	da003d17 	ldw	r8,244(sp)
 c00117c:	1404441e 	bne	r2,r16,c002290 <___vfprintf_internal_r+0x174c>
 c001180:	d9003617 	ldw	r4,216(sp)
 c001184:	d9403817 	ldw	r5,224(sp)
 c001188:	000d883a 	mov	r6,zero
 c00118c:	000f883a 	mov	r7,zero
 c001190:	c00c3100 	call	c00c310 <__ledf2>
 c001194:	da003d17 	ldw	r8,244(sp)
 c001198:	1005e316 	blt	r2,zero,c002928 <___vfprintf_internal_r+0x1de4>
 c00119c:	df002783 	ldbu	fp,158(sp)
 c0011a0:	008011c4 	movi	r2,71
 c0011a4:	1445580e 	bge	r2,r17,c002708 <___vfprintf_internal_r+0x1bc4>
 c0011a8:	04030074 	movhi	r16,3073
 c0011ac:	84008804 	addi	r16,r16,544
 c0011b0:	00c000c4 	movi	r3,3
 c0011b4:	00bfdfc4 	movi	r2,-129
 c0011b8:	d8c02915 	stw	r3,164(sp)
 c0011bc:	90a4703a 	and	r18,r18,r2
 c0011c0:	d8c02b15 	stw	r3,172(sp)
 c0011c4:	d8002a15 	stw	zero,168(sp)
 c0011c8:	d8003215 	stw	zero,200(sp)
 c0011cc:	00003a06 	br	c0012b8 <___vfprintf_internal_r+0x774>
 c0011d0:	84000214 	ori	r16,r16,8
 c0011d4:	ac400007 	ldb	r17,0(r21)
 c0011d8:	003ebc06 	br	c000ccc <__alt_data_end+0xfc000ccc>
 c0011dc:	8025883a 	mov	r18,r16
 c0011e0:	dc002903 	ldbu	r16,164(sp)
 c0011e4:	e011883a 	mov	r8,fp
 c0011e8:	84003fcc 	andi	r16,r16,255
 c0011ec:	8007001e 	bne	r16,zero,c002df0 <___vfprintf_internal_r+0x22ac>
 c0011f0:	94800414 	ori	r18,r18,16
 c0011f4:	9080080c 	andi	r2,r18,32
 c0011f8:	1002fa26 	beq	r2,zero,c001de4 <___vfprintf_internal_r+0x12a0>
 c0011fc:	d9002e17 	ldw	r4,184(sp)
 c001200:	d9402a17 	ldw	r5,168(sp)
 c001204:	d8002785 	stb	zero,158(sp)
 c001208:	20800204 	addi	r2,r4,8
 c00120c:	24c00017 	ldw	r19,0(r4)
 c001210:	25800117 	ldw	r22,4(r4)
 c001214:	2804b116 	blt	r5,zero,c0024dc <___vfprintf_internal_r+0x1998>
 c001218:	013fdfc4 	movi	r4,-129
 c00121c:	9d86b03a 	or	r3,r19,r22
 c001220:	d8802e15 	stw	r2,184(sp)
 c001224:	9124703a 	and	r18,r18,r4
 c001228:	1802fb1e 	bne	r3,zero,c001e18 <___vfprintf_internal_r+0x12d4>
 c00122c:	d8c02a17 	ldw	r3,168(sp)
 c001230:	0039883a 	mov	fp,zero
 c001234:	1805e526 	beq	r3,zero,c0029cc <___vfprintf_internal_r+0x1e88>
 c001238:	0027883a 	mov	r19,zero
 c00123c:	002d883a 	mov	r22,zero
 c001240:	dc001e04 	addi	r16,sp,120
 c001244:	9806d0fa 	srli	r3,r19,3
 c001248:	b008977a 	slli	r4,r22,29
 c00124c:	b02cd0fa 	srli	r22,r22,3
 c001250:	9cc001cc 	andi	r19,r19,7
 c001254:	98800c04 	addi	r2,r19,48
 c001258:	843fffc4 	addi	r16,r16,-1
 c00125c:	20e6b03a 	or	r19,r4,r3
 c001260:	80800005 	stb	r2,0(r16)
 c001264:	9d86b03a 	or	r3,r19,r22
 c001268:	183ff61e 	bne	r3,zero,c001244 <__alt_data_end+0xfc001244>
 c00126c:	90c0004c 	andi	r3,r18,1
 c001270:	18014126 	beq	r3,zero,c001778 <___vfprintf_internal_r+0xc34>
 c001274:	10803fcc 	andi	r2,r2,255
 c001278:	1080201c 	xori	r2,r2,128
 c00127c:	10bfe004 	addi	r2,r2,-128
 c001280:	00c00c04 	movi	r3,48
 c001284:	10c13c26 	beq	r2,r3,c001778 <___vfprintf_internal_r+0xc34>
 c001288:	80ffffc5 	stb	r3,-1(r16)
 c00128c:	d8c02817 	ldw	r3,160(sp)
 c001290:	80bfffc4 	addi	r2,r16,-1
 c001294:	1021883a 	mov	r16,r2
 c001298:	1887c83a 	sub	r3,r3,r2
 c00129c:	d8c02b15 	stw	r3,172(sp)
 c0012a0:	d8802b17 	ldw	r2,172(sp)
 c0012a4:	d9002a17 	ldw	r4,168(sp)
 c0012a8:	1100010e 	bge	r2,r4,c0012b0 <___vfprintf_internal_r+0x76c>
 c0012ac:	2005883a 	mov	r2,r4
 c0012b0:	d8802915 	stw	r2,164(sp)
 c0012b4:	d8003215 	stw	zero,200(sp)
 c0012b8:	e7003fcc 	andi	fp,fp,255
 c0012bc:	e700201c 	xori	fp,fp,128
 c0012c0:	e73fe004 	addi	fp,fp,-128
 c0012c4:	e0000326 	beq	fp,zero,c0012d4 <___vfprintf_internal_r+0x790>
 c0012c8:	d8c02917 	ldw	r3,164(sp)
 c0012cc:	18c00044 	addi	r3,r3,1
 c0012d0:	d8c02915 	stw	r3,164(sp)
 c0012d4:	90c0008c 	andi	r3,r18,2
 c0012d8:	d8c02c15 	stw	r3,176(sp)
 c0012dc:	18000326 	beq	r3,zero,c0012ec <___vfprintf_internal_r+0x7a8>
 c0012e0:	d8c02917 	ldw	r3,164(sp)
 c0012e4:	18c00084 	addi	r3,r3,2
 c0012e8:	d8c02915 	stw	r3,164(sp)
 c0012ec:	90c0210c 	andi	r3,r18,132
 c0012f0:	d8c03015 	stw	r3,192(sp)
 c0012f4:	1801c51e 	bne	r3,zero,c001a0c <___vfprintf_internal_r+0xec8>
 c0012f8:	d9003117 	ldw	r4,196(sp)
 c0012fc:	d8c02917 	ldw	r3,164(sp)
 c001300:	20e7c83a 	sub	r19,r4,r3
 c001304:	04c1c10e 	bge	zero,r19,c001a0c <___vfprintf_internal_r+0xec8>
 c001308:	02400404 	movi	r9,16
 c00130c:	d8c02017 	ldw	r3,128(sp)
 c001310:	d8801f17 	ldw	r2,124(sp)
 c001314:	4cc52f0e 	bge	r9,r19,c0027d4 <___vfprintf_internal_r+0x1c90>
 c001318:	01430074 	movhi	r5,3073
 c00131c:	29409b84 	addi	r5,r5,622
 c001320:	dc403b15 	stw	r17,236(sp)
 c001324:	d9403515 	stw	r5,212(sp)
 c001328:	9823883a 	mov	r17,r19
 c00132c:	482d883a 	mov	r22,r9
 c001330:	9027883a 	mov	r19,r18
 c001334:	070001c4 	movi	fp,7
 c001338:	8025883a 	mov	r18,r16
 c00133c:	dc002d17 	ldw	r16,180(sp)
 c001340:	00000306 	br	c001350 <___vfprintf_internal_r+0x80c>
 c001344:	8c7ffc04 	addi	r17,r17,-16
 c001348:	42000204 	addi	r8,r8,8
 c00134c:	b440130e 	bge	r22,r17,c00139c <___vfprintf_internal_r+0x858>
 c001350:	01030074 	movhi	r4,3073
 c001354:	18c00404 	addi	r3,r3,16
 c001358:	10800044 	addi	r2,r2,1
 c00135c:	21009b84 	addi	r4,r4,622
 c001360:	41000015 	stw	r4,0(r8)
 c001364:	45800115 	stw	r22,4(r8)
 c001368:	d8c02015 	stw	r3,128(sp)
 c00136c:	d8801f15 	stw	r2,124(sp)
 c001370:	e0bff40e 	bge	fp,r2,c001344 <__alt_data_end+0xfc001344>
 c001374:	d9801e04 	addi	r6,sp,120
 c001378:	b80b883a 	mov	r5,r23
 c00137c:	8009883a 	mov	r4,r16
 c001380:	c0076ec0 	call	c0076ec <__sprint_r>
 c001384:	103ef31e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c001388:	8c7ffc04 	addi	r17,r17,-16
 c00138c:	d8c02017 	ldw	r3,128(sp)
 c001390:	d8801f17 	ldw	r2,124(sp)
 c001394:	da000404 	addi	r8,sp,16
 c001398:	b47fed16 	blt	r22,r17,c001350 <__alt_data_end+0xfc001350>
 c00139c:	9021883a 	mov	r16,r18
 c0013a0:	9825883a 	mov	r18,r19
 c0013a4:	8827883a 	mov	r19,r17
 c0013a8:	dc403b17 	ldw	r17,236(sp)
 c0013ac:	d9403517 	ldw	r5,212(sp)
 c0013b0:	98c7883a 	add	r3,r19,r3
 c0013b4:	10800044 	addi	r2,r2,1
 c0013b8:	41400015 	stw	r5,0(r8)
 c0013bc:	44c00115 	stw	r19,4(r8)
 c0013c0:	d8c02015 	stw	r3,128(sp)
 c0013c4:	d8801f15 	stw	r2,124(sp)
 c0013c8:	010001c4 	movi	r4,7
 c0013cc:	2082c516 	blt	r4,r2,c001ee4 <___vfprintf_internal_r+0x13a0>
 c0013d0:	df002787 	ldb	fp,158(sp)
 c0013d4:	42000204 	addi	r8,r8,8
 c0013d8:	e0000c26 	beq	fp,zero,c00140c <___vfprintf_internal_r+0x8c8>
 c0013dc:	d8801f17 	ldw	r2,124(sp)
 c0013e0:	d9002784 	addi	r4,sp,158
 c0013e4:	18c00044 	addi	r3,r3,1
 c0013e8:	10800044 	addi	r2,r2,1
 c0013ec:	41000015 	stw	r4,0(r8)
 c0013f0:	01000044 	movi	r4,1
 c0013f4:	41000115 	stw	r4,4(r8)
 c0013f8:	d8c02015 	stw	r3,128(sp)
 c0013fc:	d8801f15 	stw	r2,124(sp)
 c001400:	010001c4 	movi	r4,7
 c001404:	20825e16 	blt	r4,r2,c001d80 <___vfprintf_internal_r+0x123c>
 c001408:	42000204 	addi	r8,r8,8
 c00140c:	d8802c17 	ldw	r2,176(sp)
 c001410:	10000c26 	beq	r2,zero,c001444 <___vfprintf_internal_r+0x900>
 c001414:	d8801f17 	ldw	r2,124(sp)
 c001418:	d9002704 	addi	r4,sp,156
 c00141c:	18c00084 	addi	r3,r3,2
 c001420:	10800044 	addi	r2,r2,1
 c001424:	41000015 	stw	r4,0(r8)
 c001428:	01000084 	movi	r4,2
 c00142c:	41000115 	stw	r4,4(r8)
 c001430:	d8c02015 	stw	r3,128(sp)
 c001434:	d8801f15 	stw	r2,124(sp)
 c001438:	010001c4 	movi	r4,7
 c00143c:	20825816 	blt	r4,r2,c001da0 <___vfprintf_internal_r+0x125c>
 c001440:	42000204 	addi	r8,r8,8
 c001444:	d9003017 	ldw	r4,192(sp)
 c001448:	00802004 	movi	r2,128
 c00144c:	2081bb26 	beq	r4,r2,c001b3c <___vfprintf_internal_r+0xff8>
 c001450:	d9402a17 	ldw	r5,168(sp)
 c001454:	d8802b17 	ldw	r2,172(sp)
 c001458:	28adc83a 	sub	r22,r5,r2
 c00145c:	0580310e 	bge	zero,r22,c001524 <___vfprintf_internal_r+0x9e0>
 c001460:	07000404 	movi	fp,16
 c001464:	d8801f17 	ldw	r2,124(sp)
 c001468:	e584360e 	bge	fp,r22,c002544 <___vfprintf_internal_r+0x1a00>
 c00146c:	01430074 	movhi	r5,3073
 c001470:	29409784 	addi	r5,r5,606
 c001474:	dc402a15 	stw	r17,168(sp)
 c001478:	d9402c15 	stw	r5,176(sp)
 c00147c:	b023883a 	mov	r17,r22
 c001480:	04c001c4 	movi	r19,7
 c001484:	a82d883a 	mov	r22,r21
 c001488:	902b883a 	mov	r21,r18
 c00148c:	8025883a 	mov	r18,r16
 c001490:	dc002d17 	ldw	r16,180(sp)
 c001494:	00000306 	br	c0014a4 <___vfprintf_internal_r+0x960>
 c001498:	8c7ffc04 	addi	r17,r17,-16
 c00149c:	42000204 	addi	r8,r8,8
 c0014a0:	e440110e 	bge	fp,r17,c0014e8 <___vfprintf_internal_r+0x9a4>
 c0014a4:	18c00404 	addi	r3,r3,16
 c0014a8:	10800044 	addi	r2,r2,1
 c0014ac:	45000015 	stw	r20,0(r8)
 c0014b0:	47000115 	stw	fp,4(r8)
 c0014b4:	d8c02015 	stw	r3,128(sp)
 c0014b8:	d8801f15 	stw	r2,124(sp)
 c0014bc:	98bff60e 	bge	r19,r2,c001498 <__alt_data_end+0xfc001498>
 c0014c0:	d9801e04 	addi	r6,sp,120
 c0014c4:	b80b883a 	mov	r5,r23
 c0014c8:	8009883a 	mov	r4,r16
 c0014cc:	c0076ec0 	call	c0076ec <__sprint_r>
 c0014d0:	103ea01e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c0014d4:	8c7ffc04 	addi	r17,r17,-16
 c0014d8:	d8c02017 	ldw	r3,128(sp)
 c0014dc:	d8801f17 	ldw	r2,124(sp)
 c0014e0:	da000404 	addi	r8,sp,16
 c0014e4:	e47fef16 	blt	fp,r17,c0014a4 <__alt_data_end+0xfc0014a4>
 c0014e8:	9021883a 	mov	r16,r18
 c0014ec:	a825883a 	mov	r18,r21
 c0014f0:	b02b883a 	mov	r21,r22
 c0014f4:	882d883a 	mov	r22,r17
 c0014f8:	dc402a17 	ldw	r17,168(sp)
 c0014fc:	d9002c17 	ldw	r4,176(sp)
 c001500:	1d87883a 	add	r3,r3,r22
 c001504:	10800044 	addi	r2,r2,1
 c001508:	41000015 	stw	r4,0(r8)
 c00150c:	45800115 	stw	r22,4(r8)
 c001510:	d8c02015 	stw	r3,128(sp)
 c001514:	d8801f15 	stw	r2,124(sp)
 c001518:	010001c4 	movi	r4,7
 c00151c:	20821016 	blt	r4,r2,c001d60 <___vfprintf_internal_r+0x121c>
 c001520:	42000204 	addi	r8,r8,8
 c001524:	9080400c 	andi	r2,r18,256
 c001528:	10013a1e 	bne	r2,zero,c001a14 <___vfprintf_internal_r+0xed0>
 c00152c:	d9402b17 	ldw	r5,172(sp)
 c001530:	d8801f17 	ldw	r2,124(sp)
 c001534:	44000015 	stw	r16,0(r8)
 c001538:	1947883a 	add	r3,r3,r5
 c00153c:	10800044 	addi	r2,r2,1
 c001540:	41400115 	stw	r5,4(r8)
 c001544:	d8c02015 	stw	r3,128(sp)
 c001548:	d8801f15 	stw	r2,124(sp)
 c00154c:	010001c4 	movi	r4,7
 c001550:	2081f516 	blt	r4,r2,c001d28 <___vfprintf_internal_r+0x11e4>
 c001554:	42000204 	addi	r8,r8,8
 c001558:	9480010c 	andi	r18,r18,4
 c00155c:	90003226 	beq	r18,zero,c001628 <___vfprintf_internal_r+0xae4>
 c001560:	d9403117 	ldw	r5,196(sp)
 c001564:	d8802917 	ldw	r2,164(sp)
 c001568:	28a1c83a 	sub	r16,r5,r2
 c00156c:	04002e0e 	bge	zero,r16,c001628 <___vfprintf_internal_r+0xae4>
 c001570:	04400404 	movi	r17,16
 c001574:	d8801f17 	ldw	r2,124(sp)
 c001578:	8c04c40e 	bge	r17,r16,c00288c <___vfprintf_internal_r+0x1d48>
 c00157c:	01430074 	movhi	r5,3073
 c001580:	29409b84 	addi	r5,r5,622
 c001584:	d9403515 	stw	r5,212(sp)
 c001588:	048001c4 	movi	r18,7
 c00158c:	dcc02d17 	ldw	r19,180(sp)
 c001590:	00000306 	br	c0015a0 <___vfprintf_internal_r+0xa5c>
 c001594:	843ffc04 	addi	r16,r16,-16
 c001598:	42000204 	addi	r8,r8,8
 c00159c:	8c00130e 	bge	r17,r16,c0015ec <___vfprintf_internal_r+0xaa8>
 c0015a0:	01030074 	movhi	r4,3073
 c0015a4:	18c00404 	addi	r3,r3,16
 c0015a8:	10800044 	addi	r2,r2,1
 c0015ac:	21009b84 	addi	r4,r4,622
 c0015b0:	41000015 	stw	r4,0(r8)
 c0015b4:	44400115 	stw	r17,4(r8)
 c0015b8:	d8c02015 	stw	r3,128(sp)
 c0015bc:	d8801f15 	stw	r2,124(sp)
 c0015c0:	90bff40e 	bge	r18,r2,c001594 <__alt_data_end+0xfc001594>
 c0015c4:	d9801e04 	addi	r6,sp,120
 c0015c8:	b80b883a 	mov	r5,r23
 c0015cc:	9809883a 	mov	r4,r19
 c0015d0:	c0076ec0 	call	c0076ec <__sprint_r>
 c0015d4:	103e5f1e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c0015d8:	843ffc04 	addi	r16,r16,-16
 c0015dc:	d8c02017 	ldw	r3,128(sp)
 c0015e0:	d8801f17 	ldw	r2,124(sp)
 c0015e4:	da000404 	addi	r8,sp,16
 c0015e8:	8c3fed16 	blt	r17,r16,c0015a0 <__alt_data_end+0xfc0015a0>
 c0015ec:	d9403517 	ldw	r5,212(sp)
 c0015f0:	1c07883a 	add	r3,r3,r16
 c0015f4:	10800044 	addi	r2,r2,1
 c0015f8:	41400015 	stw	r5,0(r8)
 c0015fc:	44000115 	stw	r16,4(r8)
 c001600:	d8c02015 	stw	r3,128(sp)
 c001604:	d8801f15 	stw	r2,124(sp)
 c001608:	010001c4 	movi	r4,7
 c00160c:	2080060e 	bge	r4,r2,c001628 <___vfprintf_internal_r+0xae4>
 c001610:	d9002d17 	ldw	r4,180(sp)
 c001614:	d9801e04 	addi	r6,sp,120
 c001618:	b80b883a 	mov	r5,r23
 c00161c:	c0076ec0 	call	c0076ec <__sprint_r>
 c001620:	103e4c1e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c001624:	d8c02017 	ldw	r3,128(sp)
 c001628:	d8803117 	ldw	r2,196(sp)
 c00162c:	d9002917 	ldw	r4,164(sp)
 c001630:	1100010e 	bge	r2,r4,c001638 <___vfprintf_internal_r+0xaf4>
 c001634:	2005883a 	mov	r2,r4
 c001638:	d9402f17 	ldw	r5,188(sp)
 c00163c:	288b883a 	add	r5,r5,r2
 c001640:	d9402f15 	stw	r5,188(sp)
 c001644:	1801c01e 	bne	r3,zero,c001d48 <___vfprintf_internal_r+0x1204>
 c001648:	a8800007 	ldb	r2,0(r21)
 c00164c:	d8001f15 	stw	zero,124(sp)
 c001650:	da000404 	addi	r8,sp,16
 c001654:	103d751e 	bne	r2,zero,c000c2c <__alt_data_end+0xfc000c2c>
 c001658:	a823883a 	mov	r17,r21
 c00165c:	003d8b06 	br	c000c8c <__alt_data_end+0xfc000c8c>
 c001660:	8025883a 	mov	r18,r16
 c001664:	dc002903 	ldbu	r16,164(sp)
 c001668:	e011883a 	mov	r8,fp
 c00166c:	84003fcc 	andi	r16,r16,255
 c001670:	8005e51e 	bne	r16,zero,c002e08 <___vfprintf_internal_r+0x22c4>
 c001674:	94800414 	ori	r18,r18,16
 c001678:	9080080c 	andi	r2,r18,32
 c00167c:	10022b26 	beq	r2,zero,c001f2c <___vfprintf_internal_r+0x13e8>
 c001680:	d9002e17 	ldw	r4,184(sp)
 c001684:	d9402a17 	ldw	r5,168(sp)
 c001688:	d8002785 	stb	zero,158(sp)
 c00168c:	20c00204 	addi	r3,r4,8
 c001690:	24c00017 	ldw	r19,0(r4)
 c001694:	25800117 	ldw	r22,4(r4)
 c001698:	28042e16 	blt	r5,zero,c002754 <___vfprintf_internal_r+0x1c10>
 c00169c:	013fdfc4 	movi	r4,-129
 c0016a0:	9d84b03a 	or	r2,r19,r22
 c0016a4:	d8c02e15 	stw	r3,184(sp)
 c0016a8:	9124703a 	and	r18,r18,r4
 c0016ac:	0039883a 	mov	fp,zero
 c0016b0:	103e801e 	bne	r2,zero,c0010b4 <__alt_data_end+0xfc0010b4>
 c0016b4:	d9002a17 	ldw	r4,168(sp)
 c0016b8:	2002e01e 	bne	r4,zero,c00223c <___vfprintf_internal_r+0x16f8>
 c0016bc:	d8002a15 	stw	zero,168(sp)
 c0016c0:	d8002b15 	stw	zero,172(sp)
 c0016c4:	dc001e04 	addi	r16,sp,120
 c0016c8:	003ef506 	br	c0012a0 <__alt_data_end+0xfc0012a0>
 c0016cc:	8025883a 	mov	r18,r16
 c0016d0:	dc002903 	ldbu	r16,164(sp)
 c0016d4:	e011883a 	mov	r8,fp
 c0016d8:	84003fcc 	andi	r16,r16,255
 c0016dc:	8005ba1e 	bne	r16,zero,c002dc8 <___vfprintf_internal_r+0x2284>
 c0016e0:	01030074 	movhi	r4,3073
 c0016e4:	21008b04 	addi	r4,r4,556
 c0016e8:	d9003915 	stw	r4,228(sp)
 c0016ec:	9080080c 	andi	r2,r18,32
 c0016f0:	10006126 	beq	r2,zero,c001878 <___vfprintf_internal_r+0xd34>
 c0016f4:	d9402e17 	ldw	r5,184(sp)
 c0016f8:	2cc00017 	ldw	r19,0(r5)
 c0016fc:	2d800117 	ldw	r22,4(r5)
 c001700:	29400204 	addi	r5,r5,8
 c001704:	d9402e15 	stw	r5,184(sp)
 c001708:	9080004c 	andi	r2,r18,1
 c00170c:	1001ac26 	beq	r2,zero,c001dc0 <___vfprintf_internal_r+0x127c>
 c001710:	9d84b03a 	or	r2,r19,r22
 c001714:	10038526 	beq	r2,zero,c00252c <___vfprintf_internal_r+0x19e8>
 c001718:	d8c02a17 	ldw	r3,168(sp)
 c00171c:	00800c04 	movi	r2,48
 c001720:	d8802705 	stb	r2,156(sp)
 c001724:	dc402745 	stb	r17,157(sp)
 c001728:	d8002785 	stb	zero,158(sp)
 c00172c:	90800094 	ori	r2,r18,2
 c001730:	18047916 	blt	r3,zero,c002918 <___vfprintf_internal_r+0x1dd4>
 c001734:	00bfdfc4 	movi	r2,-129
 c001738:	90a4703a 	and	r18,r18,r2
 c00173c:	94800094 	ori	r18,r18,2
 c001740:	0039883a 	mov	fp,zero
 c001744:	d9003917 	ldw	r4,228(sp)
 c001748:	dc001e04 	addi	r16,sp,120
 c00174c:	988003cc 	andi	r2,r19,15
 c001750:	b006973a 	slli	r3,r22,28
 c001754:	2085883a 	add	r2,r4,r2
 c001758:	9826d13a 	srli	r19,r19,4
 c00175c:	10800003 	ldbu	r2,0(r2)
 c001760:	b02cd13a 	srli	r22,r22,4
 c001764:	843fffc4 	addi	r16,r16,-1
 c001768:	1ce6b03a 	or	r19,r3,r19
 c00176c:	80800005 	stb	r2,0(r16)
 c001770:	9d84b03a 	or	r2,r19,r22
 c001774:	103ff51e 	bne	r2,zero,c00174c <__alt_data_end+0xfc00174c>
 c001778:	d8c02817 	ldw	r3,160(sp)
 c00177c:	1c07c83a 	sub	r3,r3,r16
 c001780:	d8c02b15 	stw	r3,172(sp)
 c001784:	003ec606 	br	c0012a0 <__alt_data_end+0xfc0012a0>
 c001788:	8025883a 	mov	r18,r16
 c00178c:	dc002903 	ldbu	r16,164(sp)
 c001790:	e011883a 	mov	r8,fp
 c001794:	84003fcc 	andi	r16,r16,255
 c001798:	803e9626 	beq	r16,zero,c0011f4 <__alt_data_end+0xfc0011f4>
 c00179c:	d8c02b03 	ldbu	r3,172(sp)
 c0017a0:	d8c02785 	stb	r3,158(sp)
 c0017a4:	003e9306 	br	c0011f4 <__alt_data_end+0xfc0011f4>
 c0017a8:	00c00044 	movi	r3,1
 c0017ac:	d8c02905 	stb	r3,164(sp)
 c0017b0:	00c00ac4 	movi	r3,43
 c0017b4:	d8c02b05 	stb	r3,172(sp)
 c0017b8:	ac400007 	ldb	r17,0(r21)
 c0017bc:	003d4306 	br	c000ccc <__alt_data_end+0xfc000ccc>
 c0017c0:	84000814 	ori	r16,r16,32
 c0017c4:	ac400007 	ldb	r17,0(r21)
 c0017c8:	003d4006 	br	c000ccc <__alt_data_end+0xfc000ccc>
 c0017cc:	d8802e17 	ldw	r2,184(sp)
 c0017d0:	8025883a 	mov	r18,r16
 c0017d4:	d8002785 	stb	zero,158(sp)
 c0017d8:	14000017 	ldw	r16,0(r2)
 c0017dc:	e011883a 	mov	r8,fp
 c0017e0:	14c00104 	addi	r19,r2,4
 c0017e4:	80042d26 	beq	r16,zero,c00289c <___vfprintf_internal_r+0x1d58>
 c0017e8:	d8c02a17 	ldw	r3,168(sp)
 c0017ec:	1803e416 	blt	r3,zero,c002780 <___vfprintf_internal_r+0x1c3c>
 c0017f0:	180d883a 	mov	r6,r3
 c0017f4:	000b883a 	mov	r5,zero
 c0017f8:	8009883a 	mov	r4,r16
 c0017fc:	df003d15 	stw	fp,244(sp)
 c001800:	c005fb40 	call	c005fb4 <memchr>
 c001804:	da003d17 	ldw	r8,244(sp)
 c001808:	10046826 	beq	r2,zero,c0029ac <___vfprintf_internal_r+0x1e68>
 c00180c:	1405c83a 	sub	r2,r2,r16
 c001810:	d8802b15 	stw	r2,172(sp)
 c001814:	1003e016 	blt	r2,zero,c002798 <___vfprintf_internal_r+0x1c54>
 c001818:	df002783 	ldbu	fp,158(sp)
 c00181c:	d8802915 	stw	r2,164(sp)
 c001820:	dcc02e15 	stw	r19,184(sp)
 c001824:	d8002a15 	stw	zero,168(sp)
 c001828:	d8003215 	stw	zero,200(sp)
 c00182c:	003ea206 	br	c0012b8 <__alt_data_end+0xfc0012b8>
 c001830:	8025883a 	mov	r18,r16
 c001834:	dc002903 	ldbu	r16,164(sp)
 c001838:	e011883a 	mov	r8,fp
 c00183c:	84003fcc 	andi	r16,r16,255
 c001840:	803f8d26 	beq	r16,zero,c001678 <__alt_data_end+0xfc001678>
 c001844:	d8c02b03 	ldbu	r3,172(sp)
 c001848:	d8c02785 	stb	r3,158(sp)
 c00184c:	003f8a06 	br	c001678 <__alt_data_end+0xfc001678>
 c001850:	8025883a 	mov	r18,r16
 c001854:	dc002903 	ldbu	r16,164(sp)
 c001858:	e011883a 	mov	r8,fp
 c00185c:	84003fcc 	andi	r16,r16,255
 c001860:	8005661e 	bne	r16,zero,c002dfc <___vfprintf_internal_r+0x22b8>
 c001864:	01030074 	movhi	r4,3073
 c001868:	21009004 	addi	r4,r4,576
 c00186c:	d9003915 	stw	r4,228(sp)
 c001870:	9080080c 	andi	r2,r18,32
 c001874:	103f9f1e 	bne	r2,zero,c0016f4 <__alt_data_end+0xfc0016f4>
 c001878:	9080040c 	andi	r2,r18,16
 c00187c:	1002eb26 	beq	r2,zero,c00242c <___vfprintf_internal_r+0x18e8>
 c001880:	d8802e17 	ldw	r2,184(sp)
 c001884:	002d883a 	mov	r22,zero
 c001888:	14c00017 	ldw	r19,0(r2)
 c00188c:	10800104 	addi	r2,r2,4
 c001890:	d8802e15 	stw	r2,184(sp)
 c001894:	003f9c06 	br	c001708 <__alt_data_end+0xfc001708>
 c001898:	d8802b07 	ldb	r2,172(sp)
 c00189c:	1002e11e 	bne	r2,zero,c002424 <___vfprintf_internal_r+0x18e0>
 c0018a0:	00c00044 	movi	r3,1
 c0018a4:	d8c02905 	stb	r3,164(sp)
 c0018a8:	00c00804 	movi	r3,32
 c0018ac:	d8c02b05 	stb	r3,172(sp)
 c0018b0:	ac400007 	ldb	r17,0(r21)
 c0018b4:	003d0506 	br	c000ccc <__alt_data_end+0xfc000ccc>
 c0018b8:	84000054 	ori	r16,r16,1
 c0018bc:	ac400007 	ldb	r17,0(r21)
 c0018c0:	003d0206 	br	c000ccc <__alt_data_end+0xfc000ccc>
 c0018c4:	8025883a 	mov	r18,r16
 c0018c8:	dc002903 	ldbu	r16,164(sp)
 c0018cc:	e011883a 	mov	r8,fp
 c0018d0:	84003fcc 	andi	r16,r16,255
 c0018d4:	803de726 	beq	r16,zero,c001074 <__alt_data_end+0xfc001074>
 c0018d8:	d8c02b03 	ldbu	r3,172(sp)
 c0018dc:	d8c02785 	stb	r3,158(sp)
 c0018e0:	003de406 	br	c001074 <__alt_data_end+0xfc001074>
 c0018e4:	84001014 	ori	r16,r16,64
 c0018e8:	ac400007 	ldb	r17,0(r21)
 c0018ec:	003cf706 	br	c000ccc <__alt_data_end+0xfc000ccc>
 c0018f0:	ac400007 	ldb	r17,0(r21)
 c0018f4:	00801b04 	movi	r2,108
 c0018f8:	88838f26 	beq	r17,r2,c002738 <___vfprintf_internal_r+0x1bf4>
 c0018fc:	84000414 	ori	r16,r16,16
 c001900:	003cf206 	br	c000ccc <__alt_data_end+0xfc000ccc>
 c001904:	8025883a 	mov	r18,r16
 c001908:	dc002903 	ldbu	r16,164(sp)
 c00190c:	e011883a 	mov	r8,fp
 c001910:	84003fcc 	andi	r16,r16,255
 c001914:	80053f1e 	bne	r16,zero,c002e14 <___vfprintf_internal_r+0x22d0>
 c001918:	9080080c 	andi	r2,r18,32
 c00191c:	1002d226 	beq	r2,zero,c002468 <___vfprintf_internal_r+0x1924>
 c001920:	d9002e17 	ldw	r4,184(sp)
 c001924:	d9402f17 	ldw	r5,188(sp)
 c001928:	20800017 	ldw	r2,0(r4)
 c00192c:	2807d7fa 	srai	r3,r5,31
 c001930:	21000104 	addi	r4,r4,4
 c001934:	d9002e15 	stw	r4,184(sp)
 c001938:	11400015 	stw	r5,0(r2)
 c00193c:	10c00115 	stw	r3,4(r2)
 c001940:	003cb806 	br	c000c24 <__alt_data_end+0xfc000c24>
 c001944:	d8c02e17 	ldw	r3,184(sp)
 c001948:	d9002e17 	ldw	r4,184(sp)
 c00194c:	8025883a 	mov	r18,r16
 c001950:	18800017 	ldw	r2,0(r3)
 c001954:	21000104 	addi	r4,r4,4
 c001958:	00c00044 	movi	r3,1
 c00195c:	e011883a 	mov	r8,fp
 c001960:	d8c02915 	stw	r3,164(sp)
 c001964:	d8002785 	stb	zero,158(sp)
 c001968:	d8801405 	stb	r2,80(sp)
 c00196c:	d9002e15 	stw	r4,184(sp)
 c001970:	d8c02b15 	stw	r3,172(sp)
 c001974:	d8002a15 	stw	zero,168(sp)
 c001978:	d8003215 	stw	zero,200(sp)
 c00197c:	dc001404 	addi	r16,sp,80
 c001980:	0039883a 	mov	fp,zero
 c001984:	003e5306 	br	c0012d4 <__alt_data_end+0xfc0012d4>
 c001988:	01030074 	movhi	r4,3073
 c00198c:	21009004 	addi	r4,r4,576
 c001990:	0039883a 	mov	fp,zero
 c001994:	d9003915 	stw	r4,228(sp)
 c001998:	04401e04 	movi	r17,120
 c00199c:	003f6906 	br	c001744 <__alt_data_end+0xfc001744>
 c0019a0:	8025883a 	mov	r18,r16
 c0019a4:	dc002903 	ldbu	r16,164(sp)
 c0019a8:	e011883a 	mov	r8,fp
 c0019ac:	84003fcc 	andi	r16,r16,255
 c0019b0:	8005081e 	bne	r16,zero,c002dd4 <___vfprintf_internal_r+0x2290>
 c0019b4:	883d6126 	beq	r17,zero,c000f3c <__alt_data_end+0xfc000f3c>
 c0019b8:	00c00044 	movi	r3,1
 c0019bc:	d8c02915 	stw	r3,164(sp)
 c0019c0:	dc401405 	stb	r17,80(sp)
 c0019c4:	d8002785 	stb	zero,158(sp)
 c0019c8:	003fe906 	br	c001970 <__alt_data_end+0xfc001970>
 c0019cc:	01430074 	movhi	r5,3073
 c0019d0:	29409004 	addi	r5,r5,576
 c0019d4:	d9403915 	stw	r5,228(sp)
 c0019d8:	d8c02e15 	stw	r3,184(sp)
 c0019dc:	1025883a 	mov	r18,r2
 c0019e0:	04401e04 	movi	r17,120
 c0019e4:	9d84b03a 	or	r2,r19,r22
 c0019e8:	1000fc1e 	bne	r2,zero,c001ddc <___vfprintf_internal_r+0x1298>
 c0019ec:	0039883a 	mov	fp,zero
 c0019f0:	00800084 	movi	r2,2
 c0019f4:	10803fcc 	andi	r2,r2,255
 c0019f8:	00c00044 	movi	r3,1
 c0019fc:	10c20f26 	beq	r2,r3,c00223c <___vfprintf_internal_r+0x16f8>
 c001a00:	00c00084 	movi	r3,2
 c001a04:	10fd3326 	beq	r2,r3,c000ed4 <__alt_data_end+0xfc000ed4>
 c001a08:	003e0b06 	br	c001238 <__alt_data_end+0xfc001238>
 c001a0c:	d8c02017 	ldw	r3,128(sp)
 c001a10:	003e7106 	br	c0013d8 <__alt_data_end+0xfc0013d8>
 c001a14:	00801944 	movi	r2,101
 c001a18:	14407e0e 	bge	r2,r17,c001c14 <___vfprintf_internal_r+0x10d0>
 c001a1c:	d9003617 	ldw	r4,216(sp)
 c001a20:	d9403817 	ldw	r5,224(sp)
 c001a24:	000d883a 	mov	r6,zero
 c001a28:	000f883a 	mov	r7,zero
 c001a2c:	d8c03c15 	stw	r3,240(sp)
 c001a30:	da003d15 	stw	r8,244(sp)
 c001a34:	c00c1ac0 	call	c00c1ac <__eqdf2>
 c001a38:	d8c03c17 	ldw	r3,240(sp)
 c001a3c:	da003d17 	ldw	r8,244(sp)
 c001a40:	1000f71e 	bne	r2,zero,c001e20 <___vfprintf_internal_r+0x12dc>
 c001a44:	d8801f17 	ldw	r2,124(sp)
 c001a48:	01030074 	movhi	r4,3073
 c001a4c:	21009704 	addi	r4,r4,604
 c001a50:	18c00044 	addi	r3,r3,1
 c001a54:	10800044 	addi	r2,r2,1
 c001a58:	41000015 	stw	r4,0(r8)
 c001a5c:	01000044 	movi	r4,1
 c001a60:	41000115 	stw	r4,4(r8)
 c001a64:	d8c02015 	stw	r3,128(sp)
 c001a68:	d8801f15 	stw	r2,124(sp)
 c001a6c:	010001c4 	movi	r4,7
 c001a70:	2082b816 	blt	r4,r2,c002554 <___vfprintf_internal_r+0x1a10>
 c001a74:	42000204 	addi	r8,r8,8
 c001a78:	d8802617 	ldw	r2,152(sp)
 c001a7c:	d9403317 	ldw	r5,204(sp)
 c001a80:	11400216 	blt	r2,r5,c001a8c <___vfprintf_internal_r+0xf48>
 c001a84:	9080004c 	andi	r2,r18,1
 c001a88:	103eb326 	beq	r2,zero,c001558 <__alt_data_end+0xfc001558>
 c001a8c:	d8803717 	ldw	r2,220(sp)
 c001a90:	d9003417 	ldw	r4,208(sp)
 c001a94:	d9403717 	ldw	r5,220(sp)
 c001a98:	1887883a 	add	r3,r3,r2
 c001a9c:	d8801f17 	ldw	r2,124(sp)
 c001aa0:	41000015 	stw	r4,0(r8)
 c001aa4:	41400115 	stw	r5,4(r8)
 c001aa8:	10800044 	addi	r2,r2,1
 c001aac:	d8c02015 	stw	r3,128(sp)
 c001ab0:	d8801f15 	stw	r2,124(sp)
 c001ab4:	010001c4 	movi	r4,7
 c001ab8:	20832916 	blt	r4,r2,c002760 <___vfprintf_internal_r+0x1c1c>
 c001abc:	42000204 	addi	r8,r8,8
 c001ac0:	d8803317 	ldw	r2,204(sp)
 c001ac4:	143fffc4 	addi	r16,r2,-1
 c001ac8:	043ea30e 	bge	zero,r16,c001558 <__alt_data_end+0xfc001558>
 c001acc:	04400404 	movi	r17,16
 c001ad0:	d8801f17 	ldw	r2,124(sp)
 c001ad4:	8c00880e 	bge	r17,r16,c001cf8 <___vfprintf_internal_r+0x11b4>
 c001ad8:	01430074 	movhi	r5,3073
 c001adc:	29409784 	addi	r5,r5,606
 c001ae0:	d9402c15 	stw	r5,176(sp)
 c001ae4:	058001c4 	movi	r22,7
 c001ae8:	dcc02d17 	ldw	r19,180(sp)
 c001aec:	00000306 	br	c001afc <___vfprintf_internal_r+0xfb8>
 c001af0:	42000204 	addi	r8,r8,8
 c001af4:	843ffc04 	addi	r16,r16,-16
 c001af8:	8c00820e 	bge	r17,r16,c001d04 <___vfprintf_internal_r+0x11c0>
 c001afc:	18c00404 	addi	r3,r3,16
 c001b00:	10800044 	addi	r2,r2,1
 c001b04:	45000015 	stw	r20,0(r8)
 c001b08:	44400115 	stw	r17,4(r8)
 c001b0c:	d8c02015 	stw	r3,128(sp)
 c001b10:	d8801f15 	stw	r2,124(sp)
 c001b14:	b0bff60e 	bge	r22,r2,c001af0 <__alt_data_end+0xfc001af0>
 c001b18:	d9801e04 	addi	r6,sp,120
 c001b1c:	b80b883a 	mov	r5,r23
 c001b20:	9809883a 	mov	r4,r19
 c001b24:	c0076ec0 	call	c0076ec <__sprint_r>
 c001b28:	103d0a1e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c001b2c:	d8c02017 	ldw	r3,128(sp)
 c001b30:	d8801f17 	ldw	r2,124(sp)
 c001b34:	da000404 	addi	r8,sp,16
 c001b38:	003fee06 	br	c001af4 <__alt_data_end+0xfc001af4>
 c001b3c:	d9403117 	ldw	r5,196(sp)
 c001b40:	d8802917 	ldw	r2,164(sp)
 c001b44:	28adc83a 	sub	r22,r5,r2
 c001b48:	05be410e 	bge	zero,r22,c001450 <__alt_data_end+0xfc001450>
 c001b4c:	07000404 	movi	fp,16
 c001b50:	d8801f17 	ldw	r2,124(sp)
 c001b54:	e5838f0e 	bge	fp,r22,c002994 <___vfprintf_internal_r+0x1e50>
 c001b58:	01430074 	movhi	r5,3073
 c001b5c:	29409784 	addi	r5,r5,606
 c001b60:	dc403015 	stw	r17,192(sp)
 c001b64:	d9402c15 	stw	r5,176(sp)
 c001b68:	b023883a 	mov	r17,r22
 c001b6c:	04c001c4 	movi	r19,7
 c001b70:	a82d883a 	mov	r22,r21
 c001b74:	902b883a 	mov	r21,r18
 c001b78:	8025883a 	mov	r18,r16
 c001b7c:	dc002d17 	ldw	r16,180(sp)
 c001b80:	00000306 	br	c001b90 <___vfprintf_internal_r+0x104c>
 c001b84:	8c7ffc04 	addi	r17,r17,-16
 c001b88:	42000204 	addi	r8,r8,8
 c001b8c:	e440110e 	bge	fp,r17,c001bd4 <___vfprintf_internal_r+0x1090>
 c001b90:	18c00404 	addi	r3,r3,16
 c001b94:	10800044 	addi	r2,r2,1
 c001b98:	45000015 	stw	r20,0(r8)
 c001b9c:	47000115 	stw	fp,4(r8)
 c001ba0:	d8c02015 	stw	r3,128(sp)
 c001ba4:	d8801f15 	stw	r2,124(sp)
 c001ba8:	98bff60e 	bge	r19,r2,c001b84 <__alt_data_end+0xfc001b84>
 c001bac:	d9801e04 	addi	r6,sp,120
 c001bb0:	b80b883a 	mov	r5,r23
 c001bb4:	8009883a 	mov	r4,r16
 c001bb8:	c0076ec0 	call	c0076ec <__sprint_r>
 c001bbc:	103ce51e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c001bc0:	8c7ffc04 	addi	r17,r17,-16
 c001bc4:	d8c02017 	ldw	r3,128(sp)
 c001bc8:	d8801f17 	ldw	r2,124(sp)
 c001bcc:	da000404 	addi	r8,sp,16
 c001bd0:	e47fef16 	blt	fp,r17,c001b90 <__alt_data_end+0xfc001b90>
 c001bd4:	9021883a 	mov	r16,r18
 c001bd8:	a825883a 	mov	r18,r21
 c001bdc:	b02b883a 	mov	r21,r22
 c001be0:	882d883a 	mov	r22,r17
 c001be4:	dc403017 	ldw	r17,192(sp)
 c001be8:	d9002c17 	ldw	r4,176(sp)
 c001bec:	1d87883a 	add	r3,r3,r22
 c001bf0:	10800044 	addi	r2,r2,1
 c001bf4:	41000015 	stw	r4,0(r8)
 c001bf8:	45800115 	stw	r22,4(r8)
 c001bfc:	d8c02015 	stw	r3,128(sp)
 c001c00:	d8801f15 	stw	r2,124(sp)
 c001c04:	010001c4 	movi	r4,7
 c001c08:	20818e16 	blt	r4,r2,c002244 <___vfprintf_internal_r+0x1700>
 c001c0c:	42000204 	addi	r8,r8,8
 c001c10:	003e0f06 	br	c001450 <__alt_data_end+0xfc001450>
 c001c14:	d9403317 	ldw	r5,204(sp)
 c001c18:	00800044 	movi	r2,1
 c001c1c:	18c00044 	addi	r3,r3,1
 c001c20:	1141530e 	bge	r2,r5,c002170 <___vfprintf_internal_r+0x162c>
 c001c24:	dc401f17 	ldw	r17,124(sp)
 c001c28:	00800044 	movi	r2,1
 c001c2c:	40800115 	stw	r2,4(r8)
 c001c30:	8c400044 	addi	r17,r17,1
 c001c34:	44000015 	stw	r16,0(r8)
 c001c38:	d8c02015 	stw	r3,128(sp)
 c001c3c:	dc401f15 	stw	r17,124(sp)
 c001c40:	008001c4 	movi	r2,7
 c001c44:	14416b16 	blt	r2,r17,c0021f4 <___vfprintf_internal_r+0x16b0>
 c001c48:	42000204 	addi	r8,r8,8
 c001c4c:	d8803717 	ldw	r2,220(sp)
 c001c50:	d9003417 	ldw	r4,208(sp)
 c001c54:	8c400044 	addi	r17,r17,1
 c001c58:	10c7883a 	add	r3,r2,r3
 c001c5c:	40800115 	stw	r2,4(r8)
 c001c60:	41000015 	stw	r4,0(r8)
 c001c64:	d8c02015 	stw	r3,128(sp)
 c001c68:	dc401f15 	stw	r17,124(sp)
 c001c6c:	008001c4 	movi	r2,7
 c001c70:	14416916 	blt	r2,r17,c002218 <___vfprintf_internal_r+0x16d4>
 c001c74:	45800204 	addi	r22,r8,8
 c001c78:	d9003617 	ldw	r4,216(sp)
 c001c7c:	d9403817 	ldw	r5,224(sp)
 c001c80:	000d883a 	mov	r6,zero
 c001c84:	000f883a 	mov	r7,zero
 c001c88:	d8c03c15 	stw	r3,240(sp)
 c001c8c:	c00c1ac0 	call	c00c1ac <__eqdf2>
 c001c90:	d8c03c17 	ldw	r3,240(sp)
 c001c94:	1000bc26 	beq	r2,zero,c001f88 <___vfprintf_internal_r+0x1444>
 c001c98:	d9403317 	ldw	r5,204(sp)
 c001c9c:	84000044 	addi	r16,r16,1
 c001ca0:	8c400044 	addi	r17,r17,1
 c001ca4:	28bfffc4 	addi	r2,r5,-1
 c001ca8:	1887883a 	add	r3,r3,r2
 c001cac:	b0800115 	stw	r2,4(r22)
 c001cb0:	b4000015 	stw	r16,0(r22)
 c001cb4:	d8c02015 	stw	r3,128(sp)
 c001cb8:	dc401f15 	stw	r17,124(sp)
 c001cbc:	008001c4 	movi	r2,7
 c001cc0:	14414316 	blt	r2,r17,c0021d0 <___vfprintf_internal_r+0x168c>
 c001cc4:	b5800204 	addi	r22,r22,8
 c001cc8:	d9003a17 	ldw	r4,232(sp)
 c001ccc:	df0022c4 	addi	fp,sp,139
 c001cd0:	8c400044 	addi	r17,r17,1
 c001cd4:	20c7883a 	add	r3,r4,r3
 c001cd8:	b7000015 	stw	fp,0(r22)
 c001cdc:	b1000115 	stw	r4,4(r22)
 c001ce0:	d8c02015 	stw	r3,128(sp)
 c001ce4:	dc401f15 	stw	r17,124(sp)
 c001ce8:	008001c4 	movi	r2,7
 c001cec:	14400e16 	blt	r2,r17,c001d28 <___vfprintf_internal_r+0x11e4>
 c001cf0:	b2000204 	addi	r8,r22,8
 c001cf4:	003e1806 	br	c001558 <__alt_data_end+0xfc001558>
 c001cf8:	01030074 	movhi	r4,3073
 c001cfc:	21009784 	addi	r4,r4,606
 c001d00:	d9002c15 	stw	r4,176(sp)
 c001d04:	d9002c17 	ldw	r4,176(sp)
 c001d08:	1c07883a 	add	r3,r3,r16
 c001d0c:	44000115 	stw	r16,4(r8)
 c001d10:	41000015 	stw	r4,0(r8)
 c001d14:	10800044 	addi	r2,r2,1
 c001d18:	d8c02015 	stw	r3,128(sp)
 c001d1c:	d8801f15 	stw	r2,124(sp)
 c001d20:	010001c4 	movi	r4,7
 c001d24:	20be0b0e 	bge	r4,r2,c001554 <__alt_data_end+0xfc001554>
 c001d28:	d9002d17 	ldw	r4,180(sp)
 c001d2c:	d9801e04 	addi	r6,sp,120
 c001d30:	b80b883a 	mov	r5,r23
 c001d34:	c0076ec0 	call	c0076ec <__sprint_r>
 c001d38:	103c861e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c001d3c:	d8c02017 	ldw	r3,128(sp)
 c001d40:	da000404 	addi	r8,sp,16
 c001d44:	003e0406 	br	c001558 <__alt_data_end+0xfc001558>
 c001d48:	d9002d17 	ldw	r4,180(sp)
 c001d4c:	d9801e04 	addi	r6,sp,120
 c001d50:	b80b883a 	mov	r5,r23
 c001d54:	c0076ec0 	call	c0076ec <__sprint_r>
 c001d58:	103e3b26 	beq	r2,zero,c001648 <__alt_data_end+0xfc001648>
 c001d5c:	003c7d06 	br	c000f54 <__alt_data_end+0xfc000f54>
 c001d60:	d9002d17 	ldw	r4,180(sp)
 c001d64:	d9801e04 	addi	r6,sp,120
 c001d68:	b80b883a 	mov	r5,r23
 c001d6c:	c0076ec0 	call	c0076ec <__sprint_r>
 c001d70:	103c781e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c001d74:	d8c02017 	ldw	r3,128(sp)
 c001d78:	da000404 	addi	r8,sp,16
 c001d7c:	003de906 	br	c001524 <__alt_data_end+0xfc001524>
 c001d80:	d9002d17 	ldw	r4,180(sp)
 c001d84:	d9801e04 	addi	r6,sp,120
 c001d88:	b80b883a 	mov	r5,r23
 c001d8c:	c0076ec0 	call	c0076ec <__sprint_r>
 c001d90:	103c701e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c001d94:	d8c02017 	ldw	r3,128(sp)
 c001d98:	da000404 	addi	r8,sp,16
 c001d9c:	003d9b06 	br	c00140c <__alt_data_end+0xfc00140c>
 c001da0:	d9002d17 	ldw	r4,180(sp)
 c001da4:	d9801e04 	addi	r6,sp,120
 c001da8:	b80b883a 	mov	r5,r23
 c001dac:	c0076ec0 	call	c0076ec <__sprint_r>
 c001db0:	103c681e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c001db4:	d8c02017 	ldw	r3,128(sp)
 c001db8:	da000404 	addi	r8,sp,16
 c001dbc:	003da106 	br	c001444 <__alt_data_end+0xfc001444>
 c001dc0:	d9402a17 	ldw	r5,168(sp)
 c001dc4:	d8002785 	stb	zero,158(sp)
 c001dc8:	283f0616 	blt	r5,zero,c0019e4 <__alt_data_end+0xfc0019e4>
 c001dcc:	00ffdfc4 	movi	r3,-129
 c001dd0:	9d84b03a 	or	r2,r19,r22
 c001dd4:	90e4703a 	and	r18,r18,r3
 c001dd8:	103c3b26 	beq	r2,zero,c000ec8 <__alt_data_end+0xfc000ec8>
 c001ddc:	0039883a 	mov	fp,zero
 c001de0:	003e5806 	br	c001744 <__alt_data_end+0xfc001744>
 c001de4:	9080040c 	andi	r2,r18,16
 c001de8:	1001b326 	beq	r2,zero,c0024b8 <___vfprintf_internal_r+0x1974>
 c001dec:	d8c02e17 	ldw	r3,184(sp)
 c001df0:	d9002a17 	ldw	r4,168(sp)
 c001df4:	d8002785 	stb	zero,158(sp)
 c001df8:	18800104 	addi	r2,r3,4
 c001dfc:	1cc00017 	ldw	r19,0(r3)
 c001e00:	002d883a 	mov	r22,zero
 c001e04:	2001b516 	blt	r4,zero,c0024dc <___vfprintf_internal_r+0x1998>
 c001e08:	00ffdfc4 	movi	r3,-129
 c001e0c:	d8802e15 	stw	r2,184(sp)
 c001e10:	90e4703a 	and	r18,r18,r3
 c001e14:	983d0526 	beq	r19,zero,c00122c <__alt_data_end+0xfc00122c>
 c001e18:	0039883a 	mov	fp,zero
 c001e1c:	003d0806 	br	c001240 <__alt_data_end+0xfc001240>
 c001e20:	dc402617 	ldw	r17,152(sp)
 c001e24:	0441d30e 	bge	zero,r17,c002574 <___vfprintf_internal_r+0x1a30>
 c001e28:	dc403217 	ldw	r17,200(sp)
 c001e2c:	d8803317 	ldw	r2,204(sp)
 c001e30:	1440010e 	bge	r2,r17,c001e38 <___vfprintf_internal_r+0x12f4>
 c001e34:	1023883a 	mov	r17,r2
 c001e38:	04400a0e 	bge	zero,r17,c001e64 <___vfprintf_internal_r+0x1320>
 c001e3c:	d8801f17 	ldw	r2,124(sp)
 c001e40:	1c47883a 	add	r3,r3,r17
 c001e44:	44000015 	stw	r16,0(r8)
 c001e48:	10800044 	addi	r2,r2,1
 c001e4c:	44400115 	stw	r17,4(r8)
 c001e50:	d8c02015 	stw	r3,128(sp)
 c001e54:	d8801f15 	stw	r2,124(sp)
 c001e58:	010001c4 	movi	r4,7
 c001e5c:	20826516 	blt	r4,r2,c0027f4 <___vfprintf_internal_r+0x1cb0>
 c001e60:	42000204 	addi	r8,r8,8
 c001e64:	88026116 	blt	r17,zero,c0027ec <___vfprintf_internal_r+0x1ca8>
 c001e68:	d9003217 	ldw	r4,200(sp)
 c001e6c:	2463c83a 	sub	r17,r4,r17
 c001e70:	04407b0e 	bge	zero,r17,c002060 <___vfprintf_internal_r+0x151c>
 c001e74:	05800404 	movi	r22,16
 c001e78:	d8801f17 	ldw	r2,124(sp)
 c001e7c:	b4419d0e 	bge	r22,r17,c0024f4 <___vfprintf_internal_r+0x19b0>
 c001e80:	01030074 	movhi	r4,3073
 c001e84:	21009784 	addi	r4,r4,606
 c001e88:	d9002c15 	stw	r4,176(sp)
 c001e8c:	070001c4 	movi	fp,7
 c001e90:	dcc02d17 	ldw	r19,180(sp)
 c001e94:	00000306 	br	c001ea4 <___vfprintf_internal_r+0x1360>
 c001e98:	42000204 	addi	r8,r8,8
 c001e9c:	8c7ffc04 	addi	r17,r17,-16
 c001ea0:	b441970e 	bge	r22,r17,c002500 <___vfprintf_internal_r+0x19bc>
 c001ea4:	18c00404 	addi	r3,r3,16
 c001ea8:	10800044 	addi	r2,r2,1
 c001eac:	45000015 	stw	r20,0(r8)
 c001eb0:	45800115 	stw	r22,4(r8)
 c001eb4:	d8c02015 	stw	r3,128(sp)
 c001eb8:	d8801f15 	stw	r2,124(sp)
 c001ebc:	e0bff60e 	bge	fp,r2,c001e98 <__alt_data_end+0xfc001e98>
 c001ec0:	d9801e04 	addi	r6,sp,120
 c001ec4:	b80b883a 	mov	r5,r23
 c001ec8:	9809883a 	mov	r4,r19
 c001ecc:	c0076ec0 	call	c0076ec <__sprint_r>
 c001ed0:	103c201e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c001ed4:	d8c02017 	ldw	r3,128(sp)
 c001ed8:	d8801f17 	ldw	r2,124(sp)
 c001edc:	da000404 	addi	r8,sp,16
 c001ee0:	003fee06 	br	c001e9c <__alt_data_end+0xfc001e9c>
 c001ee4:	d9002d17 	ldw	r4,180(sp)
 c001ee8:	d9801e04 	addi	r6,sp,120
 c001eec:	b80b883a 	mov	r5,r23
 c001ef0:	c0076ec0 	call	c0076ec <__sprint_r>
 c001ef4:	103c171e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c001ef8:	d8c02017 	ldw	r3,128(sp)
 c001efc:	df002787 	ldb	fp,158(sp)
 c001f00:	da000404 	addi	r8,sp,16
 c001f04:	003d3406 	br	c0013d8 <__alt_data_end+0xfc0013d8>
 c001f08:	9080040c 	andi	r2,r18,16
 c001f0c:	10016126 	beq	r2,zero,c002494 <___vfprintf_internal_r+0x1950>
 c001f10:	d9402e17 	ldw	r5,184(sp)
 c001f14:	2cc00017 	ldw	r19,0(r5)
 c001f18:	29400104 	addi	r5,r5,4
 c001f1c:	d9402e15 	stw	r5,184(sp)
 c001f20:	982dd7fa 	srai	r22,r19,31
 c001f24:	b005883a 	mov	r2,r22
 c001f28:	003c5a06 	br	c001094 <__alt_data_end+0xfc001094>
 c001f2c:	9080040c 	andi	r2,r18,16
 c001f30:	10003526 	beq	r2,zero,c002008 <___vfprintf_internal_r+0x14c4>
 c001f34:	d8c02e17 	ldw	r3,184(sp)
 c001f38:	d9002a17 	ldw	r4,168(sp)
 c001f3c:	d8002785 	stb	zero,158(sp)
 c001f40:	18800104 	addi	r2,r3,4
 c001f44:	1cc00017 	ldw	r19,0(r3)
 c001f48:	002d883a 	mov	r22,zero
 c001f4c:	20003716 	blt	r4,zero,c00202c <___vfprintf_internal_r+0x14e8>
 c001f50:	00ffdfc4 	movi	r3,-129
 c001f54:	d8802e15 	stw	r2,184(sp)
 c001f58:	90e4703a 	and	r18,r18,r3
 c001f5c:	0039883a 	mov	fp,zero
 c001f60:	983dd426 	beq	r19,zero,c0016b4 <__alt_data_end+0xfc0016b4>
 c001f64:	00800244 	movi	r2,9
 c001f68:	14fc5336 	bltu	r2,r19,c0010b8 <__alt_data_end+0xfc0010b8>
 c001f6c:	d8c02817 	ldw	r3,160(sp)
 c001f70:	dc001dc4 	addi	r16,sp,119
 c001f74:	9cc00c04 	addi	r19,r19,48
 c001f78:	1c07c83a 	sub	r3,r3,r16
 c001f7c:	dcc01dc5 	stb	r19,119(sp)
 c001f80:	d8c02b15 	stw	r3,172(sp)
 c001f84:	003cc606 	br	c0012a0 <__alt_data_end+0xfc0012a0>
 c001f88:	d8803317 	ldw	r2,204(sp)
 c001f8c:	143fffc4 	addi	r16,r2,-1
 c001f90:	043f4d0e 	bge	zero,r16,c001cc8 <__alt_data_end+0xfc001cc8>
 c001f94:	07000404 	movi	fp,16
 c001f98:	e400810e 	bge	fp,r16,c0021a0 <___vfprintf_internal_r+0x165c>
 c001f9c:	01430074 	movhi	r5,3073
 c001fa0:	29409784 	addi	r5,r5,606
 c001fa4:	d9402c15 	stw	r5,176(sp)
 c001fa8:	01c001c4 	movi	r7,7
 c001fac:	dcc02d17 	ldw	r19,180(sp)
 c001fb0:	00000306 	br	c001fc0 <___vfprintf_internal_r+0x147c>
 c001fb4:	b5800204 	addi	r22,r22,8
 c001fb8:	843ffc04 	addi	r16,r16,-16
 c001fbc:	e4007b0e 	bge	fp,r16,c0021ac <___vfprintf_internal_r+0x1668>
 c001fc0:	18c00404 	addi	r3,r3,16
 c001fc4:	8c400044 	addi	r17,r17,1
 c001fc8:	b5000015 	stw	r20,0(r22)
 c001fcc:	b7000115 	stw	fp,4(r22)
 c001fd0:	d8c02015 	stw	r3,128(sp)
 c001fd4:	dc401f15 	stw	r17,124(sp)
 c001fd8:	3c7ff60e 	bge	r7,r17,c001fb4 <__alt_data_end+0xfc001fb4>
 c001fdc:	d9801e04 	addi	r6,sp,120
 c001fe0:	b80b883a 	mov	r5,r23
 c001fe4:	9809883a 	mov	r4,r19
 c001fe8:	d9c03c15 	stw	r7,240(sp)
 c001fec:	c0076ec0 	call	c0076ec <__sprint_r>
 c001ff0:	d9c03c17 	ldw	r7,240(sp)
 c001ff4:	103bd71e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c001ff8:	d8c02017 	ldw	r3,128(sp)
 c001ffc:	dc401f17 	ldw	r17,124(sp)
 c002000:	dd800404 	addi	r22,sp,16
 c002004:	003fec06 	br	c001fb8 <__alt_data_end+0xfc001fb8>
 c002008:	9080100c 	andi	r2,r18,64
 c00200c:	d8002785 	stb	zero,158(sp)
 c002010:	10010e26 	beq	r2,zero,c00244c <___vfprintf_internal_r+0x1908>
 c002014:	d9402e17 	ldw	r5,184(sp)
 c002018:	d8c02a17 	ldw	r3,168(sp)
 c00201c:	002d883a 	mov	r22,zero
 c002020:	28800104 	addi	r2,r5,4
 c002024:	2cc0000b 	ldhu	r19,0(r5)
 c002028:	183fc90e 	bge	r3,zero,c001f50 <__alt_data_end+0xfc001f50>
 c00202c:	d8802e15 	stw	r2,184(sp)
 c002030:	0039883a 	mov	fp,zero
 c002034:	9d84b03a 	or	r2,r19,r22
 c002038:	103c1e1e 	bne	r2,zero,c0010b4 <__alt_data_end+0xfc0010b4>
 c00203c:	00800044 	movi	r2,1
 c002040:	003e6c06 	br	c0019f4 <__alt_data_end+0xfc0019f4>
 c002044:	d9002d17 	ldw	r4,180(sp)
 c002048:	d9801e04 	addi	r6,sp,120
 c00204c:	b80b883a 	mov	r5,r23
 c002050:	c0076ec0 	call	c0076ec <__sprint_r>
 c002054:	103bbf1e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c002058:	d8c02017 	ldw	r3,128(sp)
 c00205c:	da000404 	addi	r8,sp,16
 c002060:	d9003217 	ldw	r4,200(sp)
 c002064:	d8802617 	ldw	r2,152(sp)
 c002068:	d9403317 	ldw	r5,204(sp)
 c00206c:	8123883a 	add	r17,r16,r4
 c002070:	11400216 	blt	r2,r5,c00207c <___vfprintf_internal_r+0x1538>
 c002074:	9100004c 	andi	r4,r18,1
 c002078:	20000d26 	beq	r4,zero,c0020b0 <___vfprintf_internal_r+0x156c>
 c00207c:	d9003717 	ldw	r4,220(sp)
 c002080:	d9403417 	ldw	r5,208(sp)
 c002084:	1907883a 	add	r3,r3,r4
 c002088:	d9001f17 	ldw	r4,124(sp)
 c00208c:	41400015 	stw	r5,0(r8)
 c002090:	d9403717 	ldw	r5,220(sp)
 c002094:	21000044 	addi	r4,r4,1
 c002098:	d8c02015 	stw	r3,128(sp)
 c00209c:	41400115 	stw	r5,4(r8)
 c0020a0:	d9001f15 	stw	r4,124(sp)
 c0020a4:	014001c4 	movi	r5,7
 c0020a8:	2901e816 	blt	r5,r4,c00284c <___vfprintf_internal_r+0x1d08>
 c0020ac:	42000204 	addi	r8,r8,8
 c0020b0:	d9003317 	ldw	r4,204(sp)
 c0020b4:	8121883a 	add	r16,r16,r4
 c0020b8:	2085c83a 	sub	r2,r4,r2
 c0020bc:	8461c83a 	sub	r16,r16,r17
 c0020c0:	1400010e 	bge	r2,r16,c0020c8 <___vfprintf_internal_r+0x1584>
 c0020c4:	1021883a 	mov	r16,r2
 c0020c8:	04000a0e 	bge	zero,r16,c0020f4 <___vfprintf_internal_r+0x15b0>
 c0020cc:	d9001f17 	ldw	r4,124(sp)
 c0020d0:	1c07883a 	add	r3,r3,r16
 c0020d4:	44400015 	stw	r17,0(r8)
 c0020d8:	21000044 	addi	r4,r4,1
 c0020dc:	44000115 	stw	r16,4(r8)
 c0020e0:	d8c02015 	stw	r3,128(sp)
 c0020e4:	d9001f15 	stw	r4,124(sp)
 c0020e8:	014001c4 	movi	r5,7
 c0020ec:	2901fb16 	blt	r5,r4,c0028dc <___vfprintf_internal_r+0x1d98>
 c0020f0:	42000204 	addi	r8,r8,8
 c0020f4:	8001f716 	blt	r16,zero,c0028d4 <___vfprintf_internal_r+0x1d90>
 c0020f8:	1421c83a 	sub	r16,r2,r16
 c0020fc:	043d160e 	bge	zero,r16,c001558 <__alt_data_end+0xfc001558>
 c002100:	04400404 	movi	r17,16
 c002104:	d8801f17 	ldw	r2,124(sp)
 c002108:	8c3efb0e 	bge	r17,r16,c001cf8 <__alt_data_end+0xfc001cf8>
 c00210c:	01430074 	movhi	r5,3073
 c002110:	29409784 	addi	r5,r5,606
 c002114:	d9402c15 	stw	r5,176(sp)
 c002118:	058001c4 	movi	r22,7
 c00211c:	dcc02d17 	ldw	r19,180(sp)
 c002120:	00000306 	br	c002130 <___vfprintf_internal_r+0x15ec>
 c002124:	42000204 	addi	r8,r8,8
 c002128:	843ffc04 	addi	r16,r16,-16
 c00212c:	8c3ef50e 	bge	r17,r16,c001d04 <__alt_data_end+0xfc001d04>
 c002130:	18c00404 	addi	r3,r3,16
 c002134:	10800044 	addi	r2,r2,1
 c002138:	45000015 	stw	r20,0(r8)
 c00213c:	44400115 	stw	r17,4(r8)
 c002140:	d8c02015 	stw	r3,128(sp)
 c002144:	d8801f15 	stw	r2,124(sp)
 c002148:	b0bff60e 	bge	r22,r2,c002124 <__alt_data_end+0xfc002124>
 c00214c:	d9801e04 	addi	r6,sp,120
 c002150:	b80b883a 	mov	r5,r23
 c002154:	9809883a 	mov	r4,r19
 c002158:	c0076ec0 	call	c0076ec <__sprint_r>
 c00215c:	103b7d1e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c002160:	d8c02017 	ldw	r3,128(sp)
 c002164:	d8801f17 	ldw	r2,124(sp)
 c002168:	da000404 	addi	r8,sp,16
 c00216c:	003fee06 	br	c002128 <__alt_data_end+0xfc002128>
 c002170:	9088703a 	and	r4,r18,r2
 c002174:	203eab1e 	bne	r4,zero,c001c24 <__alt_data_end+0xfc001c24>
 c002178:	dc401f17 	ldw	r17,124(sp)
 c00217c:	40800115 	stw	r2,4(r8)
 c002180:	44000015 	stw	r16,0(r8)
 c002184:	8c400044 	addi	r17,r17,1
 c002188:	d8c02015 	stw	r3,128(sp)
 c00218c:	dc401f15 	stw	r17,124(sp)
 c002190:	008001c4 	movi	r2,7
 c002194:	14400e16 	blt	r2,r17,c0021d0 <___vfprintf_internal_r+0x168c>
 c002198:	45800204 	addi	r22,r8,8
 c00219c:	003eca06 	br	c001cc8 <__alt_data_end+0xfc001cc8>
 c0021a0:	01030074 	movhi	r4,3073
 c0021a4:	21009784 	addi	r4,r4,606
 c0021a8:	d9002c15 	stw	r4,176(sp)
 c0021ac:	d8802c17 	ldw	r2,176(sp)
 c0021b0:	1c07883a 	add	r3,r3,r16
 c0021b4:	8c400044 	addi	r17,r17,1
 c0021b8:	b0800015 	stw	r2,0(r22)
 c0021bc:	b4000115 	stw	r16,4(r22)
 c0021c0:	d8c02015 	stw	r3,128(sp)
 c0021c4:	dc401f15 	stw	r17,124(sp)
 c0021c8:	008001c4 	movi	r2,7
 c0021cc:	147ebd0e 	bge	r2,r17,c001cc4 <__alt_data_end+0xfc001cc4>
 c0021d0:	d9002d17 	ldw	r4,180(sp)
 c0021d4:	d9801e04 	addi	r6,sp,120
 c0021d8:	b80b883a 	mov	r5,r23
 c0021dc:	c0076ec0 	call	c0076ec <__sprint_r>
 c0021e0:	103b5c1e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c0021e4:	d8c02017 	ldw	r3,128(sp)
 c0021e8:	dc401f17 	ldw	r17,124(sp)
 c0021ec:	dd800404 	addi	r22,sp,16
 c0021f0:	003eb506 	br	c001cc8 <__alt_data_end+0xfc001cc8>
 c0021f4:	d9002d17 	ldw	r4,180(sp)
 c0021f8:	d9801e04 	addi	r6,sp,120
 c0021fc:	b80b883a 	mov	r5,r23
 c002200:	c0076ec0 	call	c0076ec <__sprint_r>
 c002204:	103b531e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c002208:	d8c02017 	ldw	r3,128(sp)
 c00220c:	dc401f17 	ldw	r17,124(sp)
 c002210:	da000404 	addi	r8,sp,16
 c002214:	003e8d06 	br	c001c4c <__alt_data_end+0xfc001c4c>
 c002218:	d9002d17 	ldw	r4,180(sp)
 c00221c:	d9801e04 	addi	r6,sp,120
 c002220:	b80b883a 	mov	r5,r23
 c002224:	c0076ec0 	call	c0076ec <__sprint_r>
 c002228:	103b4a1e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c00222c:	d8c02017 	ldw	r3,128(sp)
 c002230:	dc401f17 	ldw	r17,124(sp)
 c002234:	dd800404 	addi	r22,sp,16
 c002238:	003e8f06 	br	c001c78 <__alt_data_end+0xfc001c78>
 c00223c:	0027883a 	mov	r19,zero
 c002240:	003f4a06 	br	c001f6c <__alt_data_end+0xfc001f6c>
 c002244:	d9002d17 	ldw	r4,180(sp)
 c002248:	d9801e04 	addi	r6,sp,120
 c00224c:	b80b883a 	mov	r5,r23
 c002250:	c0076ec0 	call	c0076ec <__sprint_r>
 c002254:	103b3f1e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c002258:	d8c02017 	ldw	r3,128(sp)
 c00225c:	da000404 	addi	r8,sp,16
 c002260:	003c7b06 	br	c001450 <__alt_data_end+0xfc001450>
 c002264:	d9402a17 	ldw	r5,168(sp)
 c002268:	04e7c83a 	sub	r19,zero,r19
 c00226c:	07000b44 	movi	fp,45
 c002270:	9804c03a 	cmpne	r2,r19,zero
 c002274:	05adc83a 	sub	r22,zero,r22
 c002278:	df002785 	stb	fp,158(sp)
 c00227c:	b0adc83a 	sub	r22,r22,r2
 c002280:	28017b16 	blt	r5,zero,c002870 <___vfprintf_internal_r+0x1d2c>
 c002284:	00bfdfc4 	movi	r2,-129
 c002288:	90a4703a 	and	r18,r18,r2
 c00228c:	003b8906 	br	c0010b4 <__alt_data_end+0xfc0010b4>
 c002290:	d9003617 	ldw	r4,216(sp)
 c002294:	d9403817 	ldw	r5,224(sp)
 c002298:	da003d15 	stw	r8,244(sp)
 c00229c:	c0072780 	call	c007278 <__fpclassifyd>
 c0022a0:	da003d17 	ldw	r8,244(sp)
 c0022a4:	1000f026 	beq	r2,zero,c002668 <___vfprintf_internal_r+0x1b24>
 c0022a8:	d9002a17 	ldw	r4,168(sp)
 c0022ac:	05bff7c4 	movi	r22,-33
 c0022b0:	00bfffc4 	movi	r2,-1
 c0022b4:	8dac703a 	and	r22,r17,r22
 c0022b8:	20820026 	beq	r4,r2,c002abc <___vfprintf_internal_r+0x1f78>
 c0022bc:	008011c4 	movi	r2,71
 c0022c0:	b081f726 	beq	r22,r2,c002aa0 <___vfprintf_internal_r+0x1f5c>
 c0022c4:	d9003817 	ldw	r4,224(sp)
 c0022c8:	90c04014 	ori	r3,r18,256
 c0022cc:	d8c02c15 	stw	r3,176(sp)
 c0022d0:	20021516 	blt	r4,zero,c002b28 <___vfprintf_internal_r+0x1fe4>
 c0022d4:	dcc03817 	ldw	r19,224(sp)
 c0022d8:	d8002905 	stb	zero,164(sp)
 c0022dc:	00801984 	movi	r2,102
 c0022e0:	8881f926 	beq	r17,r2,c002ac8 <___vfprintf_internal_r+0x1f84>
 c0022e4:	00801184 	movi	r2,70
 c0022e8:	88821c26 	beq	r17,r2,c002b5c <___vfprintf_internal_r+0x2018>
 c0022ec:	00801144 	movi	r2,69
 c0022f0:	b081ef26 	beq	r22,r2,c002ab0 <___vfprintf_internal_r+0x1f6c>
 c0022f4:	d8c02a17 	ldw	r3,168(sp)
 c0022f8:	d8802104 	addi	r2,sp,132
 c0022fc:	d8800315 	stw	r2,12(sp)
 c002300:	d9403617 	ldw	r5,216(sp)
 c002304:	d8802504 	addi	r2,sp,148
 c002308:	d9002d17 	ldw	r4,180(sp)
 c00230c:	d8800215 	stw	r2,8(sp)
 c002310:	d8802604 	addi	r2,sp,152
 c002314:	d8c00015 	stw	r3,0(sp)
 c002318:	d8800115 	stw	r2,4(sp)
 c00231c:	01c00084 	movi	r7,2
 c002320:	980d883a 	mov	r6,r19
 c002324:	d8c03c15 	stw	r3,240(sp)
 c002328:	da003d15 	stw	r8,244(sp)
 c00232c:	c0032740 	call	c003274 <_dtoa_r>
 c002330:	1021883a 	mov	r16,r2
 c002334:	008019c4 	movi	r2,103
 c002338:	d8c03c17 	ldw	r3,240(sp)
 c00233c:	da003d17 	ldw	r8,244(sp)
 c002340:	88817126 	beq	r17,r2,c002908 <___vfprintf_internal_r+0x1dc4>
 c002344:	008011c4 	movi	r2,71
 c002348:	88829126 	beq	r17,r2,c002d90 <___vfprintf_internal_r+0x224c>
 c00234c:	80f9883a 	add	fp,r16,r3
 c002350:	d9003617 	ldw	r4,216(sp)
 c002354:	000d883a 	mov	r6,zero
 c002358:	000f883a 	mov	r7,zero
 c00235c:	980b883a 	mov	r5,r19
 c002360:	da003d15 	stw	r8,244(sp)
 c002364:	c00c1ac0 	call	c00c1ac <__eqdf2>
 c002368:	da003d17 	ldw	r8,244(sp)
 c00236c:	10018d26 	beq	r2,zero,c0029a4 <___vfprintf_internal_r+0x1e60>
 c002370:	d8802117 	ldw	r2,132(sp)
 c002374:	1700062e 	bgeu	r2,fp,c002390 <___vfprintf_internal_r+0x184c>
 c002378:	01000c04 	movi	r4,48
 c00237c:	10c00044 	addi	r3,r2,1
 c002380:	d8c02115 	stw	r3,132(sp)
 c002384:	11000005 	stb	r4,0(r2)
 c002388:	d8802117 	ldw	r2,132(sp)
 c00238c:	173ffb36 	bltu	r2,fp,c00237c <__alt_data_end+0xfc00237c>
 c002390:	1405c83a 	sub	r2,r2,r16
 c002394:	d8803315 	stw	r2,204(sp)
 c002398:	008011c4 	movi	r2,71
 c00239c:	b0817626 	beq	r22,r2,c002978 <___vfprintf_internal_r+0x1e34>
 c0023a0:	00801944 	movi	r2,101
 c0023a4:	1442800e 	bge	r2,r17,c002da8 <___vfprintf_internal_r+0x2264>
 c0023a8:	d8c02617 	ldw	r3,152(sp)
 c0023ac:	00801984 	movi	r2,102
 c0023b0:	d8c03215 	stw	r3,200(sp)
 c0023b4:	8881fe26 	beq	r17,r2,c002bb0 <___vfprintf_internal_r+0x206c>
 c0023b8:	d8c03217 	ldw	r3,200(sp)
 c0023bc:	d9003317 	ldw	r4,204(sp)
 c0023c0:	1901dd16 	blt	r3,r4,c002b38 <___vfprintf_internal_r+0x1ff4>
 c0023c4:	9480004c 	andi	r18,r18,1
 c0023c8:	90022b1e 	bne	r18,zero,c002c78 <___vfprintf_internal_r+0x2134>
 c0023cc:	1805883a 	mov	r2,r3
 c0023d0:	18028316 	blt	r3,zero,c002de0 <___vfprintf_internal_r+0x229c>
 c0023d4:	d8c03217 	ldw	r3,200(sp)
 c0023d8:	044019c4 	movi	r17,103
 c0023dc:	d8c02b15 	stw	r3,172(sp)
 c0023e0:	df002907 	ldb	fp,164(sp)
 c0023e4:	e001531e 	bne	fp,zero,c002934 <___vfprintf_internal_r+0x1df0>
 c0023e8:	df002783 	ldbu	fp,158(sp)
 c0023ec:	d8802915 	stw	r2,164(sp)
 c0023f0:	dc802c17 	ldw	r18,176(sp)
 c0023f4:	d8002a15 	stw	zero,168(sp)
 c0023f8:	003baf06 	br	c0012b8 <__alt_data_end+0xfc0012b8>
 c0023fc:	d8c02e17 	ldw	r3,184(sp)
 c002400:	d9002e17 	ldw	r4,184(sp)
 c002404:	d9402e17 	ldw	r5,184(sp)
 c002408:	18c00017 	ldw	r3,0(r3)
 c00240c:	21000117 	ldw	r4,4(r4)
 c002410:	29400204 	addi	r5,r5,8
 c002414:	d8c03615 	stw	r3,216(sp)
 c002418:	d9003815 	stw	r4,224(sp)
 c00241c:	d9402e15 	stw	r5,184(sp)
 c002420:	003b5006 	br	c001164 <__alt_data_end+0xfc001164>
 c002424:	ac400007 	ldb	r17,0(r21)
 c002428:	003a2806 	br	c000ccc <__alt_data_end+0xfc000ccc>
 c00242c:	9080100c 	andi	r2,r18,64
 c002430:	1000a826 	beq	r2,zero,c0026d4 <___vfprintf_internal_r+0x1b90>
 c002434:	d8c02e17 	ldw	r3,184(sp)
 c002438:	002d883a 	mov	r22,zero
 c00243c:	1cc0000b 	ldhu	r19,0(r3)
 c002440:	18c00104 	addi	r3,r3,4
 c002444:	d8c02e15 	stw	r3,184(sp)
 c002448:	003caf06 	br	c001708 <__alt_data_end+0xfc001708>
 c00244c:	d9002e17 	ldw	r4,184(sp)
 c002450:	d9402a17 	ldw	r5,168(sp)
 c002454:	002d883a 	mov	r22,zero
 c002458:	20800104 	addi	r2,r4,4
 c00245c:	24c00017 	ldw	r19,0(r4)
 c002460:	283ebb0e 	bge	r5,zero,c001f50 <__alt_data_end+0xfc001f50>
 c002464:	003ef106 	br	c00202c <__alt_data_end+0xfc00202c>
 c002468:	9080040c 	andi	r2,r18,16
 c00246c:	1000921e 	bne	r2,zero,c0026b8 <___vfprintf_internal_r+0x1b74>
 c002470:	9480100c 	andi	r18,r18,64
 c002474:	90013926 	beq	r18,zero,c00295c <___vfprintf_internal_r+0x1e18>
 c002478:	d9402e17 	ldw	r5,184(sp)
 c00247c:	d8c02f17 	ldw	r3,188(sp)
 c002480:	28800017 	ldw	r2,0(r5)
 c002484:	29400104 	addi	r5,r5,4
 c002488:	d9402e15 	stw	r5,184(sp)
 c00248c:	10c0000d 	sth	r3,0(r2)
 c002490:	0039e406 	br	c000c24 <__alt_data_end+0xfc000c24>
 c002494:	9080100c 	andi	r2,r18,64
 c002498:	10008026 	beq	r2,zero,c00269c <___vfprintf_internal_r+0x1b58>
 c00249c:	d8802e17 	ldw	r2,184(sp)
 c0024a0:	14c0000f 	ldh	r19,0(r2)
 c0024a4:	10800104 	addi	r2,r2,4
 c0024a8:	d8802e15 	stw	r2,184(sp)
 c0024ac:	982dd7fa 	srai	r22,r19,31
 c0024b0:	b005883a 	mov	r2,r22
 c0024b4:	003af706 	br	c001094 <__alt_data_end+0xfc001094>
 c0024b8:	9080100c 	andi	r2,r18,64
 c0024bc:	d8002785 	stb	zero,158(sp)
 c0024c0:	10008a1e 	bne	r2,zero,c0026ec <___vfprintf_internal_r+0x1ba8>
 c0024c4:	d9002e17 	ldw	r4,184(sp)
 c0024c8:	d9402a17 	ldw	r5,168(sp)
 c0024cc:	002d883a 	mov	r22,zero
 c0024d0:	20800104 	addi	r2,r4,4
 c0024d4:	24c00017 	ldw	r19,0(r4)
 c0024d8:	283e4b0e 	bge	r5,zero,c001e08 <__alt_data_end+0xfc001e08>
 c0024dc:	9d86b03a 	or	r3,r19,r22
 c0024e0:	d8802e15 	stw	r2,184(sp)
 c0024e4:	183e4c1e 	bne	r3,zero,c001e18 <__alt_data_end+0xfc001e18>
 c0024e8:	0039883a 	mov	fp,zero
 c0024ec:	0005883a 	mov	r2,zero
 c0024f0:	003d4006 	br	c0019f4 <__alt_data_end+0xfc0019f4>
 c0024f4:	01430074 	movhi	r5,3073
 c0024f8:	29409784 	addi	r5,r5,606
 c0024fc:	d9402c15 	stw	r5,176(sp)
 c002500:	d9402c17 	ldw	r5,176(sp)
 c002504:	1c47883a 	add	r3,r3,r17
 c002508:	10800044 	addi	r2,r2,1
 c00250c:	41400015 	stw	r5,0(r8)
 c002510:	44400115 	stw	r17,4(r8)
 c002514:	d8c02015 	stw	r3,128(sp)
 c002518:	d8801f15 	stw	r2,124(sp)
 c00251c:	010001c4 	movi	r4,7
 c002520:	20bec816 	blt	r4,r2,c002044 <__alt_data_end+0xfc002044>
 c002524:	42000204 	addi	r8,r8,8
 c002528:	003ecd06 	br	c002060 <__alt_data_end+0xfc002060>
 c00252c:	d9002a17 	ldw	r4,168(sp)
 c002530:	d8002785 	stb	zero,158(sp)
 c002534:	203d2d16 	blt	r4,zero,c0019ec <__alt_data_end+0xfc0019ec>
 c002538:	00bfdfc4 	movi	r2,-129
 c00253c:	90a4703a 	and	r18,r18,r2
 c002540:	003a6106 	br	c000ec8 <__alt_data_end+0xfc000ec8>
 c002544:	01030074 	movhi	r4,3073
 c002548:	21009784 	addi	r4,r4,606
 c00254c:	d9002c15 	stw	r4,176(sp)
 c002550:	003bea06 	br	c0014fc <__alt_data_end+0xfc0014fc>
 c002554:	d9002d17 	ldw	r4,180(sp)
 c002558:	d9801e04 	addi	r6,sp,120
 c00255c:	b80b883a 	mov	r5,r23
 c002560:	c0076ec0 	call	c0076ec <__sprint_r>
 c002564:	103a7b1e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c002568:	d8c02017 	ldw	r3,128(sp)
 c00256c:	da000404 	addi	r8,sp,16
 c002570:	003d4106 	br	c001a78 <__alt_data_end+0xfc001a78>
 c002574:	d8801f17 	ldw	r2,124(sp)
 c002578:	01430074 	movhi	r5,3073
 c00257c:	01000044 	movi	r4,1
 c002580:	18c00044 	addi	r3,r3,1
 c002584:	10800044 	addi	r2,r2,1
 c002588:	29409704 	addi	r5,r5,604
 c00258c:	41000115 	stw	r4,4(r8)
 c002590:	41400015 	stw	r5,0(r8)
 c002594:	d8c02015 	stw	r3,128(sp)
 c002598:	d8801f15 	stw	r2,124(sp)
 c00259c:	010001c4 	movi	r4,7
 c0025a0:	20805c16 	blt	r4,r2,c002714 <___vfprintf_internal_r+0x1bd0>
 c0025a4:	42000204 	addi	r8,r8,8
 c0025a8:	8800041e 	bne	r17,zero,c0025bc <___vfprintf_internal_r+0x1a78>
 c0025ac:	d8803317 	ldw	r2,204(sp)
 c0025b0:	1000021e 	bne	r2,zero,c0025bc <___vfprintf_internal_r+0x1a78>
 c0025b4:	9080004c 	andi	r2,r18,1
 c0025b8:	103be726 	beq	r2,zero,c001558 <__alt_data_end+0xfc001558>
 c0025bc:	d9003717 	ldw	r4,220(sp)
 c0025c0:	d8801f17 	ldw	r2,124(sp)
 c0025c4:	d9403417 	ldw	r5,208(sp)
 c0025c8:	20c7883a 	add	r3,r4,r3
 c0025cc:	10800044 	addi	r2,r2,1
 c0025d0:	41000115 	stw	r4,4(r8)
 c0025d4:	41400015 	stw	r5,0(r8)
 c0025d8:	d8c02015 	stw	r3,128(sp)
 c0025dc:	d8801f15 	stw	r2,124(sp)
 c0025e0:	010001c4 	movi	r4,7
 c0025e4:	20812116 	blt	r4,r2,c002a6c <___vfprintf_internal_r+0x1f28>
 c0025e8:	42000204 	addi	r8,r8,8
 c0025ec:	0463c83a 	sub	r17,zero,r17
 c0025f0:	0440730e 	bge	zero,r17,c0027c0 <___vfprintf_internal_r+0x1c7c>
 c0025f4:	05800404 	movi	r22,16
 c0025f8:	b440860e 	bge	r22,r17,c002814 <___vfprintf_internal_r+0x1cd0>
 c0025fc:	01430074 	movhi	r5,3073
 c002600:	29409784 	addi	r5,r5,606
 c002604:	d9402c15 	stw	r5,176(sp)
 c002608:	070001c4 	movi	fp,7
 c00260c:	dcc02d17 	ldw	r19,180(sp)
 c002610:	00000306 	br	c002620 <___vfprintf_internal_r+0x1adc>
 c002614:	42000204 	addi	r8,r8,8
 c002618:	8c7ffc04 	addi	r17,r17,-16
 c00261c:	b440800e 	bge	r22,r17,c002820 <___vfprintf_internal_r+0x1cdc>
 c002620:	18c00404 	addi	r3,r3,16
 c002624:	10800044 	addi	r2,r2,1
 c002628:	45000015 	stw	r20,0(r8)
 c00262c:	45800115 	stw	r22,4(r8)
 c002630:	d8c02015 	stw	r3,128(sp)
 c002634:	d8801f15 	stw	r2,124(sp)
 c002638:	e0bff60e 	bge	fp,r2,c002614 <__alt_data_end+0xfc002614>
 c00263c:	d9801e04 	addi	r6,sp,120
 c002640:	b80b883a 	mov	r5,r23
 c002644:	9809883a 	mov	r4,r19
 c002648:	c0076ec0 	call	c0076ec <__sprint_r>
 c00264c:	103a411e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c002650:	d8c02017 	ldw	r3,128(sp)
 c002654:	d8801f17 	ldw	r2,124(sp)
 c002658:	da000404 	addi	r8,sp,16
 c00265c:	003fee06 	br	c002618 <__alt_data_end+0xfc002618>
 c002660:	00bfffc4 	movi	r2,-1
 c002664:	003a3f06 	br	c000f64 <__alt_data_end+0xfc000f64>
 c002668:	008011c4 	movi	r2,71
 c00266c:	1440b816 	blt	r2,r17,c002950 <___vfprintf_internal_r+0x1e0c>
 c002670:	04030074 	movhi	r16,3073
 c002674:	84008904 	addi	r16,r16,548
 c002678:	00c000c4 	movi	r3,3
 c00267c:	00bfdfc4 	movi	r2,-129
 c002680:	d8c02915 	stw	r3,164(sp)
 c002684:	90a4703a 	and	r18,r18,r2
 c002688:	df002783 	ldbu	fp,158(sp)
 c00268c:	d8c02b15 	stw	r3,172(sp)
 c002690:	d8002a15 	stw	zero,168(sp)
 c002694:	d8003215 	stw	zero,200(sp)
 c002698:	003b0706 	br	c0012b8 <__alt_data_end+0xfc0012b8>
 c00269c:	d8c02e17 	ldw	r3,184(sp)
 c0026a0:	1cc00017 	ldw	r19,0(r3)
 c0026a4:	18c00104 	addi	r3,r3,4
 c0026a8:	d8c02e15 	stw	r3,184(sp)
 c0026ac:	982dd7fa 	srai	r22,r19,31
 c0026b0:	b005883a 	mov	r2,r22
 c0026b4:	003a7706 	br	c001094 <__alt_data_end+0xfc001094>
 c0026b8:	d8c02e17 	ldw	r3,184(sp)
 c0026bc:	d9002f17 	ldw	r4,188(sp)
 c0026c0:	18800017 	ldw	r2,0(r3)
 c0026c4:	18c00104 	addi	r3,r3,4
 c0026c8:	d8c02e15 	stw	r3,184(sp)
 c0026cc:	11000015 	stw	r4,0(r2)
 c0026d0:	00395406 	br	c000c24 <__alt_data_end+0xfc000c24>
 c0026d4:	d9002e17 	ldw	r4,184(sp)
 c0026d8:	002d883a 	mov	r22,zero
 c0026dc:	24c00017 	ldw	r19,0(r4)
 c0026e0:	21000104 	addi	r4,r4,4
 c0026e4:	d9002e15 	stw	r4,184(sp)
 c0026e8:	003c0706 	br	c001708 <__alt_data_end+0xfc001708>
 c0026ec:	d9402e17 	ldw	r5,184(sp)
 c0026f0:	d8c02a17 	ldw	r3,168(sp)
 c0026f4:	002d883a 	mov	r22,zero
 c0026f8:	28800104 	addi	r2,r5,4
 c0026fc:	2cc0000b 	ldhu	r19,0(r5)
 c002700:	183dc10e 	bge	r3,zero,c001e08 <__alt_data_end+0xfc001e08>
 c002704:	003f7506 	br	c0024dc <__alt_data_end+0xfc0024dc>
 c002708:	04030074 	movhi	r16,3073
 c00270c:	84008704 	addi	r16,r16,540
 c002710:	003aa706 	br	c0011b0 <__alt_data_end+0xfc0011b0>
 c002714:	d9002d17 	ldw	r4,180(sp)
 c002718:	d9801e04 	addi	r6,sp,120
 c00271c:	b80b883a 	mov	r5,r23
 c002720:	c0076ec0 	call	c0076ec <__sprint_r>
 c002724:	103a0b1e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c002728:	dc402617 	ldw	r17,152(sp)
 c00272c:	d8c02017 	ldw	r3,128(sp)
 c002730:	da000404 	addi	r8,sp,16
 c002734:	003f9c06 	br	c0025a8 <__alt_data_end+0xfc0025a8>
 c002738:	ac400043 	ldbu	r17,1(r21)
 c00273c:	84000814 	ori	r16,r16,32
 c002740:	ad400044 	addi	r21,r21,1
 c002744:	8c403fcc 	andi	r17,r17,255
 c002748:	8c40201c 	xori	r17,r17,128
 c00274c:	8c7fe004 	addi	r17,r17,-128
 c002750:	00395e06 	br	c000ccc <__alt_data_end+0xfc000ccc>
 c002754:	d8c02e15 	stw	r3,184(sp)
 c002758:	0039883a 	mov	fp,zero
 c00275c:	003e3506 	br	c002034 <__alt_data_end+0xfc002034>
 c002760:	d9002d17 	ldw	r4,180(sp)
 c002764:	d9801e04 	addi	r6,sp,120
 c002768:	b80b883a 	mov	r5,r23
 c00276c:	c0076ec0 	call	c0076ec <__sprint_r>
 c002770:	1039f81e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c002774:	d8c02017 	ldw	r3,128(sp)
 c002778:	da000404 	addi	r8,sp,16
 c00277c:	003cd006 	br	c001ac0 <__alt_data_end+0xfc001ac0>
 c002780:	8009883a 	mov	r4,r16
 c002784:	df003d15 	stw	fp,244(sp)
 c002788:	c0075580 	call	c007558 <strlen>
 c00278c:	d8802b15 	stw	r2,172(sp)
 c002790:	da003d17 	ldw	r8,244(sp)
 c002794:	103c200e 	bge	r2,zero,c001818 <__alt_data_end+0xfc001818>
 c002798:	0005883a 	mov	r2,zero
 c00279c:	003c1e06 	br	c001818 <__alt_data_end+0xfc001818>
 c0027a0:	d9002d17 	ldw	r4,180(sp)
 c0027a4:	d9801e04 	addi	r6,sp,120
 c0027a8:	b80b883a 	mov	r5,r23
 c0027ac:	c0076ec0 	call	c0076ec <__sprint_r>
 c0027b0:	1039e81e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c0027b4:	d8c02017 	ldw	r3,128(sp)
 c0027b8:	d8801f17 	ldw	r2,124(sp)
 c0027bc:	da000404 	addi	r8,sp,16
 c0027c0:	d9403317 	ldw	r5,204(sp)
 c0027c4:	10800044 	addi	r2,r2,1
 c0027c8:	44000015 	stw	r16,0(r8)
 c0027cc:	28c7883a 	add	r3,r5,r3
 c0027d0:	003b5b06 	br	c001540 <__alt_data_end+0xfc001540>
 c0027d4:	01030074 	movhi	r4,3073
 c0027d8:	21009b84 	addi	r4,r4,622
 c0027dc:	d9003515 	stw	r4,212(sp)
 c0027e0:	003af206 	br	c0013ac <__alt_data_end+0xfc0013ac>
 c0027e4:	013fffc4 	movi	r4,-1
 c0027e8:	003a0806 	br	c00100c <__alt_data_end+0xfc00100c>
 c0027ec:	0023883a 	mov	r17,zero
 c0027f0:	003d9d06 	br	c001e68 <__alt_data_end+0xfc001e68>
 c0027f4:	d9002d17 	ldw	r4,180(sp)
 c0027f8:	d9801e04 	addi	r6,sp,120
 c0027fc:	b80b883a 	mov	r5,r23
 c002800:	c0076ec0 	call	c0076ec <__sprint_r>
 c002804:	1039d31e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c002808:	d8c02017 	ldw	r3,128(sp)
 c00280c:	da000404 	addi	r8,sp,16
 c002810:	003d9406 	br	c001e64 <__alt_data_end+0xfc001e64>
 c002814:	01030074 	movhi	r4,3073
 c002818:	21009784 	addi	r4,r4,606
 c00281c:	d9002c15 	stw	r4,176(sp)
 c002820:	d9002c17 	ldw	r4,176(sp)
 c002824:	1c47883a 	add	r3,r3,r17
 c002828:	10800044 	addi	r2,r2,1
 c00282c:	41000015 	stw	r4,0(r8)
 c002830:	44400115 	stw	r17,4(r8)
 c002834:	d8c02015 	stw	r3,128(sp)
 c002838:	d8801f15 	stw	r2,124(sp)
 c00283c:	010001c4 	movi	r4,7
 c002840:	20bfd716 	blt	r4,r2,c0027a0 <__alt_data_end+0xfc0027a0>
 c002844:	42000204 	addi	r8,r8,8
 c002848:	003fdd06 	br	c0027c0 <__alt_data_end+0xfc0027c0>
 c00284c:	d9002d17 	ldw	r4,180(sp)
 c002850:	d9801e04 	addi	r6,sp,120
 c002854:	b80b883a 	mov	r5,r23
 c002858:	c0076ec0 	call	c0076ec <__sprint_r>
 c00285c:	1039bd1e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c002860:	d8802617 	ldw	r2,152(sp)
 c002864:	d8c02017 	ldw	r3,128(sp)
 c002868:	da000404 	addi	r8,sp,16
 c00286c:	003e1006 	br	c0020b0 <__alt_data_end+0xfc0020b0>
 c002870:	00800044 	movi	r2,1
 c002874:	10803fcc 	andi	r2,r2,255
 c002878:	00c00044 	movi	r3,1
 c00287c:	10fa0d26 	beq	r2,r3,c0010b4 <__alt_data_end+0xfc0010b4>
 c002880:	00c00084 	movi	r3,2
 c002884:	10fbaf26 	beq	r2,r3,c001744 <__alt_data_end+0xfc001744>
 c002888:	003a6d06 	br	c001240 <__alt_data_end+0xfc001240>
 c00288c:	01030074 	movhi	r4,3073
 c002890:	21009b84 	addi	r4,r4,622
 c002894:	d9003515 	stw	r4,212(sp)
 c002898:	003b5406 	br	c0015ec <__alt_data_end+0xfc0015ec>
 c00289c:	d8802a17 	ldw	r2,168(sp)
 c0028a0:	00c00184 	movi	r3,6
 c0028a4:	1880012e 	bgeu	r3,r2,c0028ac <___vfprintf_internal_r+0x1d68>
 c0028a8:	1805883a 	mov	r2,r3
 c0028ac:	d8802b15 	stw	r2,172(sp)
 c0028b0:	1000ef16 	blt	r2,zero,c002c70 <___vfprintf_internal_r+0x212c>
 c0028b4:	04030074 	movhi	r16,3073
 c0028b8:	d8802915 	stw	r2,164(sp)
 c0028bc:	dcc02e15 	stw	r19,184(sp)
 c0028c0:	d8002a15 	stw	zero,168(sp)
 c0028c4:	d8003215 	stw	zero,200(sp)
 c0028c8:	84009504 	addi	r16,r16,596
 c0028cc:	0039883a 	mov	fp,zero
 c0028d0:	003a8006 	br	c0012d4 <__alt_data_end+0xfc0012d4>
 c0028d4:	0021883a 	mov	r16,zero
 c0028d8:	003e0706 	br	c0020f8 <__alt_data_end+0xfc0020f8>
 c0028dc:	d9002d17 	ldw	r4,180(sp)
 c0028e0:	d9801e04 	addi	r6,sp,120
 c0028e4:	b80b883a 	mov	r5,r23
 c0028e8:	c0076ec0 	call	c0076ec <__sprint_r>
 c0028ec:	1039991e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c0028f0:	d8802617 	ldw	r2,152(sp)
 c0028f4:	d9403317 	ldw	r5,204(sp)
 c0028f8:	d8c02017 	ldw	r3,128(sp)
 c0028fc:	da000404 	addi	r8,sp,16
 c002900:	2885c83a 	sub	r2,r5,r2
 c002904:	003dfb06 	br	c0020f4 <__alt_data_end+0xfc0020f4>
 c002908:	9080004c 	andi	r2,r18,1
 c00290c:	103e8f1e 	bne	r2,zero,c00234c <__alt_data_end+0xfc00234c>
 c002910:	d8802117 	ldw	r2,132(sp)
 c002914:	003e9e06 	br	c002390 <__alt_data_end+0xfc002390>
 c002918:	1025883a 	mov	r18,r2
 c00291c:	0039883a 	mov	fp,zero
 c002920:	00800084 	movi	r2,2
 c002924:	003fd306 	br	c002874 <__alt_data_end+0xfc002874>
 c002928:	07000b44 	movi	fp,45
 c00292c:	df002785 	stb	fp,158(sp)
 c002930:	003a1b06 	br	c0011a0 <__alt_data_end+0xfc0011a0>
 c002934:	00c00b44 	movi	r3,45
 c002938:	d8c02785 	stb	r3,158(sp)
 c00293c:	d8802915 	stw	r2,164(sp)
 c002940:	dc802c17 	ldw	r18,176(sp)
 c002944:	d8002a15 	stw	zero,168(sp)
 c002948:	07000b44 	movi	fp,45
 c00294c:	003a5e06 	br	c0012c8 <__alt_data_end+0xfc0012c8>
 c002950:	04030074 	movhi	r16,3073
 c002954:	84008a04 	addi	r16,r16,552
 c002958:	003f4706 	br	c002678 <__alt_data_end+0xfc002678>
 c00295c:	d9002e17 	ldw	r4,184(sp)
 c002960:	d9402f17 	ldw	r5,188(sp)
 c002964:	20800017 	ldw	r2,0(r4)
 c002968:	21000104 	addi	r4,r4,4
 c00296c:	d9002e15 	stw	r4,184(sp)
 c002970:	11400015 	stw	r5,0(r2)
 c002974:	0038ab06 	br	c000c24 <__alt_data_end+0xfc000c24>
 c002978:	dd802617 	ldw	r22,152(sp)
 c00297c:	00bfff44 	movi	r2,-3
 c002980:	b0801c16 	blt	r22,r2,c0029f4 <___vfprintf_internal_r+0x1eb0>
 c002984:	d9402a17 	ldw	r5,168(sp)
 c002988:	2d801a16 	blt	r5,r22,c0029f4 <___vfprintf_internal_r+0x1eb0>
 c00298c:	dd803215 	stw	r22,200(sp)
 c002990:	003e8906 	br	c0023b8 <__alt_data_end+0xfc0023b8>
 c002994:	01030074 	movhi	r4,3073
 c002998:	21009784 	addi	r4,r4,606
 c00299c:	d9002c15 	stw	r4,176(sp)
 c0029a0:	003c9106 	br	c001be8 <__alt_data_end+0xfc001be8>
 c0029a4:	e005883a 	mov	r2,fp
 c0029a8:	003e7906 	br	c002390 <__alt_data_end+0xfc002390>
 c0029ac:	d9002a17 	ldw	r4,168(sp)
 c0029b0:	df002783 	ldbu	fp,158(sp)
 c0029b4:	dcc02e15 	stw	r19,184(sp)
 c0029b8:	d9002915 	stw	r4,164(sp)
 c0029bc:	d9002b15 	stw	r4,172(sp)
 c0029c0:	d8002a15 	stw	zero,168(sp)
 c0029c4:	d8003215 	stw	zero,200(sp)
 c0029c8:	003a3b06 	br	c0012b8 <__alt_data_end+0xfc0012b8>
 c0029cc:	9080004c 	andi	r2,r18,1
 c0029d0:	0039883a 	mov	fp,zero
 c0029d4:	10000426 	beq	r2,zero,c0029e8 <___vfprintf_internal_r+0x1ea4>
 c0029d8:	00800c04 	movi	r2,48
 c0029dc:	dc001dc4 	addi	r16,sp,119
 c0029e0:	d8801dc5 	stb	r2,119(sp)
 c0029e4:	003b6406 	br	c001778 <__alt_data_end+0xfc001778>
 c0029e8:	d8002b15 	stw	zero,172(sp)
 c0029ec:	dc001e04 	addi	r16,sp,120
 c0029f0:	003a2b06 	br	c0012a0 <__alt_data_end+0xfc0012a0>
 c0029f4:	8c7fff84 	addi	r17,r17,-2
 c0029f8:	b5bfffc4 	addi	r22,r22,-1
 c0029fc:	dd802615 	stw	r22,152(sp)
 c002a00:	dc4022c5 	stb	r17,139(sp)
 c002a04:	b000bf16 	blt	r22,zero,c002d04 <___vfprintf_internal_r+0x21c0>
 c002a08:	00800ac4 	movi	r2,43
 c002a0c:	d8802305 	stb	r2,140(sp)
 c002a10:	00800244 	movi	r2,9
 c002a14:	15807016 	blt	r2,r22,c002bd8 <___vfprintf_internal_r+0x2094>
 c002a18:	00800c04 	movi	r2,48
 c002a1c:	b5800c04 	addi	r22,r22,48
 c002a20:	d8802345 	stb	r2,141(sp)
 c002a24:	dd802385 	stb	r22,142(sp)
 c002a28:	d88023c4 	addi	r2,sp,143
 c002a2c:	df0022c4 	addi	fp,sp,139
 c002a30:	d8c03317 	ldw	r3,204(sp)
 c002a34:	1739c83a 	sub	fp,r2,fp
 c002a38:	d9003317 	ldw	r4,204(sp)
 c002a3c:	e0c7883a 	add	r3,fp,r3
 c002a40:	df003a15 	stw	fp,232(sp)
 c002a44:	d8c02b15 	stw	r3,172(sp)
 c002a48:	00800044 	movi	r2,1
 c002a4c:	1100b30e 	bge	r2,r4,c002d1c <___vfprintf_internal_r+0x21d8>
 c002a50:	d8c02b17 	ldw	r3,172(sp)
 c002a54:	18c00044 	addi	r3,r3,1
 c002a58:	d8c02b15 	stw	r3,172(sp)
 c002a5c:	1805883a 	mov	r2,r3
 c002a60:	1800ac16 	blt	r3,zero,c002d14 <___vfprintf_internal_r+0x21d0>
 c002a64:	d8003215 	stw	zero,200(sp)
 c002a68:	003e5d06 	br	c0023e0 <__alt_data_end+0xfc0023e0>
 c002a6c:	d9002d17 	ldw	r4,180(sp)
 c002a70:	d9801e04 	addi	r6,sp,120
 c002a74:	b80b883a 	mov	r5,r23
 c002a78:	c0076ec0 	call	c0076ec <__sprint_r>
 c002a7c:	1039351e 	bne	r2,zero,c000f54 <__alt_data_end+0xfc000f54>
 c002a80:	dc402617 	ldw	r17,152(sp)
 c002a84:	d8c02017 	ldw	r3,128(sp)
 c002a88:	d8801f17 	ldw	r2,124(sp)
 c002a8c:	da000404 	addi	r8,sp,16
 c002a90:	003ed606 	br	c0025ec <__alt_data_end+0xfc0025ec>
 c002a94:	182b883a 	mov	r21,r3
 c002a98:	d8002a15 	stw	zero,168(sp)
 c002a9c:	00388c06 	br	c000cd0 <__alt_data_end+0xfc000cd0>
 c002aa0:	d8802a17 	ldw	r2,168(sp)
 c002aa4:	103e071e 	bne	r2,zero,c0022c4 <__alt_data_end+0xfc0022c4>
 c002aa8:	dc002a15 	stw	r16,168(sp)
 c002aac:	003e0506 	br	c0022c4 <__alt_data_end+0xfc0022c4>
 c002ab0:	d9002a17 	ldw	r4,168(sp)
 c002ab4:	20c00044 	addi	r3,r4,1
 c002ab8:	003e0f06 	br	c0022f8 <__alt_data_end+0xfc0022f8>
 c002abc:	01400184 	movi	r5,6
 c002ac0:	d9402a15 	stw	r5,168(sp)
 c002ac4:	003dff06 	br	c0022c4 <__alt_data_end+0xfc0022c4>
 c002ac8:	d8802104 	addi	r2,sp,132
 c002acc:	d8800315 	stw	r2,12(sp)
 c002ad0:	d8802504 	addi	r2,sp,148
 c002ad4:	d8800215 	stw	r2,8(sp)
 c002ad8:	d8802604 	addi	r2,sp,152
 c002adc:	d8800115 	stw	r2,4(sp)
 c002ae0:	d8802a17 	ldw	r2,168(sp)
 c002ae4:	d9403617 	ldw	r5,216(sp)
 c002ae8:	d9002d17 	ldw	r4,180(sp)
 c002aec:	d8800015 	stw	r2,0(sp)
 c002af0:	01c000c4 	movi	r7,3
 c002af4:	980d883a 	mov	r6,r19
 c002af8:	da003d15 	stw	r8,244(sp)
 c002afc:	c0032740 	call	c003274 <_dtoa_r>
 c002b00:	d8c02a17 	ldw	r3,168(sp)
 c002b04:	da003d17 	ldw	r8,244(sp)
 c002b08:	1021883a 	mov	r16,r2
 c002b0c:	10f9883a 	add	fp,r2,r3
 c002b10:	81000007 	ldb	r4,0(r16)
 c002b14:	00800c04 	movi	r2,48
 c002b18:	20805e26 	beq	r4,r2,c002c94 <___vfprintf_internal_r+0x2150>
 c002b1c:	d8c02617 	ldw	r3,152(sp)
 c002b20:	e0f9883a 	add	fp,fp,r3
 c002b24:	003e0a06 	br	c002350 <__alt_data_end+0xfc002350>
 c002b28:	00c00b44 	movi	r3,45
 c002b2c:	24e0003c 	xorhi	r19,r4,32768
 c002b30:	d8c02905 	stb	r3,164(sp)
 c002b34:	003de906 	br	c0022dc <__alt_data_end+0xfc0022dc>
 c002b38:	d8c03217 	ldw	r3,200(sp)
 c002b3c:	00c07a0e 	bge	zero,r3,c002d28 <___vfprintf_internal_r+0x21e4>
 c002b40:	00800044 	movi	r2,1
 c002b44:	d9003317 	ldw	r4,204(sp)
 c002b48:	1105883a 	add	r2,r2,r4
 c002b4c:	d8802b15 	stw	r2,172(sp)
 c002b50:	10004e16 	blt	r2,zero,c002c8c <___vfprintf_internal_r+0x2148>
 c002b54:	044019c4 	movi	r17,103
 c002b58:	003e2106 	br	c0023e0 <__alt_data_end+0xfc0023e0>
 c002b5c:	d9002a17 	ldw	r4,168(sp)
 c002b60:	d8802104 	addi	r2,sp,132
 c002b64:	d8800315 	stw	r2,12(sp)
 c002b68:	d9000015 	stw	r4,0(sp)
 c002b6c:	d8802504 	addi	r2,sp,148
 c002b70:	d9403617 	ldw	r5,216(sp)
 c002b74:	d9002d17 	ldw	r4,180(sp)
 c002b78:	d8800215 	stw	r2,8(sp)
 c002b7c:	d8802604 	addi	r2,sp,152
 c002b80:	d8800115 	stw	r2,4(sp)
 c002b84:	01c000c4 	movi	r7,3
 c002b88:	980d883a 	mov	r6,r19
 c002b8c:	da003d15 	stw	r8,244(sp)
 c002b90:	c0032740 	call	c003274 <_dtoa_r>
 c002b94:	d8c02a17 	ldw	r3,168(sp)
 c002b98:	da003d17 	ldw	r8,244(sp)
 c002b9c:	1021883a 	mov	r16,r2
 c002ba0:	00801184 	movi	r2,70
 c002ba4:	80f9883a 	add	fp,r16,r3
 c002ba8:	88bfd926 	beq	r17,r2,c002b10 <__alt_data_end+0xfc002b10>
 c002bac:	003de806 	br	c002350 <__alt_data_end+0xfc002350>
 c002bb0:	d9002a17 	ldw	r4,168(sp)
 c002bb4:	00c04d0e 	bge	zero,r3,c002cec <___vfprintf_internal_r+0x21a8>
 c002bb8:	2000441e 	bne	r4,zero,c002ccc <___vfprintf_internal_r+0x2188>
 c002bbc:	9480004c 	andi	r18,r18,1
 c002bc0:	9000421e 	bne	r18,zero,c002ccc <___vfprintf_internal_r+0x2188>
 c002bc4:	1805883a 	mov	r2,r3
 c002bc8:	18006f16 	blt	r3,zero,c002d88 <___vfprintf_internal_r+0x2244>
 c002bcc:	d8c03217 	ldw	r3,200(sp)
 c002bd0:	d8c02b15 	stw	r3,172(sp)
 c002bd4:	003e0206 	br	c0023e0 <__alt_data_end+0xfc0023e0>
 c002bd8:	df0022c4 	addi	fp,sp,139
 c002bdc:	dc002a15 	stw	r16,168(sp)
 c002be0:	4027883a 	mov	r19,r8
 c002be4:	e021883a 	mov	r16,fp
 c002be8:	b009883a 	mov	r4,r22
 c002bec:	01400284 	movi	r5,10
 c002bf0:	c00ae000 	call	c00ae00 <__modsi3>
 c002bf4:	10800c04 	addi	r2,r2,48
 c002bf8:	843fffc4 	addi	r16,r16,-1
 c002bfc:	b009883a 	mov	r4,r22
 c002c00:	01400284 	movi	r5,10
 c002c04:	80800005 	stb	r2,0(r16)
 c002c08:	c00ad7c0 	call	c00ad7c <__divsi3>
 c002c0c:	102d883a 	mov	r22,r2
 c002c10:	00800244 	movi	r2,9
 c002c14:	15bff416 	blt	r2,r22,c002be8 <__alt_data_end+0xfc002be8>
 c002c18:	9811883a 	mov	r8,r19
 c002c1c:	b0800c04 	addi	r2,r22,48
 c002c20:	8027883a 	mov	r19,r16
 c002c24:	997fffc4 	addi	r5,r19,-1
 c002c28:	98bfffc5 	stb	r2,-1(r19)
 c002c2c:	dc002a17 	ldw	r16,168(sp)
 c002c30:	2f006d2e 	bgeu	r5,fp,c002de8 <___vfprintf_internal_r+0x22a4>
 c002c34:	d9c02384 	addi	r7,sp,142
 c002c38:	3ccfc83a 	sub	r7,r7,r19
 c002c3c:	d9002344 	addi	r4,sp,141
 c002c40:	e1cf883a 	add	r7,fp,r7
 c002c44:	00000106 	br	c002c4c <___vfprintf_internal_r+0x2108>
 c002c48:	28800003 	ldbu	r2,0(r5)
 c002c4c:	20800005 	stb	r2,0(r4)
 c002c50:	21000044 	addi	r4,r4,1
 c002c54:	29400044 	addi	r5,r5,1
 c002c58:	393ffb1e 	bne	r7,r4,c002c48 <__alt_data_end+0xfc002c48>
 c002c5c:	d8802304 	addi	r2,sp,140
 c002c60:	14c5c83a 	sub	r2,r2,r19
 c002c64:	d8c02344 	addi	r3,sp,141
 c002c68:	1885883a 	add	r2,r3,r2
 c002c6c:	003f7006 	br	c002a30 <__alt_data_end+0xfc002a30>
 c002c70:	0005883a 	mov	r2,zero
 c002c74:	003f0f06 	br	c0028b4 <__alt_data_end+0xfc0028b4>
 c002c78:	d8c03217 	ldw	r3,200(sp)
 c002c7c:	18c00044 	addi	r3,r3,1
 c002c80:	d8c02b15 	stw	r3,172(sp)
 c002c84:	1805883a 	mov	r2,r3
 c002c88:	183fb20e 	bge	r3,zero,c002b54 <__alt_data_end+0xfc002b54>
 c002c8c:	0005883a 	mov	r2,zero
 c002c90:	003fb006 	br	c002b54 <__alt_data_end+0xfc002b54>
 c002c94:	d9003617 	ldw	r4,216(sp)
 c002c98:	000d883a 	mov	r6,zero
 c002c9c:	000f883a 	mov	r7,zero
 c002ca0:	980b883a 	mov	r5,r19
 c002ca4:	d8c03c15 	stw	r3,240(sp)
 c002ca8:	da003d15 	stw	r8,244(sp)
 c002cac:	c00c1ac0 	call	c00c1ac <__eqdf2>
 c002cb0:	d8c03c17 	ldw	r3,240(sp)
 c002cb4:	da003d17 	ldw	r8,244(sp)
 c002cb8:	103f9826 	beq	r2,zero,c002b1c <__alt_data_end+0xfc002b1c>
 c002cbc:	00800044 	movi	r2,1
 c002cc0:	10c7c83a 	sub	r3,r2,r3
 c002cc4:	d8c02615 	stw	r3,152(sp)
 c002cc8:	003f9506 	br	c002b20 <__alt_data_end+0xfc002b20>
 c002ccc:	d9002a17 	ldw	r4,168(sp)
 c002cd0:	d8c03217 	ldw	r3,200(sp)
 c002cd4:	20800044 	addi	r2,r4,1
 c002cd8:	1885883a 	add	r2,r3,r2
 c002cdc:	d8802b15 	stw	r2,172(sp)
 c002ce0:	103dbf0e 	bge	r2,zero,c0023e0 <__alt_data_end+0xfc0023e0>
 c002ce4:	0005883a 	mov	r2,zero
 c002ce8:	003dbd06 	br	c0023e0 <__alt_data_end+0xfc0023e0>
 c002cec:	2000201e 	bne	r4,zero,c002d70 <___vfprintf_internal_r+0x222c>
 c002cf0:	9480004c 	andi	r18,r18,1
 c002cf4:	90001e1e 	bne	r18,zero,c002d70 <___vfprintf_internal_r+0x222c>
 c002cf8:	00800044 	movi	r2,1
 c002cfc:	d8802b15 	stw	r2,172(sp)
 c002d00:	003db706 	br	c0023e0 <__alt_data_end+0xfc0023e0>
 c002d04:	00800b44 	movi	r2,45
 c002d08:	05adc83a 	sub	r22,zero,r22
 c002d0c:	d8802305 	stb	r2,140(sp)
 c002d10:	003f3f06 	br	c002a10 <__alt_data_end+0xfc002a10>
 c002d14:	0005883a 	mov	r2,zero
 c002d18:	003f5206 	br	c002a64 <__alt_data_end+0xfc002a64>
 c002d1c:	90a4703a 	and	r18,r18,r2
 c002d20:	903f4e26 	beq	r18,zero,c002a5c <__alt_data_end+0xfc002a5c>
 c002d24:	003f4a06 	br	c002a50 <__alt_data_end+0xfc002a50>
 c002d28:	00800084 	movi	r2,2
 c002d2c:	10c5c83a 	sub	r2,r2,r3
 c002d30:	003f8406 	br	c002b44 <__alt_data_end+0xfc002b44>
 c002d34:	d9402e17 	ldw	r5,184(sp)
 c002d38:	d9002e17 	ldw	r4,184(sp)
 c002d3c:	ac400043 	ldbu	r17,1(r21)
 c002d40:	29400017 	ldw	r5,0(r5)
 c002d44:	20800104 	addi	r2,r4,4
 c002d48:	d8802e15 	stw	r2,184(sp)
 c002d4c:	d9402a15 	stw	r5,168(sp)
 c002d50:	182b883a 	mov	r21,r3
 c002d54:	283e7b0e 	bge	r5,zero,c002744 <__alt_data_end+0xfc002744>
 c002d58:	8c403fcc 	andi	r17,r17,255
 c002d5c:	017fffc4 	movi	r5,-1
 c002d60:	8c40201c 	xori	r17,r17,128
 c002d64:	d9402a15 	stw	r5,168(sp)
 c002d68:	8c7fe004 	addi	r17,r17,-128
 c002d6c:	0037d706 	br	c000ccc <__alt_data_end+0xfc000ccc>
 c002d70:	d8c02a17 	ldw	r3,168(sp)
 c002d74:	18c00084 	addi	r3,r3,2
 c002d78:	d8c02b15 	stw	r3,172(sp)
 c002d7c:	1805883a 	mov	r2,r3
 c002d80:	183d970e 	bge	r3,zero,c0023e0 <__alt_data_end+0xfc0023e0>
 c002d84:	003fd706 	br	c002ce4 <__alt_data_end+0xfc002ce4>
 c002d88:	0005883a 	mov	r2,zero
 c002d8c:	003f8f06 	br	c002bcc <__alt_data_end+0xfc002bcc>
 c002d90:	9080004c 	andi	r2,r18,1
 c002d94:	103f821e 	bne	r2,zero,c002ba0 <__alt_data_end+0xfc002ba0>
 c002d98:	d8802117 	ldw	r2,132(sp)
 c002d9c:	1405c83a 	sub	r2,r2,r16
 c002da0:	d8803315 	stw	r2,204(sp)
 c002da4:	b47ef426 	beq	r22,r17,c002978 <__alt_data_end+0xfc002978>
 c002da8:	dd802617 	ldw	r22,152(sp)
 c002dac:	003f1206 	br	c0029f8 <__alt_data_end+0xfc0029f8>
 c002db0:	d8c02b03 	ldbu	r3,172(sp)
 c002db4:	d8c02785 	stb	r3,158(sp)
 c002db8:	0038df06 	br	c001138 <__alt_data_end+0xfc001138>
 c002dbc:	d8c02b03 	ldbu	r3,172(sp)
 c002dc0:	d8c02785 	stb	r3,158(sp)
 c002dc4:	0038aa06 	br	c001070 <__alt_data_end+0xfc001070>
 c002dc8:	d8c02b03 	ldbu	r3,172(sp)
 c002dcc:	d8c02785 	stb	r3,158(sp)
 c002dd0:	003a4306 	br	c0016e0 <__alt_data_end+0xfc0016e0>
 c002dd4:	d8c02b03 	ldbu	r3,172(sp)
 c002dd8:	d8c02785 	stb	r3,158(sp)
 c002ddc:	003af506 	br	c0019b4 <__alt_data_end+0xfc0019b4>
 c002de0:	0005883a 	mov	r2,zero
 c002de4:	003d7b06 	br	c0023d4 <__alt_data_end+0xfc0023d4>
 c002de8:	d8802344 	addi	r2,sp,141
 c002dec:	003f1006 	br	c002a30 <__alt_data_end+0xfc002a30>
 c002df0:	d8c02b03 	ldbu	r3,172(sp)
 c002df4:	d8c02785 	stb	r3,158(sp)
 c002df8:	0038fd06 	br	c0011f0 <__alt_data_end+0xfc0011f0>
 c002dfc:	d8c02b03 	ldbu	r3,172(sp)
 c002e00:	d8c02785 	stb	r3,158(sp)
 c002e04:	003a9706 	br	c001864 <__alt_data_end+0xfc001864>
 c002e08:	d8c02b03 	ldbu	r3,172(sp)
 c002e0c:	d8c02785 	stb	r3,158(sp)
 c002e10:	003a1806 	br	c001674 <__alt_data_end+0xfc001674>
 c002e14:	d8c02b03 	ldbu	r3,172(sp)
 c002e18:	d8c02785 	stb	r3,158(sp)
 c002e1c:	003abe06 	br	c001918 <__alt_data_end+0xfc001918>

0c002e20 <__vfprintf_internal>:
 c002e20:	00830074 	movhi	r2,3073
 c002e24:	1087f404 	addi	r2,r2,8144
 c002e28:	300f883a 	mov	r7,r6
 c002e2c:	280d883a 	mov	r6,r5
 c002e30:	200b883a 	mov	r5,r4
 c002e34:	11000017 	ldw	r4,0(r2)
 c002e38:	c000b441 	jmpi	c000b44 <___vfprintf_internal_r>

0c002e3c <__sbprintf>:
 c002e3c:	2880030b 	ldhu	r2,12(r5)
 c002e40:	2ac01917 	ldw	r11,100(r5)
 c002e44:	2a80038b 	ldhu	r10,14(r5)
 c002e48:	2a400717 	ldw	r9,28(r5)
 c002e4c:	2a000917 	ldw	r8,36(r5)
 c002e50:	defee204 	addi	sp,sp,-1144
 c002e54:	00c10004 	movi	r3,1024
 c002e58:	dc011a15 	stw	r16,1128(sp)
 c002e5c:	10bfff4c 	andi	r2,r2,65533
 c002e60:	2821883a 	mov	r16,r5
 c002e64:	d8cb883a 	add	r5,sp,r3
 c002e68:	dc811c15 	stw	r18,1136(sp)
 c002e6c:	dc411b15 	stw	r17,1132(sp)
 c002e70:	dfc11d15 	stw	ra,1140(sp)
 c002e74:	2025883a 	mov	r18,r4
 c002e78:	d881030d 	sth	r2,1036(sp)
 c002e7c:	dac11915 	stw	r11,1124(sp)
 c002e80:	da81038d 	sth	r10,1038(sp)
 c002e84:	da410715 	stw	r9,1052(sp)
 c002e88:	da010915 	stw	r8,1060(sp)
 c002e8c:	dec10015 	stw	sp,1024(sp)
 c002e90:	dec10415 	stw	sp,1040(sp)
 c002e94:	d8c10215 	stw	r3,1032(sp)
 c002e98:	d8c10515 	stw	r3,1044(sp)
 c002e9c:	d8010615 	stw	zero,1048(sp)
 c002ea0:	c000b440 	call	c000b44 <___vfprintf_internal_r>
 c002ea4:	1023883a 	mov	r17,r2
 c002ea8:	10000416 	blt	r2,zero,c002ebc <__sbprintf+0x80>
 c002eac:	d9410004 	addi	r5,sp,1024
 c002eb0:	9009883a 	mov	r4,r18
 c002eb4:	c004b180 	call	c004b18 <_fflush_r>
 c002eb8:	10000d1e 	bne	r2,zero,c002ef0 <__sbprintf+0xb4>
 c002ebc:	d881030b 	ldhu	r2,1036(sp)
 c002ec0:	1080100c 	andi	r2,r2,64
 c002ec4:	10000326 	beq	r2,zero,c002ed4 <__sbprintf+0x98>
 c002ec8:	8080030b 	ldhu	r2,12(r16)
 c002ecc:	10801014 	ori	r2,r2,64
 c002ed0:	8080030d 	sth	r2,12(r16)
 c002ed4:	8805883a 	mov	r2,r17
 c002ed8:	dfc11d17 	ldw	ra,1140(sp)
 c002edc:	dc811c17 	ldw	r18,1136(sp)
 c002ee0:	dc411b17 	ldw	r17,1132(sp)
 c002ee4:	dc011a17 	ldw	r16,1128(sp)
 c002ee8:	dec11e04 	addi	sp,sp,1144
 c002eec:	f800283a 	ret
 c002ef0:	047fffc4 	movi	r17,-1
 c002ef4:	003ff106 	br	c002ebc <__alt_data_end+0xfc002ebc>

0c002ef8 <__swsetup_r>:
 c002ef8:	00830074 	movhi	r2,3073
 c002efc:	defffd04 	addi	sp,sp,-12
 c002f00:	1087f404 	addi	r2,r2,8144
 c002f04:	dc400115 	stw	r17,4(sp)
 c002f08:	2023883a 	mov	r17,r4
 c002f0c:	11000017 	ldw	r4,0(r2)
 c002f10:	dc000015 	stw	r16,0(sp)
 c002f14:	dfc00215 	stw	ra,8(sp)
 c002f18:	2821883a 	mov	r16,r5
 c002f1c:	20000226 	beq	r4,zero,c002f28 <__swsetup_r+0x30>
 c002f20:	20800e17 	ldw	r2,56(r4)
 c002f24:	10003126 	beq	r2,zero,c002fec <__swsetup_r+0xf4>
 c002f28:	8080030b 	ldhu	r2,12(r16)
 c002f2c:	10c0020c 	andi	r3,r2,8
 c002f30:	1009883a 	mov	r4,r2
 c002f34:	18000f26 	beq	r3,zero,c002f74 <__swsetup_r+0x7c>
 c002f38:	80c00417 	ldw	r3,16(r16)
 c002f3c:	18001526 	beq	r3,zero,c002f94 <__swsetup_r+0x9c>
 c002f40:	1100004c 	andi	r4,r2,1
 c002f44:	20001c1e 	bne	r4,zero,c002fb8 <__swsetup_r+0xc0>
 c002f48:	1080008c 	andi	r2,r2,2
 c002f4c:	1000291e 	bne	r2,zero,c002ff4 <__swsetup_r+0xfc>
 c002f50:	80800517 	ldw	r2,20(r16)
 c002f54:	80800215 	stw	r2,8(r16)
 c002f58:	18001c26 	beq	r3,zero,c002fcc <__swsetup_r+0xd4>
 c002f5c:	0005883a 	mov	r2,zero
 c002f60:	dfc00217 	ldw	ra,8(sp)
 c002f64:	dc400117 	ldw	r17,4(sp)
 c002f68:	dc000017 	ldw	r16,0(sp)
 c002f6c:	dec00304 	addi	sp,sp,12
 c002f70:	f800283a 	ret
 c002f74:	2080040c 	andi	r2,r4,16
 c002f78:	10002e26 	beq	r2,zero,c003034 <__swsetup_r+0x13c>
 c002f7c:	2080010c 	andi	r2,r4,4
 c002f80:	10001e1e 	bne	r2,zero,c002ffc <__swsetup_r+0x104>
 c002f84:	80c00417 	ldw	r3,16(r16)
 c002f88:	20800214 	ori	r2,r4,8
 c002f8c:	8080030d 	sth	r2,12(r16)
 c002f90:	183feb1e 	bne	r3,zero,c002f40 <__alt_data_end+0xfc002f40>
 c002f94:	1100a00c 	andi	r4,r2,640
 c002f98:	01408004 	movi	r5,512
 c002f9c:	217fe826 	beq	r4,r5,c002f40 <__alt_data_end+0xfc002f40>
 c002fa0:	800b883a 	mov	r5,r16
 c002fa4:	8809883a 	mov	r4,r17
 c002fa8:	c0055ec0 	call	c0055ec <__smakebuf_r>
 c002fac:	8080030b 	ldhu	r2,12(r16)
 c002fb0:	80c00417 	ldw	r3,16(r16)
 c002fb4:	003fe206 	br	c002f40 <__alt_data_end+0xfc002f40>
 c002fb8:	80800517 	ldw	r2,20(r16)
 c002fbc:	80000215 	stw	zero,8(r16)
 c002fc0:	0085c83a 	sub	r2,zero,r2
 c002fc4:	80800615 	stw	r2,24(r16)
 c002fc8:	183fe41e 	bne	r3,zero,c002f5c <__alt_data_end+0xfc002f5c>
 c002fcc:	80c0030b 	ldhu	r3,12(r16)
 c002fd0:	0005883a 	mov	r2,zero
 c002fd4:	1900200c 	andi	r4,r3,128
 c002fd8:	203fe126 	beq	r4,zero,c002f60 <__alt_data_end+0xfc002f60>
 c002fdc:	18c01014 	ori	r3,r3,64
 c002fe0:	80c0030d 	sth	r3,12(r16)
 c002fe4:	00bfffc4 	movi	r2,-1
 c002fe8:	003fdd06 	br	c002f60 <__alt_data_end+0xfc002f60>
 c002fec:	c004f040 	call	c004f04 <__sinit>
 c002ff0:	003fcd06 	br	c002f28 <__alt_data_end+0xfc002f28>
 c002ff4:	0005883a 	mov	r2,zero
 c002ff8:	003fd606 	br	c002f54 <__alt_data_end+0xfc002f54>
 c002ffc:	81400c17 	ldw	r5,48(r16)
 c003000:	28000626 	beq	r5,zero,c00301c <__swsetup_r+0x124>
 c003004:	80801004 	addi	r2,r16,64
 c003008:	28800326 	beq	r5,r2,c003018 <__swsetup_r+0x120>
 c00300c:	8809883a 	mov	r4,r17
 c003010:	c0050780 	call	c005078 <_free_r>
 c003014:	8100030b 	ldhu	r4,12(r16)
 c003018:	80000c15 	stw	zero,48(r16)
 c00301c:	80c00417 	ldw	r3,16(r16)
 c003020:	00bff6c4 	movi	r2,-37
 c003024:	1108703a 	and	r4,r2,r4
 c003028:	80000115 	stw	zero,4(r16)
 c00302c:	80c00015 	stw	r3,0(r16)
 c003030:	003fd506 	br	c002f88 <__alt_data_end+0xfc002f88>
 c003034:	00800244 	movi	r2,9
 c003038:	88800015 	stw	r2,0(r17)
 c00303c:	20801014 	ori	r2,r4,64
 c003040:	8080030d 	sth	r2,12(r16)
 c003044:	00bfffc4 	movi	r2,-1
 c003048:	003fc506 	br	c002f60 <__alt_data_end+0xfc002f60>

0c00304c <quorem>:
 c00304c:	defff204 	addi	sp,sp,-56
 c003050:	ddc00b15 	stw	r23,44(sp)
 c003054:	20800417 	ldw	r2,16(r4)
 c003058:	2dc00417 	ldw	r23,16(r5)
 c00305c:	dfc00d15 	stw	ra,52(sp)
 c003060:	df000c15 	stw	fp,48(sp)
 c003064:	dd800a15 	stw	r22,40(sp)
 c003068:	dd400915 	stw	r21,36(sp)
 c00306c:	dd000815 	stw	r20,32(sp)
 c003070:	dcc00715 	stw	r19,28(sp)
 c003074:	dc800615 	stw	r18,24(sp)
 c003078:	dc400515 	stw	r17,20(sp)
 c00307c:	dc000415 	stw	r16,16(sp)
 c003080:	15c07a16 	blt	r2,r23,c00326c <quorem+0x220>
 c003084:	bdffffc4 	addi	r23,r23,-1
 c003088:	bde9883a 	add	r20,r23,r23
 c00308c:	28c00504 	addi	r3,r5,20
 c003090:	a529883a 	add	r20,r20,r20
 c003094:	1d39883a 	add	fp,r3,r20
 c003098:	24c00504 	addi	r19,r4,20
 c00309c:	d9400215 	stw	r5,8(sp)
 c0030a0:	9d29883a 	add	r20,r19,r20
 c0030a4:	e1400017 	ldw	r5,0(fp)
 c0030a8:	d9000015 	stw	r4,0(sp)
 c0030ac:	a1000017 	ldw	r4,0(r20)
 c0030b0:	29400044 	addi	r5,r5,1
 c0030b4:	d8c00115 	stw	r3,4(sp)
 c0030b8:	dd000315 	stw	r20,12(sp)
 c0030bc:	c00ae740 	call	c00ae74 <__udivsi3>
 c0030c0:	1025883a 	mov	r18,r2
 c0030c4:	10003026 	beq	r2,zero,c003188 <quorem+0x13c>
 c0030c8:	dc400117 	ldw	r17,4(sp)
 c0030cc:	9829883a 	mov	r20,r19
 c0030d0:	002d883a 	mov	r22,zero
 c0030d4:	0021883a 	mov	r16,zero
 c0030d8:	8d400017 	ldw	r21,0(r17)
 c0030dc:	900b883a 	mov	r5,r18
 c0030e0:	8c400104 	addi	r17,r17,4
 c0030e4:	a93fffcc 	andi	r4,r21,65535
 c0030e8:	c0009680 	call	c000968 <__mulsi3>
 c0030ec:	a808d43a 	srli	r4,r21,16
 c0030f0:	900b883a 	mov	r5,r18
 c0030f4:	15ad883a 	add	r22,r2,r22
 c0030f8:	c0009680 	call	c000968 <__mulsi3>
 c0030fc:	a1000017 	ldw	r4,0(r20)
 c003100:	b00cd43a 	srli	r6,r22,16
 c003104:	b0ffffcc 	andi	r3,r22,65535
 c003108:	217fffcc 	andi	r5,r4,65535
 c00310c:	2c21883a 	add	r16,r5,r16
 c003110:	80c7c83a 	sub	r3,r16,r3
 c003114:	2008d43a 	srli	r4,r4,16
 c003118:	1185883a 	add	r2,r2,r6
 c00311c:	1821d43a 	srai	r16,r3,16
 c003120:	117fffcc 	andi	r5,r2,65535
 c003124:	2149c83a 	sub	r4,r4,r5
 c003128:	2421883a 	add	r16,r4,r16
 c00312c:	8008943a 	slli	r4,r16,16
 c003130:	18ffffcc 	andi	r3,r3,65535
 c003134:	102cd43a 	srli	r22,r2,16
 c003138:	20c8b03a 	or	r4,r4,r3
 c00313c:	a1000015 	stw	r4,0(r20)
 c003140:	8021d43a 	srai	r16,r16,16
 c003144:	a5000104 	addi	r20,r20,4
 c003148:	e47fe32e 	bgeu	fp,r17,c0030d8 <__alt_data_end+0xfc0030d8>
 c00314c:	d8c00317 	ldw	r3,12(sp)
 c003150:	18800017 	ldw	r2,0(r3)
 c003154:	10000c1e 	bne	r2,zero,c003188 <quorem+0x13c>
 c003158:	18bfff04 	addi	r2,r3,-4
 c00315c:	9880082e 	bgeu	r19,r2,c003180 <quorem+0x134>
 c003160:	18ffff17 	ldw	r3,-4(r3)
 c003164:	18000326 	beq	r3,zero,c003174 <quorem+0x128>
 c003168:	00000506 	br	c003180 <quorem+0x134>
 c00316c:	10c00017 	ldw	r3,0(r2)
 c003170:	1800031e 	bne	r3,zero,c003180 <quorem+0x134>
 c003174:	10bfff04 	addi	r2,r2,-4
 c003178:	bdffffc4 	addi	r23,r23,-1
 c00317c:	98bffb36 	bltu	r19,r2,c00316c <__alt_data_end+0xfc00316c>
 c003180:	d8c00017 	ldw	r3,0(sp)
 c003184:	1dc00415 	stw	r23,16(r3)
 c003188:	d9400217 	ldw	r5,8(sp)
 c00318c:	d9000017 	ldw	r4,0(sp)
 c003190:	c006b440 	call	c006b44 <__mcmp>
 c003194:	10002816 	blt	r2,zero,c003238 <quorem+0x1ec>
 c003198:	dc400117 	ldw	r17,4(sp)
 c00319c:	94800044 	addi	r18,r18,1
 c0031a0:	980d883a 	mov	r6,r19
 c0031a4:	0007883a 	mov	r3,zero
 c0031a8:	31000017 	ldw	r4,0(r6)
 c0031ac:	89400017 	ldw	r5,0(r17)
 c0031b0:	31800104 	addi	r6,r6,4
 c0031b4:	20bfffcc 	andi	r2,r4,65535
 c0031b8:	10c7883a 	add	r3,r2,r3
 c0031bc:	28bfffcc 	andi	r2,r5,65535
 c0031c0:	1885c83a 	sub	r2,r3,r2
 c0031c4:	280ad43a 	srli	r5,r5,16
 c0031c8:	2008d43a 	srli	r4,r4,16
 c0031cc:	1007d43a 	srai	r3,r2,16
 c0031d0:	10bfffcc 	andi	r2,r2,65535
 c0031d4:	2149c83a 	sub	r4,r4,r5
 c0031d8:	20c9883a 	add	r4,r4,r3
 c0031dc:	200a943a 	slli	r5,r4,16
 c0031e0:	8c400104 	addi	r17,r17,4
 c0031e4:	2007d43a 	srai	r3,r4,16
 c0031e8:	2884b03a 	or	r2,r5,r2
 c0031ec:	30bfff15 	stw	r2,-4(r6)
 c0031f0:	e47fed2e 	bgeu	fp,r17,c0031a8 <__alt_data_end+0xfc0031a8>
 c0031f4:	bdc5883a 	add	r2,r23,r23
 c0031f8:	1085883a 	add	r2,r2,r2
 c0031fc:	9887883a 	add	r3,r19,r2
 c003200:	18800017 	ldw	r2,0(r3)
 c003204:	10000c1e 	bne	r2,zero,c003238 <quorem+0x1ec>
 c003208:	18bfff04 	addi	r2,r3,-4
 c00320c:	9880082e 	bgeu	r19,r2,c003230 <quorem+0x1e4>
 c003210:	18ffff17 	ldw	r3,-4(r3)
 c003214:	18000326 	beq	r3,zero,c003224 <quorem+0x1d8>
 c003218:	00000506 	br	c003230 <quorem+0x1e4>
 c00321c:	10c00017 	ldw	r3,0(r2)
 c003220:	1800031e 	bne	r3,zero,c003230 <quorem+0x1e4>
 c003224:	10bfff04 	addi	r2,r2,-4
 c003228:	bdffffc4 	addi	r23,r23,-1
 c00322c:	98bffb36 	bltu	r19,r2,c00321c <__alt_data_end+0xfc00321c>
 c003230:	d8c00017 	ldw	r3,0(sp)
 c003234:	1dc00415 	stw	r23,16(r3)
 c003238:	9005883a 	mov	r2,r18
 c00323c:	dfc00d17 	ldw	ra,52(sp)
 c003240:	df000c17 	ldw	fp,48(sp)
 c003244:	ddc00b17 	ldw	r23,44(sp)
 c003248:	dd800a17 	ldw	r22,40(sp)
 c00324c:	dd400917 	ldw	r21,36(sp)
 c003250:	dd000817 	ldw	r20,32(sp)
 c003254:	dcc00717 	ldw	r19,28(sp)
 c003258:	dc800617 	ldw	r18,24(sp)
 c00325c:	dc400517 	ldw	r17,20(sp)
 c003260:	dc000417 	ldw	r16,16(sp)
 c003264:	dec00e04 	addi	sp,sp,56
 c003268:	f800283a 	ret
 c00326c:	0005883a 	mov	r2,zero
 c003270:	003ff206 	br	c00323c <__alt_data_end+0xfc00323c>

0c003274 <_dtoa_r>:
 c003274:	20801017 	ldw	r2,64(r4)
 c003278:	deffde04 	addi	sp,sp,-136
 c00327c:	df002015 	stw	fp,128(sp)
 c003280:	dcc01b15 	stw	r19,108(sp)
 c003284:	dc801a15 	stw	r18,104(sp)
 c003288:	dc401915 	stw	r17,100(sp)
 c00328c:	dc001815 	stw	r16,96(sp)
 c003290:	dfc02115 	stw	ra,132(sp)
 c003294:	ddc01f15 	stw	r23,124(sp)
 c003298:	dd801e15 	stw	r22,120(sp)
 c00329c:	dd401d15 	stw	r21,116(sp)
 c0032a0:	dd001c15 	stw	r20,112(sp)
 c0032a4:	d9c00315 	stw	r7,12(sp)
 c0032a8:	2039883a 	mov	fp,r4
 c0032ac:	3023883a 	mov	r17,r6
 c0032b0:	2825883a 	mov	r18,r5
 c0032b4:	dc002417 	ldw	r16,144(sp)
 c0032b8:	3027883a 	mov	r19,r6
 c0032bc:	10000826 	beq	r2,zero,c0032e0 <_dtoa_r+0x6c>
 c0032c0:	21801117 	ldw	r6,68(r4)
 c0032c4:	00c00044 	movi	r3,1
 c0032c8:	100b883a 	mov	r5,r2
 c0032cc:	1986983a 	sll	r3,r3,r6
 c0032d0:	11800115 	stw	r6,4(r2)
 c0032d4:	10c00215 	stw	r3,8(r2)
 c0032d8:	c0062680 	call	c006268 <_Bfree>
 c0032dc:	e0001015 	stw	zero,64(fp)
 c0032e0:	88002e16 	blt	r17,zero,c00339c <_dtoa_r+0x128>
 c0032e4:	80000015 	stw	zero,0(r16)
 c0032e8:	889ffc2c 	andhi	r2,r17,32752
 c0032ec:	00dffc34 	movhi	r3,32752
 c0032f0:	10c01c26 	beq	r2,r3,c003364 <_dtoa_r+0xf0>
 c0032f4:	000d883a 	mov	r6,zero
 c0032f8:	000f883a 	mov	r7,zero
 c0032fc:	9009883a 	mov	r4,r18
 c003300:	980b883a 	mov	r5,r19
 c003304:	c00c1ac0 	call	c00c1ac <__eqdf2>
 c003308:	10002b1e 	bne	r2,zero,c0033b8 <_dtoa_r+0x144>
 c00330c:	d9c02317 	ldw	r7,140(sp)
 c003310:	00800044 	movi	r2,1
 c003314:	38800015 	stw	r2,0(r7)
 c003318:	d8802517 	ldw	r2,148(sp)
 c00331c:	10019e26 	beq	r2,zero,c003998 <_dtoa_r+0x724>
 c003320:	d8c02517 	ldw	r3,148(sp)
 c003324:	00830074 	movhi	r2,3073
 c003328:	10809744 	addi	r2,r2,605
 c00332c:	18800015 	stw	r2,0(r3)
 c003330:	10bfffc4 	addi	r2,r2,-1
 c003334:	dfc02117 	ldw	ra,132(sp)
 c003338:	df002017 	ldw	fp,128(sp)
 c00333c:	ddc01f17 	ldw	r23,124(sp)
 c003340:	dd801e17 	ldw	r22,120(sp)
 c003344:	dd401d17 	ldw	r21,116(sp)
 c003348:	dd001c17 	ldw	r20,112(sp)
 c00334c:	dcc01b17 	ldw	r19,108(sp)
 c003350:	dc801a17 	ldw	r18,104(sp)
 c003354:	dc401917 	ldw	r17,100(sp)
 c003358:	dc001817 	ldw	r16,96(sp)
 c00335c:	dec02204 	addi	sp,sp,136
 c003360:	f800283a 	ret
 c003364:	d8c02317 	ldw	r3,140(sp)
 c003368:	0089c3c4 	movi	r2,9999
 c00336c:	18800015 	stw	r2,0(r3)
 c003370:	90017726 	beq	r18,zero,c003950 <_dtoa_r+0x6dc>
 c003374:	00830074 	movhi	r2,3073
 c003378:	1080a304 	addi	r2,r2,652
 c00337c:	d9002517 	ldw	r4,148(sp)
 c003380:	203fec26 	beq	r4,zero,c003334 <__alt_data_end+0xfc003334>
 c003384:	10c000c7 	ldb	r3,3(r2)
 c003388:	1801781e 	bne	r3,zero,c00396c <_dtoa_r+0x6f8>
 c00338c:	10c000c4 	addi	r3,r2,3
 c003390:	d9802517 	ldw	r6,148(sp)
 c003394:	30c00015 	stw	r3,0(r6)
 c003398:	003fe606 	br	c003334 <__alt_data_end+0xfc003334>
 c00339c:	04e00034 	movhi	r19,32768
 c0033a0:	9cffffc4 	addi	r19,r19,-1
 c0033a4:	00800044 	movi	r2,1
 c0033a8:	8ce6703a 	and	r19,r17,r19
 c0033ac:	80800015 	stw	r2,0(r16)
 c0033b0:	9823883a 	mov	r17,r19
 c0033b4:	003fcc06 	br	c0032e8 <__alt_data_end+0xfc0032e8>
 c0033b8:	d8800204 	addi	r2,sp,8
 c0033bc:	d8800015 	stw	r2,0(sp)
 c0033c0:	d9c00104 	addi	r7,sp,4
 c0033c4:	900b883a 	mov	r5,r18
 c0033c8:	980d883a 	mov	r6,r19
 c0033cc:	e009883a 	mov	r4,fp
 c0033d0:	8820d53a 	srli	r16,r17,20
 c0033d4:	c006f100 	call	c006f10 <__d2b>
 c0033d8:	d8800915 	stw	r2,36(sp)
 c0033dc:	8001651e 	bne	r16,zero,c003974 <_dtoa_r+0x700>
 c0033e0:	dd800217 	ldw	r22,8(sp)
 c0033e4:	dc000117 	ldw	r16,4(sp)
 c0033e8:	00800804 	movi	r2,32
 c0033ec:	b421883a 	add	r16,r22,r16
 c0033f0:	80c10c84 	addi	r3,r16,1074
 c0033f4:	10c2d10e 	bge	r2,r3,c003f3c <_dtoa_r+0xcc8>
 c0033f8:	00801004 	movi	r2,64
 c0033fc:	81010484 	addi	r4,r16,1042
 c003400:	10c7c83a 	sub	r3,r2,r3
 c003404:	9108d83a 	srl	r4,r18,r4
 c003408:	88e2983a 	sll	r17,r17,r3
 c00340c:	2448b03a 	or	r4,r4,r17
 c003410:	c00d6c80 	call	c00d6c8 <__floatunsidf>
 c003414:	017f8434 	movhi	r5,65040
 c003418:	01800044 	movi	r6,1
 c00341c:	1009883a 	mov	r4,r2
 c003420:	194b883a 	add	r5,r3,r5
 c003424:	843fffc4 	addi	r16,r16,-1
 c003428:	d9801115 	stw	r6,68(sp)
 c00342c:	000d883a 	mov	r6,zero
 c003430:	01cffe34 	movhi	r7,16376
 c003434:	c00cc700 	call	c00cc70 <__subdf3>
 c003438:	0198dbf4 	movhi	r6,25455
 c00343c:	01cff4f4 	movhi	r7,16339
 c003440:	3190d844 	addi	r6,r6,17249
 c003444:	39e1e9c4 	addi	r7,r7,-30809
 c003448:	1009883a 	mov	r4,r2
 c00344c:	180b883a 	mov	r5,r3
 c003450:	c00c4040 	call	c00c404 <__muldf3>
 c003454:	01a2d874 	movhi	r6,35681
 c003458:	01cff1f4 	movhi	r7,16327
 c00345c:	31b22cc4 	addi	r6,r6,-14157
 c003460:	39e28a04 	addi	r7,r7,-30168
 c003464:	180b883a 	mov	r5,r3
 c003468:	1009883a 	mov	r4,r2
 c00346c:	c00af300 	call	c00af30 <__adddf3>
 c003470:	8009883a 	mov	r4,r16
 c003474:	1029883a 	mov	r20,r2
 c003478:	1823883a 	mov	r17,r3
 c00347c:	c00d5ec0 	call	c00d5ec <__floatsidf>
 c003480:	019427f4 	movhi	r6,20639
 c003484:	01cff4f4 	movhi	r7,16339
 c003488:	319e7ec4 	addi	r6,r6,31227
 c00348c:	39d104c4 	addi	r7,r7,17427
 c003490:	1009883a 	mov	r4,r2
 c003494:	180b883a 	mov	r5,r3
 c003498:	c00c4040 	call	c00c404 <__muldf3>
 c00349c:	100d883a 	mov	r6,r2
 c0034a0:	180f883a 	mov	r7,r3
 c0034a4:	a009883a 	mov	r4,r20
 c0034a8:	880b883a 	mov	r5,r17
 c0034ac:	c00af300 	call	c00af30 <__adddf3>
 c0034b0:	1009883a 	mov	r4,r2
 c0034b4:	180b883a 	mov	r5,r3
 c0034b8:	1029883a 	mov	r20,r2
 c0034bc:	1823883a 	mov	r17,r3
 c0034c0:	c00d56c0 	call	c00d56c <__fixdfsi>
 c0034c4:	000d883a 	mov	r6,zero
 c0034c8:	000f883a 	mov	r7,zero
 c0034cc:	a009883a 	mov	r4,r20
 c0034d0:	880b883a 	mov	r5,r17
 c0034d4:	d8800515 	stw	r2,20(sp)
 c0034d8:	c00c3100 	call	c00c310 <__ledf2>
 c0034dc:	10028716 	blt	r2,zero,c003efc <_dtoa_r+0xc88>
 c0034e0:	d8c00517 	ldw	r3,20(sp)
 c0034e4:	00800584 	movi	r2,22
 c0034e8:	10c27536 	bltu	r2,r3,c003ec0 <_dtoa_r+0xc4c>
 c0034ec:	180490fa 	slli	r2,r3,3
 c0034f0:	00c30074 	movhi	r3,3073
 c0034f4:	18c0bf04 	addi	r3,r3,764
 c0034f8:	1885883a 	add	r2,r3,r2
 c0034fc:	11000017 	ldw	r4,0(r2)
 c003500:	11400117 	ldw	r5,4(r2)
 c003504:	900d883a 	mov	r6,r18
 c003508:	980f883a 	mov	r7,r19
 c00350c:	c00c2340 	call	c00c234 <__gedf2>
 c003510:	00828d0e 	bge	zero,r2,c003f48 <_dtoa_r+0xcd4>
 c003514:	d9000517 	ldw	r4,20(sp)
 c003518:	d8000e15 	stw	zero,56(sp)
 c00351c:	213fffc4 	addi	r4,r4,-1
 c003520:	d9000515 	stw	r4,20(sp)
 c003524:	b42dc83a 	sub	r22,r22,r16
 c003528:	b5bfffc4 	addi	r22,r22,-1
 c00352c:	b0026f16 	blt	r22,zero,c003eec <_dtoa_r+0xc78>
 c003530:	d8000815 	stw	zero,32(sp)
 c003534:	d9c00517 	ldw	r7,20(sp)
 c003538:	38026416 	blt	r7,zero,c003ecc <_dtoa_r+0xc58>
 c00353c:	b1ed883a 	add	r22,r22,r7
 c003540:	d9c00d15 	stw	r7,52(sp)
 c003544:	d8000a15 	stw	zero,40(sp)
 c003548:	d9800317 	ldw	r6,12(sp)
 c00354c:	00800244 	movi	r2,9
 c003550:	11811436 	bltu	r2,r6,c0039a4 <_dtoa_r+0x730>
 c003554:	00800144 	movi	r2,5
 c003558:	1184e10e 	bge	r2,r6,c0048e0 <_dtoa_r+0x166c>
 c00355c:	31bfff04 	addi	r6,r6,-4
 c003560:	d9800315 	stw	r6,12(sp)
 c003564:	0023883a 	mov	r17,zero
 c003568:	d9800317 	ldw	r6,12(sp)
 c00356c:	008000c4 	movi	r2,3
 c003570:	30836726 	beq	r6,r2,c004310 <_dtoa_r+0x109c>
 c003574:	1183410e 	bge	r2,r6,c00427c <_dtoa_r+0x1008>
 c003578:	d9c00317 	ldw	r7,12(sp)
 c00357c:	00800104 	movi	r2,4
 c003580:	38827c26 	beq	r7,r2,c003f74 <_dtoa_r+0xd00>
 c003584:	00800144 	movi	r2,5
 c003588:	3884c41e 	bne	r7,r2,c00489c <_dtoa_r+0x1628>
 c00358c:	00800044 	movi	r2,1
 c003590:	d8800b15 	stw	r2,44(sp)
 c003594:	d8c00517 	ldw	r3,20(sp)
 c003598:	d9002217 	ldw	r4,136(sp)
 c00359c:	1907883a 	add	r3,r3,r4
 c0035a0:	19800044 	addi	r6,r3,1
 c0035a4:	d8c00c15 	stw	r3,48(sp)
 c0035a8:	d9800615 	stw	r6,24(sp)
 c0035ac:	0183a40e 	bge	zero,r6,c004440 <_dtoa_r+0x11cc>
 c0035b0:	d9800617 	ldw	r6,24(sp)
 c0035b4:	3021883a 	mov	r16,r6
 c0035b8:	e0001115 	stw	zero,68(fp)
 c0035bc:	008005c4 	movi	r2,23
 c0035c0:	1184c92e 	bgeu	r2,r6,c0048e8 <_dtoa_r+0x1674>
 c0035c4:	00c00044 	movi	r3,1
 c0035c8:	00800104 	movi	r2,4
 c0035cc:	1085883a 	add	r2,r2,r2
 c0035d0:	11000504 	addi	r4,r2,20
 c0035d4:	180b883a 	mov	r5,r3
 c0035d8:	18c00044 	addi	r3,r3,1
 c0035dc:	313ffb2e 	bgeu	r6,r4,c0035cc <__alt_data_end+0xfc0035cc>
 c0035e0:	e1401115 	stw	r5,68(fp)
 c0035e4:	e009883a 	mov	r4,fp
 c0035e8:	c0061c00 	call	c0061c0 <_Balloc>
 c0035ec:	d8800715 	stw	r2,28(sp)
 c0035f0:	e0801015 	stw	r2,64(fp)
 c0035f4:	00800384 	movi	r2,14
 c0035f8:	1400f736 	bltu	r2,r16,c0039d8 <_dtoa_r+0x764>
 c0035fc:	8800f626 	beq	r17,zero,c0039d8 <_dtoa_r+0x764>
 c003600:	d9c00517 	ldw	r7,20(sp)
 c003604:	01c39a0e 	bge	zero,r7,c004470 <_dtoa_r+0x11fc>
 c003608:	388003cc 	andi	r2,r7,15
 c00360c:	100490fa 	slli	r2,r2,3
 c003610:	382bd13a 	srai	r21,r7,4
 c003614:	00c30074 	movhi	r3,3073
 c003618:	18c0bf04 	addi	r3,r3,764
 c00361c:	1885883a 	add	r2,r3,r2
 c003620:	a8c0040c 	andi	r3,r21,16
 c003624:	12400017 	ldw	r9,0(r2)
 c003628:	12000117 	ldw	r8,4(r2)
 c00362c:	18037926 	beq	r3,zero,c004414 <_dtoa_r+0x11a0>
 c003630:	00830074 	movhi	r2,3073
 c003634:	1080b504 	addi	r2,r2,724
 c003638:	11800817 	ldw	r6,32(r2)
 c00363c:	11c00917 	ldw	r7,36(r2)
 c003640:	9009883a 	mov	r4,r18
 c003644:	980b883a 	mov	r5,r19
 c003648:	da001715 	stw	r8,92(sp)
 c00364c:	da401615 	stw	r9,88(sp)
 c003650:	c00b7dc0 	call	c00b7dc <__divdf3>
 c003654:	da001717 	ldw	r8,92(sp)
 c003658:	da401617 	ldw	r9,88(sp)
 c00365c:	ad4003cc 	andi	r21,r21,15
 c003660:	040000c4 	movi	r16,3
 c003664:	1023883a 	mov	r17,r2
 c003668:	1829883a 	mov	r20,r3
 c00366c:	a8001126 	beq	r21,zero,c0036b4 <_dtoa_r+0x440>
 c003670:	05c30074 	movhi	r23,3073
 c003674:	bdc0b504 	addi	r23,r23,724
 c003678:	4805883a 	mov	r2,r9
 c00367c:	4007883a 	mov	r3,r8
 c003680:	a980004c 	andi	r6,r21,1
 c003684:	1009883a 	mov	r4,r2
 c003688:	a82bd07a 	srai	r21,r21,1
 c00368c:	180b883a 	mov	r5,r3
 c003690:	30000426 	beq	r6,zero,c0036a4 <_dtoa_r+0x430>
 c003694:	b9800017 	ldw	r6,0(r23)
 c003698:	b9c00117 	ldw	r7,4(r23)
 c00369c:	84000044 	addi	r16,r16,1
 c0036a0:	c00c4040 	call	c00c404 <__muldf3>
 c0036a4:	bdc00204 	addi	r23,r23,8
 c0036a8:	a83ff51e 	bne	r21,zero,c003680 <__alt_data_end+0xfc003680>
 c0036ac:	1013883a 	mov	r9,r2
 c0036b0:	1811883a 	mov	r8,r3
 c0036b4:	480d883a 	mov	r6,r9
 c0036b8:	400f883a 	mov	r7,r8
 c0036bc:	8809883a 	mov	r4,r17
 c0036c0:	a00b883a 	mov	r5,r20
 c0036c4:	c00b7dc0 	call	c00b7dc <__divdf3>
 c0036c8:	d8800f15 	stw	r2,60(sp)
 c0036cc:	d8c01015 	stw	r3,64(sp)
 c0036d0:	d8c00e17 	ldw	r3,56(sp)
 c0036d4:	18000626 	beq	r3,zero,c0036f0 <_dtoa_r+0x47c>
 c0036d8:	d9000f17 	ldw	r4,60(sp)
 c0036dc:	d9401017 	ldw	r5,64(sp)
 c0036e0:	000d883a 	mov	r6,zero
 c0036e4:	01cffc34 	movhi	r7,16368
 c0036e8:	c00c3100 	call	c00c310 <__ledf2>
 c0036ec:	10040b16 	blt	r2,zero,c00471c <_dtoa_r+0x14a8>
 c0036f0:	8009883a 	mov	r4,r16
 c0036f4:	c00d5ec0 	call	c00d5ec <__floatsidf>
 c0036f8:	d9800f17 	ldw	r6,60(sp)
 c0036fc:	d9c01017 	ldw	r7,64(sp)
 c003700:	1009883a 	mov	r4,r2
 c003704:	180b883a 	mov	r5,r3
 c003708:	c00c4040 	call	c00c404 <__muldf3>
 c00370c:	000d883a 	mov	r6,zero
 c003710:	01d00734 	movhi	r7,16412
 c003714:	1009883a 	mov	r4,r2
 c003718:	180b883a 	mov	r5,r3
 c00371c:	c00af300 	call	c00af30 <__adddf3>
 c003720:	1021883a 	mov	r16,r2
 c003724:	d8800617 	ldw	r2,24(sp)
 c003728:	047f3034 	movhi	r17,64704
 c00372c:	1c63883a 	add	r17,r3,r17
 c003730:	10031826 	beq	r2,zero,c004394 <_dtoa_r+0x1120>
 c003734:	d8c00517 	ldw	r3,20(sp)
 c003738:	db000617 	ldw	r12,24(sp)
 c00373c:	d8c01315 	stw	r3,76(sp)
 c003740:	d9000b17 	ldw	r4,44(sp)
 c003744:	20038f26 	beq	r4,zero,c004584 <_dtoa_r+0x1310>
 c003748:	60bfffc4 	addi	r2,r12,-1
 c00374c:	100490fa 	slli	r2,r2,3
 c003750:	00c30074 	movhi	r3,3073
 c003754:	18c0bf04 	addi	r3,r3,764
 c003758:	1885883a 	add	r2,r3,r2
 c00375c:	11800017 	ldw	r6,0(r2)
 c003760:	11c00117 	ldw	r7,4(r2)
 c003764:	d8800717 	ldw	r2,28(sp)
 c003768:	0009883a 	mov	r4,zero
 c00376c:	014ff834 	movhi	r5,16352
 c003770:	db001615 	stw	r12,88(sp)
 c003774:	15c00044 	addi	r23,r2,1
 c003778:	c00b7dc0 	call	c00b7dc <__divdf3>
 c00377c:	800d883a 	mov	r6,r16
 c003780:	880f883a 	mov	r7,r17
 c003784:	1009883a 	mov	r4,r2
 c003788:	180b883a 	mov	r5,r3
 c00378c:	c00cc700 	call	c00cc70 <__subdf3>
 c003790:	d9401017 	ldw	r5,64(sp)
 c003794:	d9000f17 	ldw	r4,60(sp)
 c003798:	102b883a 	mov	r21,r2
 c00379c:	d8c01215 	stw	r3,72(sp)
 c0037a0:	c00d56c0 	call	c00d56c <__fixdfsi>
 c0037a4:	1009883a 	mov	r4,r2
 c0037a8:	1029883a 	mov	r20,r2
 c0037ac:	c00d5ec0 	call	c00d5ec <__floatsidf>
 c0037b0:	d9000f17 	ldw	r4,60(sp)
 c0037b4:	d9401017 	ldw	r5,64(sp)
 c0037b8:	100d883a 	mov	r6,r2
 c0037bc:	180f883a 	mov	r7,r3
 c0037c0:	c00cc700 	call	c00cc70 <__subdf3>
 c0037c4:	1823883a 	mov	r17,r3
 c0037c8:	d8c00717 	ldw	r3,28(sp)
 c0037cc:	d9401217 	ldw	r5,72(sp)
 c0037d0:	a2000c04 	addi	r8,r20,48
 c0037d4:	1021883a 	mov	r16,r2
 c0037d8:	1a000005 	stb	r8,0(r3)
 c0037dc:	800d883a 	mov	r6,r16
 c0037e0:	880f883a 	mov	r7,r17
 c0037e4:	a809883a 	mov	r4,r21
 c0037e8:	4029883a 	mov	r20,r8
 c0037ec:	c00c2340 	call	c00c234 <__gedf2>
 c0037f0:	00841d16 	blt	zero,r2,c004868 <_dtoa_r+0x15f4>
 c0037f4:	800d883a 	mov	r6,r16
 c0037f8:	880f883a 	mov	r7,r17
 c0037fc:	0009883a 	mov	r4,zero
 c003800:	014ffc34 	movhi	r5,16368
 c003804:	c00cc700 	call	c00cc70 <__subdf3>
 c003808:	d9401217 	ldw	r5,72(sp)
 c00380c:	100d883a 	mov	r6,r2
 c003810:	180f883a 	mov	r7,r3
 c003814:	a809883a 	mov	r4,r21
 c003818:	c00c2340 	call	c00c234 <__gedf2>
 c00381c:	db001617 	ldw	r12,88(sp)
 c003820:	00840e16 	blt	zero,r2,c00485c <_dtoa_r+0x15e8>
 c003824:	00800044 	movi	r2,1
 c003828:	13006b0e 	bge	r2,r12,c0039d8 <_dtoa_r+0x764>
 c00382c:	d9000717 	ldw	r4,28(sp)
 c003830:	dd800f15 	stw	r22,60(sp)
 c003834:	dcc01015 	stw	r19,64(sp)
 c003838:	2319883a 	add	r12,r4,r12
 c00383c:	dcc01217 	ldw	r19,72(sp)
 c003840:	602d883a 	mov	r22,r12
 c003844:	dc801215 	stw	r18,72(sp)
 c003848:	b825883a 	mov	r18,r23
 c00384c:	00000906 	br	c003874 <_dtoa_r+0x600>
 c003850:	c00cc700 	call	c00cc70 <__subdf3>
 c003854:	a80d883a 	mov	r6,r21
 c003858:	980f883a 	mov	r7,r19
 c00385c:	1009883a 	mov	r4,r2
 c003860:	180b883a 	mov	r5,r3
 c003864:	c00c3100 	call	c00c310 <__ledf2>
 c003868:	1003e816 	blt	r2,zero,c00480c <_dtoa_r+0x1598>
 c00386c:	b825883a 	mov	r18,r23
 c003870:	bd83e926 	beq	r23,r22,c004818 <_dtoa_r+0x15a4>
 c003874:	a809883a 	mov	r4,r21
 c003878:	980b883a 	mov	r5,r19
 c00387c:	000d883a 	mov	r6,zero
 c003880:	01d00934 	movhi	r7,16420
 c003884:	c00c4040 	call	c00c404 <__muldf3>
 c003888:	000d883a 	mov	r6,zero
 c00388c:	01d00934 	movhi	r7,16420
 c003890:	8009883a 	mov	r4,r16
 c003894:	880b883a 	mov	r5,r17
 c003898:	102b883a 	mov	r21,r2
 c00389c:	1827883a 	mov	r19,r3
 c0038a0:	c00c4040 	call	c00c404 <__muldf3>
 c0038a4:	180b883a 	mov	r5,r3
 c0038a8:	1009883a 	mov	r4,r2
 c0038ac:	1821883a 	mov	r16,r3
 c0038b0:	1023883a 	mov	r17,r2
 c0038b4:	c00d56c0 	call	c00d56c <__fixdfsi>
 c0038b8:	1009883a 	mov	r4,r2
 c0038bc:	1029883a 	mov	r20,r2
 c0038c0:	c00d5ec0 	call	c00d5ec <__floatsidf>
 c0038c4:	8809883a 	mov	r4,r17
 c0038c8:	800b883a 	mov	r5,r16
 c0038cc:	100d883a 	mov	r6,r2
 c0038d0:	180f883a 	mov	r7,r3
 c0038d4:	c00cc700 	call	c00cc70 <__subdf3>
 c0038d8:	a5000c04 	addi	r20,r20,48
 c0038dc:	a80d883a 	mov	r6,r21
 c0038e0:	980f883a 	mov	r7,r19
 c0038e4:	1009883a 	mov	r4,r2
 c0038e8:	180b883a 	mov	r5,r3
 c0038ec:	95000005 	stb	r20,0(r18)
 c0038f0:	1021883a 	mov	r16,r2
 c0038f4:	1823883a 	mov	r17,r3
 c0038f8:	c00c3100 	call	c00c310 <__ledf2>
 c0038fc:	bdc00044 	addi	r23,r23,1
 c003900:	800d883a 	mov	r6,r16
 c003904:	880f883a 	mov	r7,r17
 c003908:	0009883a 	mov	r4,zero
 c00390c:	014ffc34 	movhi	r5,16368
 c003910:	103fcf0e 	bge	r2,zero,c003850 <__alt_data_end+0xfc003850>
 c003914:	d8c01317 	ldw	r3,76(sp)
 c003918:	d8c00515 	stw	r3,20(sp)
 c00391c:	d9400917 	ldw	r5,36(sp)
 c003920:	e009883a 	mov	r4,fp
 c003924:	c0062680 	call	c006268 <_Bfree>
 c003928:	d9000517 	ldw	r4,20(sp)
 c00392c:	d9802317 	ldw	r6,140(sp)
 c003930:	d9c02517 	ldw	r7,148(sp)
 c003934:	b8000005 	stb	zero,0(r23)
 c003938:	20800044 	addi	r2,r4,1
 c00393c:	30800015 	stw	r2,0(r6)
 c003940:	3802aa26 	beq	r7,zero,c0043ec <_dtoa_r+0x1178>
 c003944:	3dc00015 	stw	r23,0(r7)
 c003948:	d8800717 	ldw	r2,28(sp)
 c00394c:	003e7906 	br	c003334 <__alt_data_end+0xfc003334>
 c003950:	00800434 	movhi	r2,16
 c003954:	10bfffc4 	addi	r2,r2,-1
 c003958:	88a2703a 	and	r17,r17,r2
 c00395c:	883e851e 	bne	r17,zero,c003374 <__alt_data_end+0xfc003374>
 c003960:	00830074 	movhi	r2,3073
 c003964:	1080a004 	addi	r2,r2,640
 c003968:	003e8406 	br	c00337c <__alt_data_end+0xfc00337c>
 c00396c:	10c00204 	addi	r3,r2,8
 c003970:	003e8706 	br	c003390 <__alt_data_end+0xfc003390>
 c003974:	01400434 	movhi	r5,16
 c003978:	297fffc4 	addi	r5,r5,-1
 c00397c:	994a703a 	and	r5,r19,r5
 c003980:	9009883a 	mov	r4,r18
 c003984:	843f0044 	addi	r16,r16,-1023
 c003988:	294ffc34 	orhi	r5,r5,16368
 c00398c:	dd800217 	ldw	r22,8(sp)
 c003990:	d8001115 	stw	zero,68(sp)
 c003994:	003ea506 	br	c00342c <__alt_data_end+0xfc00342c>
 c003998:	00830074 	movhi	r2,3073
 c00399c:	10809704 	addi	r2,r2,604
 c0039a0:	003e6406 	br	c003334 <__alt_data_end+0xfc003334>
 c0039a4:	e0001115 	stw	zero,68(fp)
 c0039a8:	000b883a 	mov	r5,zero
 c0039ac:	e009883a 	mov	r4,fp
 c0039b0:	c0061c00 	call	c0061c0 <_Balloc>
 c0039b4:	01bfffc4 	movi	r6,-1
 c0039b8:	01c00044 	movi	r7,1
 c0039bc:	d8800715 	stw	r2,28(sp)
 c0039c0:	d9800c15 	stw	r6,48(sp)
 c0039c4:	e0801015 	stw	r2,64(fp)
 c0039c8:	d8000315 	stw	zero,12(sp)
 c0039cc:	d9c00b15 	stw	r7,44(sp)
 c0039d0:	d9800615 	stw	r6,24(sp)
 c0039d4:	d8002215 	stw	zero,136(sp)
 c0039d8:	d8800117 	ldw	r2,4(sp)
 c0039dc:	10008916 	blt	r2,zero,c003c04 <_dtoa_r+0x990>
 c0039e0:	d9000517 	ldw	r4,20(sp)
 c0039e4:	00c00384 	movi	r3,14
 c0039e8:	19008616 	blt	r3,r4,c003c04 <_dtoa_r+0x990>
 c0039ec:	200490fa 	slli	r2,r4,3
 c0039f0:	00c30074 	movhi	r3,3073
 c0039f4:	d9802217 	ldw	r6,136(sp)
 c0039f8:	18c0bf04 	addi	r3,r3,764
 c0039fc:	1885883a 	add	r2,r3,r2
 c003a00:	14000017 	ldw	r16,0(r2)
 c003a04:	14400117 	ldw	r17,4(r2)
 c003a08:	30016316 	blt	r6,zero,c003f98 <_dtoa_r+0xd24>
 c003a0c:	800d883a 	mov	r6,r16
 c003a10:	880f883a 	mov	r7,r17
 c003a14:	9009883a 	mov	r4,r18
 c003a18:	980b883a 	mov	r5,r19
 c003a1c:	c00b7dc0 	call	c00b7dc <__divdf3>
 c003a20:	180b883a 	mov	r5,r3
 c003a24:	1009883a 	mov	r4,r2
 c003a28:	c00d56c0 	call	c00d56c <__fixdfsi>
 c003a2c:	1009883a 	mov	r4,r2
 c003a30:	102b883a 	mov	r21,r2
 c003a34:	c00d5ec0 	call	c00d5ec <__floatsidf>
 c003a38:	800d883a 	mov	r6,r16
 c003a3c:	880f883a 	mov	r7,r17
 c003a40:	1009883a 	mov	r4,r2
 c003a44:	180b883a 	mov	r5,r3
 c003a48:	c00c4040 	call	c00c404 <__muldf3>
 c003a4c:	100d883a 	mov	r6,r2
 c003a50:	180f883a 	mov	r7,r3
 c003a54:	9009883a 	mov	r4,r18
 c003a58:	980b883a 	mov	r5,r19
 c003a5c:	c00cc700 	call	c00cc70 <__subdf3>
 c003a60:	d9c00717 	ldw	r7,28(sp)
 c003a64:	1009883a 	mov	r4,r2
 c003a68:	a8800c04 	addi	r2,r21,48
 c003a6c:	38800005 	stb	r2,0(r7)
 c003a70:	3dc00044 	addi	r23,r7,1
 c003a74:	d9c00617 	ldw	r7,24(sp)
 c003a78:	01800044 	movi	r6,1
 c003a7c:	180b883a 	mov	r5,r3
 c003a80:	2005883a 	mov	r2,r4
 c003a84:	39803826 	beq	r7,r6,c003b68 <_dtoa_r+0x8f4>
 c003a88:	000d883a 	mov	r6,zero
 c003a8c:	01d00934 	movhi	r7,16420
 c003a90:	c00c4040 	call	c00c404 <__muldf3>
 c003a94:	000d883a 	mov	r6,zero
 c003a98:	000f883a 	mov	r7,zero
 c003a9c:	1009883a 	mov	r4,r2
 c003aa0:	180b883a 	mov	r5,r3
 c003aa4:	1025883a 	mov	r18,r2
 c003aa8:	1827883a 	mov	r19,r3
 c003aac:	c00c1ac0 	call	c00c1ac <__eqdf2>
 c003ab0:	103f9a26 	beq	r2,zero,c00391c <__alt_data_end+0xfc00391c>
 c003ab4:	d9c00617 	ldw	r7,24(sp)
 c003ab8:	d8c00717 	ldw	r3,28(sp)
 c003abc:	b829883a 	mov	r20,r23
 c003ac0:	38bfffc4 	addi	r2,r7,-1
 c003ac4:	18ad883a 	add	r22,r3,r2
 c003ac8:	00000a06 	br	c003af4 <_dtoa_r+0x880>
 c003acc:	c00c4040 	call	c00c404 <__muldf3>
 c003ad0:	000d883a 	mov	r6,zero
 c003ad4:	000f883a 	mov	r7,zero
 c003ad8:	1009883a 	mov	r4,r2
 c003adc:	180b883a 	mov	r5,r3
 c003ae0:	1025883a 	mov	r18,r2
 c003ae4:	1827883a 	mov	r19,r3
 c003ae8:	b829883a 	mov	r20,r23
 c003aec:	c00c1ac0 	call	c00c1ac <__eqdf2>
 c003af0:	103f8a26 	beq	r2,zero,c00391c <__alt_data_end+0xfc00391c>
 c003af4:	800d883a 	mov	r6,r16
 c003af8:	880f883a 	mov	r7,r17
 c003afc:	9009883a 	mov	r4,r18
 c003b00:	980b883a 	mov	r5,r19
 c003b04:	c00b7dc0 	call	c00b7dc <__divdf3>
 c003b08:	180b883a 	mov	r5,r3
 c003b0c:	1009883a 	mov	r4,r2
 c003b10:	c00d56c0 	call	c00d56c <__fixdfsi>
 c003b14:	1009883a 	mov	r4,r2
 c003b18:	102b883a 	mov	r21,r2
 c003b1c:	c00d5ec0 	call	c00d5ec <__floatsidf>
 c003b20:	800d883a 	mov	r6,r16
 c003b24:	880f883a 	mov	r7,r17
 c003b28:	1009883a 	mov	r4,r2
 c003b2c:	180b883a 	mov	r5,r3
 c003b30:	c00c4040 	call	c00c404 <__muldf3>
 c003b34:	100d883a 	mov	r6,r2
 c003b38:	180f883a 	mov	r7,r3
 c003b3c:	9009883a 	mov	r4,r18
 c003b40:	980b883a 	mov	r5,r19
 c003b44:	c00cc700 	call	c00cc70 <__subdf3>
 c003b48:	aa000c04 	addi	r8,r21,48
 c003b4c:	a2000005 	stb	r8,0(r20)
 c003b50:	000d883a 	mov	r6,zero
 c003b54:	01d00934 	movhi	r7,16420
 c003b58:	1009883a 	mov	r4,r2
 c003b5c:	180b883a 	mov	r5,r3
 c003b60:	a5c00044 	addi	r23,r20,1
 c003b64:	b53fd91e 	bne	r22,r20,c003acc <__alt_data_end+0xfc003acc>
 c003b68:	100d883a 	mov	r6,r2
 c003b6c:	180f883a 	mov	r7,r3
 c003b70:	1009883a 	mov	r4,r2
 c003b74:	180b883a 	mov	r5,r3
 c003b78:	c00af300 	call	c00af30 <__adddf3>
 c003b7c:	100d883a 	mov	r6,r2
 c003b80:	180f883a 	mov	r7,r3
 c003b84:	8009883a 	mov	r4,r16
 c003b88:	880b883a 	mov	r5,r17
 c003b8c:	1027883a 	mov	r19,r2
 c003b90:	1825883a 	mov	r18,r3
 c003b94:	c00c3100 	call	c00c310 <__ledf2>
 c003b98:	10000816 	blt	r2,zero,c003bbc <_dtoa_r+0x948>
 c003b9c:	980d883a 	mov	r6,r19
 c003ba0:	900f883a 	mov	r7,r18
 c003ba4:	8009883a 	mov	r4,r16
 c003ba8:	880b883a 	mov	r5,r17
 c003bac:	c00c1ac0 	call	c00c1ac <__eqdf2>
 c003bb0:	103f5a1e 	bne	r2,zero,c00391c <__alt_data_end+0xfc00391c>
 c003bb4:	ad40004c 	andi	r21,r21,1
 c003bb8:	a83f5826 	beq	r21,zero,c00391c <__alt_data_end+0xfc00391c>
 c003bbc:	bd3fffc3 	ldbu	r20,-1(r23)
 c003bc0:	b8bfffc4 	addi	r2,r23,-1
 c003bc4:	1007883a 	mov	r3,r2
 c003bc8:	01400e44 	movi	r5,57
 c003bcc:	d9800717 	ldw	r6,28(sp)
 c003bd0:	00000506 	br	c003be8 <_dtoa_r+0x974>
 c003bd4:	18ffffc4 	addi	r3,r3,-1
 c003bd8:	11824726 	beq	r2,r6,c0044f8 <_dtoa_r+0x1284>
 c003bdc:	1d000003 	ldbu	r20,0(r3)
 c003be0:	102f883a 	mov	r23,r2
 c003be4:	10bfffc4 	addi	r2,r2,-1
 c003be8:	a1003fcc 	andi	r4,r20,255
 c003bec:	2100201c 	xori	r4,r4,128
 c003bf0:	213fe004 	addi	r4,r4,-128
 c003bf4:	217ff726 	beq	r4,r5,c003bd4 <__alt_data_end+0xfc003bd4>
 c003bf8:	a2000044 	addi	r8,r20,1
 c003bfc:	12000005 	stb	r8,0(r2)
 c003c00:	003f4606 	br	c00391c <__alt_data_end+0xfc00391c>
 c003c04:	d9000b17 	ldw	r4,44(sp)
 c003c08:	2000c826 	beq	r4,zero,c003f2c <_dtoa_r+0xcb8>
 c003c0c:	d9800317 	ldw	r6,12(sp)
 c003c10:	00c00044 	movi	r3,1
 c003c14:	1980f90e 	bge	r3,r6,c003ffc <_dtoa_r+0xd88>
 c003c18:	d8800617 	ldw	r2,24(sp)
 c003c1c:	d8c00a17 	ldw	r3,40(sp)
 c003c20:	157fffc4 	addi	r21,r2,-1
 c003c24:	1d41f316 	blt	r3,r21,c0043f4 <_dtoa_r+0x1180>
 c003c28:	1d6bc83a 	sub	r21,r3,r21
 c003c2c:	d9c00617 	ldw	r7,24(sp)
 c003c30:	3802aa16 	blt	r7,zero,c0046dc <_dtoa_r+0x1468>
 c003c34:	dd000817 	ldw	r20,32(sp)
 c003c38:	d8800617 	ldw	r2,24(sp)
 c003c3c:	d8c00817 	ldw	r3,32(sp)
 c003c40:	01400044 	movi	r5,1
 c003c44:	e009883a 	mov	r4,fp
 c003c48:	1887883a 	add	r3,r3,r2
 c003c4c:	d8c00815 	stw	r3,32(sp)
 c003c50:	b0ad883a 	add	r22,r22,r2
 c003c54:	c0065f40 	call	c0065f4 <__i2b>
 c003c58:	1023883a 	mov	r17,r2
 c003c5c:	a0000826 	beq	r20,zero,c003c80 <_dtoa_r+0xa0c>
 c003c60:	0580070e 	bge	zero,r22,c003c80 <_dtoa_r+0xa0c>
 c003c64:	a005883a 	mov	r2,r20
 c003c68:	b500b916 	blt	r22,r20,c003f50 <_dtoa_r+0xcdc>
 c003c6c:	d9000817 	ldw	r4,32(sp)
 c003c70:	a0a9c83a 	sub	r20,r20,r2
 c003c74:	b0adc83a 	sub	r22,r22,r2
 c003c78:	2089c83a 	sub	r4,r4,r2
 c003c7c:	d9000815 	stw	r4,32(sp)
 c003c80:	d9800a17 	ldw	r6,40(sp)
 c003c84:	0181810e 	bge	zero,r6,c00428c <_dtoa_r+0x1018>
 c003c88:	d9c00b17 	ldw	r7,44(sp)
 c003c8c:	3800b326 	beq	r7,zero,c003f5c <_dtoa_r+0xce8>
 c003c90:	a800b226 	beq	r21,zero,c003f5c <_dtoa_r+0xce8>
 c003c94:	880b883a 	mov	r5,r17
 c003c98:	a80d883a 	mov	r6,r21
 c003c9c:	e009883a 	mov	r4,fp
 c003ca0:	c0068bc0 	call	c0068bc <__pow5mult>
 c003ca4:	d9800917 	ldw	r6,36(sp)
 c003ca8:	100b883a 	mov	r5,r2
 c003cac:	e009883a 	mov	r4,fp
 c003cb0:	1023883a 	mov	r17,r2
 c003cb4:	c0066300 	call	c006630 <__multiply>
 c003cb8:	1021883a 	mov	r16,r2
 c003cbc:	d8800a17 	ldw	r2,40(sp)
 c003cc0:	d9400917 	ldw	r5,36(sp)
 c003cc4:	e009883a 	mov	r4,fp
 c003cc8:	1545c83a 	sub	r2,r2,r21
 c003ccc:	d8800a15 	stw	r2,40(sp)
 c003cd0:	c0062680 	call	c006268 <_Bfree>
 c003cd4:	d8c00a17 	ldw	r3,40(sp)
 c003cd8:	18009f1e 	bne	r3,zero,c003f58 <_dtoa_r+0xce4>
 c003cdc:	05c00044 	movi	r23,1
 c003ce0:	e009883a 	mov	r4,fp
 c003ce4:	b80b883a 	mov	r5,r23
 c003ce8:	c0065f40 	call	c0065f4 <__i2b>
 c003cec:	d9000d17 	ldw	r4,52(sp)
 c003cf0:	102b883a 	mov	r21,r2
 c003cf4:	2000ce26 	beq	r4,zero,c004030 <_dtoa_r+0xdbc>
 c003cf8:	200d883a 	mov	r6,r4
 c003cfc:	100b883a 	mov	r5,r2
 c003d00:	e009883a 	mov	r4,fp
 c003d04:	c0068bc0 	call	c0068bc <__pow5mult>
 c003d08:	d9800317 	ldw	r6,12(sp)
 c003d0c:	102b883a 	mov	r21,r2
 c003d10:	b981810e 	bge	r23,r6,c004318 <_dtoa_r+0x10a4>
 c003d14:	0027883a 	mov	r19,zero
 c003d18:	a8800417 	ldw	r2,16(r21)
 c003d1c:	05c00804 	movi	r23,32
 c003d20:	10800104 	addi	r2,r2,4
 c003d24:	1085883a 	add	r2,r2,r2
 c003d28:	1085883a 	add	r2,r2,r2
 c003d2c:	a885883a 	add	r2,r21,r2
 c003d30:	11000017 	ldw	r4,0(r2)
 c003d34:	c0064dc0 	call	c0064dc <__hi0bits>
 c003d38:	b885c83a 	sub	r2,r23,r2
 c003d3c:	1585883a 	add	r2,r2,r22
 c003d40:	108007cc 	andi	r2,r2,31
 c003d44:	1000b326 	beq	r2,zero,c004014 <_dtoa_r+0xda0>
 c003d48:	00c00804 	movi	r3,32
 c003d4c:	1887c83a 	sub	r3,r3,r2
 c003d50:	01000104 	movi	r4,4
 c003d54:	20c2cd0e 	bge	r4,r3,c00488c <_dtoa_r+0x1618>
 c003d58:	00c00704 	movi	r3,28
 c003d5c:	1885c83a 	sub	r2,r3,r2
 c003d60:	d8c00817 	ldw	r3,32(sp)
 c003d64:	a0a9883a 	add	r20,r20,r2
 c003d68:	b0ad883a 	add	r22,r22,r2
 c003d6c:	1887883a 	add	r3,r3,r2
 c003d70:	d8c00815 	stw	r3,32(sp)
 c003d74:	d9800817 	ldw	r6,32(sp)
 c003d78:	0180040e 	bge	zero,r6,c003d8c <_dtoa_r+0xb18>
 c003d7c:	800b883a 	mov	r5,r16
 c003d80:	e009883a 	mov	r4,fp
 c003d84:	c0069fc0 	call	c0069fc <__lshift>
 c003d88:	1021883a 	mov	r16,r2
 c003d8c:	0580050e 	bge	zero,r22,c003da4 <_dtoa_r+0xb30>
 c003d90:	a80b883a 	mov	r5,r21
 c003d94:	b00d883a 	mov	r6,r22
 c003d98:	e009883a 	mov	r4,fp
 c003d9c:	c0069fc0 	call	c0069fc <__lshift>
 c003da0:	102b883a 	mov	r21,r2
 c003da4:	d9c00e17 	ldw	r7,56(sp)
 c003da8:	3801211e 	bne	r7,zero,c004230 <_dtoa_r+0xfbc>
 c003dac:	d9800617 	ldw	r6,24(sp)
 c003db0:	0181380e 	bge	zero,r6,c004294 <_dtoa_r+0x1020>
 c003db4:	d8c00b17 	ldw	r3,44(sp)
 c003db8:	1800ab1e 	bne	r3,zero,c004068 <_dtoa_r+0xdf4>
 c003dbc:	dc800717 	ldw	r18,28(sp)
 c003dc0:	dcc00617 	ldw	r19,24(sp)
 c003dc4:	9029883a 	mov	r20,r18
 c003dc8:	00000206 	br	c003dd4 <_dtoa_r+0xb60>
 c003dcc:	c0062900 	call	c006290 <__multadd>
 c003dd0:	1021883a 	mov	r16,r2
 c003dd4:	a80b883a 	mov	r5,r21
 c003dd8:	8009883a 	mov	r4,r16
 c003ddc:	c00304c0 	call	c00304c <quorem>
 c003de0:	10800c04 	addi	r2,r2,48
 c003de4:	90800005 	stb	r2,0(r18)
 c003de8:	94800044 	addi	r18,r18,1
 c003dec:	9507c83a 	sub	r3,r18,r20
 c003df0:	000f883a 	mov	r7,zero
 c003df4:	01800284 	movi	r6,10
 c003df8:	800b883a 	mov	r5,r16
 c003dfc:	e009883a 	mov	r4,fp
 c003e00:	1cfff216 	blt	r3,r19,c003dcc <__alt_data_end+0xfc003dcc>
 c003e04:	1011883a 	mov	r8,r2
 c003e08:	d8800617 	ldw	r2,24(sp)
 c003e0c:	0082370e 	bge	zero,r2,c0046ec <_dtoa_r+0x1478>
 c003e10:	d9000717 	ldw	r4,28(sp)
 c003e14:	0025883a 	mov	r18,zero
 c003e18:	20af883a 	add	r23,r4,r2
 c003e1c:	01800044 	movi	r6,1
 c003e20:	800b883a 	mov	r5,r16
 c003e24:	e009883a 	mov	r4,fp
 c003e28:	da001715 	stw	r8,92(sp)
 c003e2c:	c0069fc0 	call	c0069fc <__lshift>
 c003e30:	a80b883a 	mov	r5,r21
 c003e34:	1009883a 	mov	r4,r2
 c003e38:	d8800915 	stw	r2,36(sp)
 c003e3c:	c006b440 	call	c006b44 <__mcmp>
 c003e40:	da001717 	ldw	r8,92(sp)
 c003e44:	0081800e 	bge	zero,r2,c004448 <_dtoa_r+0x11d4>
 c003e48:	b93fffc3 	ldbu	r4,-1(r23)
 c003e4c:	b8bfffc4 	addi	r2,r23,-1
 c003e50:	1007883a 	mov	r3,r2
 c003e54:	01800e44 	movi	r6,57
 c003e58:	d9c00717 	ldw	r7,28(sp)
 c003e5c:	00000506 	br	c003e74 <_dtoa_r+0xc00>
 c003e60:	18ffffc4 	addi	r3,r3,-1
 c003e64:	11c12326 	beq	r2,r7,c0042f4 <_dtoa_r+0x1080>
 c003e68:	19000003 	ldbu	r4,0(r3)
 c003e6c:	102f883a 	mov	r23,r2
 c003e70:	10bfffc4 	addi	r2,r2,-1
 c003e74:	21403fcc 	andi	r5,r4,255
 c003e78:	2940201c 	xori	r5,r5,128
 c003e7c:	297fe004 	addi	r5,r5,-128
 c003e80:	29bff726 	beq	r5,r6,c003e60 <__alt_data_end+0xfc003e60>
 c003e84:	21000044 	addi	r4,r4,1
 c003e88:	11000005 	stb	r4,0(r2)
 c003e8c:	a80b883a 	mov	r5,r21
 c003e90:	e009883a 	mov	r4,fp
 c003e94:	c0062680 	call	c006268 <_Bfree>
 c003e98:	883ea026 	beq	r17,zero,c00391c <__alt_data_end+0xfc00391c>
 c003e9c:	90000426 	beq	r18,zero,c003eb0 <_dtoa_r+0xc3c>
 c003ea0:	94400326 	beq	r18,r17,c003eb0 <_dtoa_r+0xc3c>
 c003ea4:	900b883a 	mov	r5,r18
 c003ea8:	e009883a 	mov	r4,fp
 c003eac:	c0062680 	call	c006268 <_Bfree>
 c003eb0:	880b883a 	mov	r5,r17
 c003eb4:	e009883a 	mov	r4,fp
 c003eb8:	c0062680 	call	c006268 <_Bfree>
 c003ebc:	003e9706 	br	c00391c <__alt_data_end+0xfc00391c>
 c003ec0:	01800044 	movi	r6,1
 c003ec4:	d9800e15 	stw	r6,56(sp)
 c003ec8:	003d9606 	br	c003524 <__alt_data_end+0xfc003524>
 c003ecc:	d8800817 	ldw	r2,32(sp)
 c003ed0:	d8c00517 	ldw	r3,20(sp)
 c003ed4:	d8000d15 	stw	zero,52(sp)
 c003ed8:	10c5c83a 	sub	r2,r2,r3
 c003edc:	00c9c83a 	sub	r4,zero,r3
 c003ee0:	d8800815 	stw	r2,32(sp)
 c003ee4:	d9000a15 	stw	r4,40(sp)
 c003ee8:	003d9706 	br	c003548 <__alt_data_end+0xfc003548>
 c003eec:	05adc83a 	sub	r22,zero,r22
 c003ef0:	dd800815 	stw	r22,32(sp)
 c003ef4:	002d883a 	mov	r22,zero
 c003ef8:	003d8e06 	br	c003534 <__alt_data_end+0xfc003534>
 c003efc:	d9000517 	ldw	r4,20(sp)
 c003f00:	c00d5ec0 	call	c00d5ec <__floatsidf>
 c003f04:	100d883a 	mov	r6,r2
 c003f08:	180f883a 	mov	r7,r3
 c003f0c:	a009883a 	mov	r4,r20
 c003f10:	880b883a 	mov	r5,r17
 c003f14:	c00c1ac0 	call	c00c1ac <__eqdf2>
 c003f18:	103d7126 	beq	r2,zero,c0034e0 <__alt_data_end+0xfc0034e0>
 c003f1c:	d9c00517 	ldw	r7,20(sp)
 c003f20:	39ffffc4 	addi	r7,r7,-1
 c003f24:	d9c00515 	stw	r7,20(sp)
 c003f28:	003d6d06 	br	c0034e0 <__alt_data_end+0xfc0034e0>
 c003f2c:	dd400a17 	ldw	r21,40(sp)
 c003f30:	dd000817 	ldw	r20,32(sp)
 c003f34:	0023883a 	mov	r17,zero
 c003f38:	003f4806 	br	c003c5c <__alt_data_end+0xfc003c5c>
 c003f3c:	10e3c83a 	sub	r17,r2,r3
 c003f40:	9448983a 	sll	r4,r18,r17
 c003f44:	003d3206 	br	c003410 <__alt_data_end+0xfc003410>
 c003f48:	d8000e15 	stw	zero,56(sp)
 c003f4c:	003d7506 	br	c003524 <__alt_data_end+0xfc003524>
 c003f50:	b005883a 	mov	r2,r22
 c003f54:	003f4506 	br	c003c6c <__alt_data_end+0xfc003c6c>
 c003f58:	dc000915 	stw	r16,36(sp)
 c003f5c:	d9800a17 	ldw	r6,40(sp)
 c003f60:	d9400917 	ldw	r5,36(sp)
 c003f64:	e009883a 	mov	r4,fp
 c003f68:	c0068bc0 	call	c0068bc <__pow5mult>
 c003f6c:	1021883a 	mov	r16,r2
 c003f70:	003f5a06 	br	c003cdc <__alt_data_end+0xfc003cdc>
 c003f74:	01c00044 	movi	r7,1
 c003f78:	d9c00b15 	stw	r7,44(sp)
 c003f7c:	d8802217 	ldw	r2,136(sp)
 c003f80:	0081280e 	bge	zero,r2,c004424 <_dtoa_r+0x11b0>
 c003f84:	100d883a 	mov	r6,r2
 c003f88:	1021883a 	mov	r16,r2
 c003f8c:	d8800c15 	stw	r2,48(sp)
 c003f90:	d8800615 	stw	r2,24(sp)
 c003f94:	003d8806 	br	c0035b8 <__alt_data_end+0xfc0035b8>
 c003f98:	d8800617 	ldw	r2,24(sp)
 c003f9c:	00be9b16 	blt	zero,r2,c003a0c <__alt_data_end+0xfc003a0c>
 c003fa0:	10010f1e 	bne	r2,zero,c0043e0 <_dtoa_r+0x116c>
 c003fa4:	880b883a 	mov	r5,r17
 c003fa8:	000d883a 	mov	r6,zero
 c003fac:	01d00534 	movhi	r7,16404
 c003fb0:	8009883a 	mov	r4,r16
 c003fb4:	c00c4040 	call	c00c404 <__muldf3>
 c003fb8:	900d883a 	mov	r6,r18
 c003fbc:	980f883a 	mov	r7,r19
 c003fc0:	1009883a 	mov	r4,r2
 c003fc4:	180b883a 	mov	r5,r3
 c003fc8:	c00c2340 	call	c00c234 <__gedf2>
 c003fcc:	002b883a 	mov	r21,zero
 c003fd0:	0023883a 	mov	r17,zero
 c003fd4:	1000bf16 	blt	r2,zero,c0042d4 <_dtoa_r+0x1060>
 c003fd8:	d9802217 	ldw	r6,136(sp)
 c003fdc:	ddc00717 	ldw	r23,28(sp)
 c003fe0:	018c303a 	nor	r6,zero,r6
 c003fe4:	d9800515 	stw	r6,20(sp)
 c003fe8:	a80b883a 	mov	r5,r21
 c003fec:	e009883a 	mov	r4,fp
 c003ff0:	c0062680 	call	c006268 <_Bfree>
 c003ff4:	883e4926 	beq	r17,zero,c00391c <__alt_data_end+0xfc00391c>
 c003ff8:	003fad06 	br	c003eb0 <__alt_data_end+0xfc003eb0>
 c003ffc:	d9c01117 	ldw	r7,68(sp)
 c004000:	3801bc26 	beq	r7,zero,c0046f4 <_dtoa_r+0x1480>
 c004004:	10810cc4 	addi	r2,r2,1075
 c004008:	dd400a17 	ldw	r21,40(sp)
 c00400c:	dd000817 	ldw	r20,32(sp)
 c004010:	003f0a06 	br	c003c3c <__alt_data_end+0xfc003c3c>
 c004014:	00800704 	movi	r2,28
 c004018:	d9000817 	ldw	r4,32(sp)
 c00401c:	a0a9883a 	add	r20,r20,r2
 c004020:	b0ad883a 	add	r22,r22,r2
 c004024:	2089883a 	add	r4,r4,r2
 c004028:	d9000815 	stw	r4,32(sp)
 c00402c:	003f5106 	br	c003d74 <__alt_data_end+0xfc003d74>
 c004030:	d8c00317 	ldw	r3,12(sp)
 c004034:	b8c1fc0e 	bge	r23,r3,c004828 <_dtoa_r+0x15b4>
 c004038:	0027883a 	mov	r19,zero
 c00403c:	b805883a 	mov	r2,r23
 c004040:	003f3e06 	br	c003d3c <__alt_data_end+0xfc003d3c>
 c004044:	880b883a 	mov	r5,r17
 c004048:	e009883a 	mov	r4,fp
 c00404c:	000f883a 	mov	r7,zero
 c004050:	01800284 	movi	r6,10
 c004054:	c0062900 	call	c006290 <__multadd>
 c004058:	d9000c17 	ldw	r4,48(sp)
 c00405c:	1023883a 	mov	r17,r2
 c004060:	0102040e 	bge	zero,r4,c004874 <_dtoa_r+0x1600>
 c004064:	d9000615 	stw	r4,24(sp)
 c004068:	0500050e 	bge	zero,r20,c004080 <_dtoa_r+0xe0c>
 c00406c:	880b883a 	mov	r5,r17
 c004070:	a00d883a 	mov	r6,r20
 c004074:	e009883a 	mov	r4,fp
 c004078:	c0069fc0 	call	c0069fc <__lshift>
 c00407c:	1023883a 	mov	r17,r2
 c004080:	9801241e 	bne	r19,zero,c004514 <_dtoa_r+0x12a0>
 c004084:	8829883a 	mov	r20,r17
 c004088:	d9000617 	ldw	r4,24(sp)
 c00408c:	dcc00717 	ldw	r19,28(sp)
 c004090:	9480004c 	andi	r18,r18,1
 c004094:	20bfffc4 	addi	r2,r4,-1
 c004098:	9885883a 	add	r2,r19,r2
 c00409c:	d8800415 	stw	r2,16(sp)
 c0040a0:	dc800615 	stw	r18,24(sp)
 c0040a4:	a80b883a 	mov	r5,r21
 c0040a8:	8009883a 	mov	r4,r16
 c0040ac:	c00304c0 	call	c00304c <quorem>
 c0040b0:	880b883a 	mov	r5,r17
 c0040b4:	8009883a 	mov	r4,r16
 c0040b8:	102f883a 	mov	r23,r2
 c0040bc:	c006b440 	call	c006b44 <__mcmp>
 c0040c0:	a80b883a 	mov	r5,r21
 c0040c4:	a00d883a 	mov	r6,r20
 c0040c8:	e009883a 	mov	r4,fp
 c0040cc:	102d883a 	mov	r22,r2
 c0040d0:	c006ba40 	call	c006ba4 <__mdiff>
 c0040d4:	1007883a 	mov	r3,r2
 c0040d8:	10800317 	ldw	r2,12(r2)
 c0040dc:	bc800c04 	addi	r18,r23,48
 c0040e0:	180b883a 	mov	r5,r3
 c0040e4:	10004e1e 	bne	r2,zero,c004220 <_dtoa_r+0xfac>
 c0040e8:	8009883a 	mov	r4,r16
 c0040ec:	d8c01615 	stw	r3,88(sp)
 c0040f0:	c006b440 	call	c006b44 <__mcmp>
 c0040f4:	d8c01617 	ldw	r3,88(sp)
 c0040f8:	e009883a 	mov	r4,fp
 c0040fc:	d8801615 	stw	r2,88(sp)
 c004100:	180b883a 	mov	r5,r3
 c004104:	c0062680 	call	c006268 <_Bfree>
 c004108:	d8801617 	ldw	r2,88(sp)
 c00410c:	1000041e 	bne	r2,zero,c004120 <_dtoa_r+0xeac>
 c004110:	d9800317 	ldw	r6,12(sp)
 c004114:	3000021e 	bne	r6,zero,c004120 <_dtoa_r+0xeac>
 c004118:	d8c00617 	ldw	r3,24(sp)
 c00411c:	18003726 	beq	r3,zero,c0041fc <_dtoa_r+0xf88>
 c004120:	b0002016 	blt	r22,zero,c0041a4 <_dtoa_r+0xf30>
 c004124:	b000041e 	bne	r22,zero,c004138 <_dtoa_r+0xec4>
 c004128:	d9000317 	ldw	r4,12(sp)
 c00412c:	2000021e 	bne	r4,zero,c004138 <_dtoa_r+0xec4>
 c004130:	d8c00617 	ldw	r3,24(sp)
 c004134:	18001b26 	beq	r3,zero,c0041a4 <_dtoa_r+0xf30>
 c004138:	00810716 	blt	zero,r2,c004558 <_dtoa_r+0x12e4>
 c00413c:	d8c00417 	ldw	r3,16(sp)
 c004140:	9d800044 	addi	r22,r19,1
 c004144:	9c800005 	stb	r18,0(r19)
 c004148:	b02f883a 	mov	r23,r22
 c00414c:	98c10626 	beq	r19,r3,c004568 <_dtoa_r+0x12f4>
 c004150:	800b883a 	mov	r5,r16
 c004154:	000f883a 	mov	r7,zero
 c004158:	01800284 	movi	r6,10
 c00415c:	e009883a 	mov	r4,fp
 c004160:	c0062900 	call	c006290 <__multadd>
 c004164:	1021883a 	mov	r16,r2
 c004168:	000f883a 	mov	r7,zero
 c00416c:	01800284 	movi	r6,10
 c004170:	880b883a 	mov	r5,r17
 c004174:	e009883a 	mov	r4,fp
 c004178:	8d002526 	beq	r17,r20,c004210 <_dtoa_r+0xf9c>
 c00417c:	c0062900 	call	c006290 <__multadd>
 c004180:	a00b883a 	mov	r5,r20
 c004184:	000f883a 	mov	r7,zero
 c004188:	01800284 	movi	r6,10
 c00418c:	e009883a 	mov	r4,fp
 c004190:	1023883a 	mov	r17,r2
 c004194:	c0062900 	call	c006290 <__multadd>
 c004198:	1029883a 	mov	r20,r2
 c00419c:	b027883a 	mov	r19,r22
 c0041a0:	003fc006 	br	c0040a4 <__alt_data_end+0xfc0040a4>
 c0041a4:	9011883a 	mov	r8,r18
 c0041a8:	00800e0e 	bge	zero,r2,c0041e4 <_dtoa_r+0xf70>
 c0041ac:	800b883a 	mov	r5,r16
 c0041b0:	01800044 	movi	r6,1
 c0041b4:	e009883a 	mov	r4,fp
 c0041b8:	da001715 	stw	r8,92(sp)
 c0041bc:	c0069fc0 	call	c0069fc <__lshift>
 c0041c0:	a80b883a 	mov	r5,r21
 c0041c4:	1009883a 	mov	r4,r2
 c0041c8:	1021883a 	mov	r16,r2
 c0041cc:	c006b440 	call	c006b44 <__mcmp>
 c0041d0:	da001717 	ldw	r8,92(sp)
 c0041d4:	0081960e 	bge	zero,r2,c004830 <_dtoa_r+0x15bc>
 c0041d8:	00800e44 	movi	r2,57
 c0041dc:	40817026 	beq	r8,r2,c0047a0 <_dtoa_r+0x152c>
 c0041e0:	ba000c44 	addi	r8,r23,49
 c0041e4:	8825883a 	mov	r18,r17
 c0041e8:	9dc00044 	addi	r23,r19,1
 c0041ec:	9a000005 	stb	r8,0(r19)
 c0041f0:	a023883a 	mov	r17,r20
 c0041f4:	dc000915 	stw	r16,36(sp)
 c0041f8:	003f2406 	br	c003e8c <__alt_data_end+0xfc003e8c>
 c0041fc:	00800e44 	movi	r2,57
 c004200:	9011883a 	mov	r8,r18
 c004204:	90816626 	beq	r18,r2,c0047a0 <_dtoa_r+0x152c>
 c004208:	05bff516 	blt	zero,r22,c0041e0 <__alt_data_end+0xfc0041e0>
 c00420c:	003ff506 	br	c0041e4 <__alt_data_end+0xfc0041e4>
 c004210:	c0062900 	call	c006290 <__multadd>
 c004214:	1023883a 	mov	r17,r2
 c004218:	1029883a 	mov	r20,r2
 c00421c:	003fdf06 	br	c00419c <__alt_data_end+0xfc00419c>
 c004220:	e009883a 	mov	r4,fp
 c004224:	c0062680 	call	c006268 <_Bfree>
 c004228:	00800044 	movi	r2,1
 c00422c:	003fbc06 	br	c004120 <__alt_data_end+0xfc004120>
 c004230:	a80b883a 	mov	r5,r21
 c004234:	8009883a 	mov	r4,r16
 c004238:	c006b440 	call	c006b44 <__mcmp>
 c00423c:	103edb0e 	bge	r2,zero,c003dac <__alt_data_end+0xfc003dac>
 c004240:	800b883a 	mov	r5,r16
 c004244:	000f883a 	mov	r7,zero
 c004248:	01800284 	movi	r6,10
 c00424c:	e009883a 	mov	r4,fp
 c004250:	c0062900 	call	c006290 <__multadd>
 c004254:	1021883a 	mov	r16,r2
 c004258:	d8800517 	ldw	r2,20(sp)
 c00425c:	d8c00b17 	ldw	r3,44(sp)
 c004260:	10bfffc4 	addi	r2,r2,-1
 c004264:	d8800515 	stw	r2,20(sp)
 c004268:	183f761e 	bne	r3,zero,c004044 <__alt_data_end+0xfc004044>
 c00426c:	d9000c17 	ldw	r4,48(sp)
 c004270:	0101730e 	bge	zero,r4,c004840 <_dtoa_r+0x15cc>
 c004274:	d9000615 	stw	r4,24(sp)
 c004278:	003ed006 	br	c003dbc <__alt_data_end+0xfc003dbc>
 c00427c:	00800084 	movi	r2,2
 c004280:	3081861e 	bne	r6,r2,c00489c <_dtoa_r+0x1628>
 c004284:	d8000b15 	stw	zero,44(sp)
 c004288:	003f3c06 	br	c003f7c <__alt_data_end+0xfc003f7c>
 c00428c:	dc000917 	ldw	r16,36(sp)
 c004290:	003e9206 	br	c003cdc <__alt_data_end+0xfc003cdc>
 c004294:	d9c00317 	ldw	r7,12(sp)
 c004298:	00800084 	movi	r2,2
 c00429c:	11fec50e 	bge	r2,r7,c003db4 <__alt_data_end+0xfc003db4>
 c0042a0:	d9000617 	ldw	r4,24(sp)
 c0042a4:	20013c1e 	bne	r4,zero,c004798 <_dtoa_r+0x1524>
 c0042a8:	a80b883a 	mov	r5,r21
 c0042ac:	000f883a 	mov	r7,zero
 c0042b0:	01800144 	movi	r6,5
 c0042b4:	e009883a 	mov	r4,fp
 c0042b8:	c0062900 	call	c006290 <__multadd>
 c0042bc:	100b883a 	mov	r5,r2
 c0042c0:	8009883a 	mov	r4,r16
 c0042c4:	102b883a 	mov	r21,r2
 c0042c8:	c006b440 	call	c006b44 <__mcmp>
 c0042cc:	dc000915 	stw	r16,36(sp)
 c0042d0:	00bf410e 	bge	zero,r2,c003fd8 <__alt_data_end+0xfc003fd8>
 c0042d4:	d9c00717 	ldw	r7,28(sp)
 c0042d8:	00800c44 	movi	r2,49
 c0042dc:	38800005 	stb	r2,0(r7)
 c0042e0:	d8800517 	ldw	r2,20(sp)
 c0042e4:	3dc00044 	addi	r23,r7,1
 c0042e8:	10800044 	addi	r2,r2,1
 c0042ec:	d8800515 	stw	r2,20(sp)
 c0042f0:	003f3d06 	br	c003fe8 <__alt_data_end+0xfc003fe8>
 c0042f4:	d9800517 	ldw	r6,20(sp)
 c0042f8:	d9c00717 	ldw	r7,28(sp)
 c0042fc:	00800c44 	movi	r2,49
 c004300:	31800044 	addi	r6,r6,1
 c004304:	d9800515 	stw	r6,20(sp)
 c004308:	38800005 	stb	r2,0(r7)
 c00430c:	003edf06 	br	c003e8c <__alt_data_end+0xfc003e8c>
 c004310:	d8000b15 	stw	zero,44(sp)
 c004314:	003c9f06 	br	c003594 <__alt_data_end+0xfc003594>
 c004318:	903e7e1e 	bne	r18,zero,c003d14 <__alt_data_end+0xfc003d14>
 c00431c:	00800434 	movhi	r2,16
 c004320:	10bfffc4 	addi	r2,r2,-1
 c004324:	9884703a 	and	r2,r19,r2
 c004328:	1000ea1e 	bne	r2,zero,c0046d4 <_dtoa_r+0x1460>
 c00432c:	9cdffc2c 	andhi	r19,r19,32752
 c004330:	9800e826 	beq	r19,zero,c0046d4 <_dtoa_r+0x1460>
 c004334:	d9c00817 	ldw	r7,32(sp)
 c004338:	b5800044 	addi	r22,r22,1
 c00433c:	04c00044 	movi	r19,1
 c004340:	39c00044 	addi	r7,r7,1
 c004344:	d9c00815 	stw	r7,32(sp)
 c004348:	d8800d17 	ldw	r2,52(sp)
 c00434c:	103e721e 	bne	r2,zero,c003d18 <__alt_data_end+0xfc003d18>
 c004350:	00800044 	movi	r2,1
 c004354:	003e7906 	br	c003d3c <__alt_data_end+0xfc003d3c>
 c004358:	8009883a 	mov	r4,r16
 c00435c:	c00d5ec0 	call	c00d5ec <__floatsidf>
 c004360:	d9800f17 	ldw	r6,60(sp)
 c004364:	d9c01017 	ldw	r7,64(sp)
 c004368:	1009883a 	mov	r4,r2
 c00436c:	180b883a 	mov	r5,r3
 c004370:	c00c4040 	call	c00c404 <__muldf3>
 c004374:	000d883a 	mov	r6,zero
 c004378:	01d00734 	movhi	r7,16412
 c00437c:	1009883a 	mov	r4,r2
 c004380:	180b883a 	mov	r5,r3
 c004384:	c00af300 	call	c00af30 <__adddf3>
 c004388:	047f3034 	movhi	r17,64704
 c00438c:	1021883a 	mov	r16,r2
 c004390:	1c63883a 	add	r17,r3,r17
 c004394:	d9000f17 	ldw	r4,60(sp)
 c004398:	d9401017 	ldw	r5,64(sp)
 c00439c:	000d883a 	mov	r6,zero
 c0043a0:	01d00534 	movhi	r7,16404
 c0043a4:	c00cc700 	call	c00cc70 <__subdf3>
 c0043a8:	800d883a 	mov	r6,r16
 c0043ac:	880f883a 	mov	r7,r17
 c0043b0:	1009883a 	mov	r4,r2
 c0043b4:	180b883a 	mov	r5,r3
 c0043b8:	102b883a 	mov	r21,r2
 c0043bc:	1829883a 	mov	r20,r3
 c0043c0:	c00c2340 	call	c00c234 <__gedf2>
 c0043c4:	00806c16 	blt	zero,r2,c004578 <_dtoa_r+0x1304>
 c0043c8:	89e0003c 	xorhi	r7,r17,32768
 c0043cc:	800d883a 	mov	r6,r16
 c0043d0:	a809883a 	mov	r4,r21
 c0043d4:	a00b883a 	mov	r5,r20
 c0043d8:	c00c3100 	call	c00c310 <__ledf2>
 c0043dc:	103d7e0e 	bge	r2,zero,c0039d8 <__alt_data_end+0xfc0039d8>
 c0043e0:	002b883a 	mov	r21,zero
 c0043e4:	0023883a 	mov	r17,zero
 c0043e8:	003efb06 	br	c003fd8 <__alt_data_end+0xfc003fd8>
 c0043ec:	d8800717 	ldw	r2,28(sp)
 c0043f0:	003bd006 	br	c003334 <__alt_data_end+0xfc003334>
 c0043f4:	d9000a17 	ldw	r4,40(sp)
 c0043f8:	d9800d17 	ldw	r6,52(sp)
 c0043fc:	dd400a15 	stw	r21,40(sp)
 c004400:	a905c83a 	sub	r2,r21,r4
 c004404:	308d883a 	add	r6,r6,r2
 c004408:	d9800d15 	stw	r6,52(sp)
 c00440c:	002b883a 	mov	r21,zero
 c004410:	003e0606 	br	c003c2c <__alt_data_end+0xfc003c2c>
 c004414:	9023883a 	mov	r17,r18
 c004418:	9829883a 	mov	r20,r19
 c00441c:	04000084 	movi	r16,2
 c004420:	003c9206 	br	c00366c <__alt_data_end+0xfc00366c>
 c004424:	04000044 	movi	r16,1
 c004428:	dc000c15 	stw	r16,48(sp)
 c00442c:	dc000615 	stw	r16,24(sp)
 c004430:	dc002215 	stw	r16,136(sp)
 c004434:	e0001115 	stw	zero,68(fp)
 c004438:	000b883a 	mov	r5,zero
 c00443c:	003c6906 	br	c0035e4 <__alt_data_end+0xfc0035e4>
 c004440:	3021883a 	mov	r16,r6
 c004444:	003ffb06 	br	c004434 <__alt_data_end+0xfc004434>
 c004448:	1000021e 	bne	r2,zero,c004454 <_dtoa_r+0x11e0>
 c00444c:	4200004c 	andi	r8,r8,1
 c004450:	403e7d1e 	bne	r8,zero,c003e48 <__alt_data_end+0xfc003e48>
 c004454:	01000c04 	movi	r4,48
 c004458:	00000106 	br	c004460 <_dtoa_r+0x11ec>
 c00445c:	102f883a 	mov	r23,r2
 c004460:	b8bfffc4 	addi	r2,r23,-1
 c004464:	10c00007 	ldb	r3,0(r2)
 c004468:	193ffc26 	beq	r3,r4,c00445c <__alt_data_end+0xfc00445c>
 c00446c:	003e8706 	br	c003e8c <__alt_data_end+0xfc003e8c>
 c004470:	d8800517 	ldw	r2,20(sp)
 c004474:	00a3c83a 	sub	r17,zero,r2
 c004478:	8800a426 	beq	r17,zero,c00470c <_dtoa_r+0x1498>
 c00447c:	888003cc 	andi	r2,r17,15
 c004480:	100490fa 	slli	r2,r2,3
 c004484:	00c30074 	movhi	r3,3073
 c004488:	18c0bf04 	addi	r3,r3,764
 c00448c:	1885883a 	add	r2,r3,r2
 c004490:	11800017 	ldw	r6,0(r2)
 c004494:	11c00117 	ldw	r7,4(r2)
 c004498:	9009883a 	mov	r4,r18
 c00449c:	980b883a 	mov	r5,r19
 c0044a0:	8823d13a 	srai	r17,r17,4
 c0044a4:	c00c4040 	call	c00c404 <__muldf3>
 c0044a8:	d8800f15 	stw	r2,60(sp)
 c0044ac:	d8c01015 	stw	r3,64(sp)
 c0044b0:	8800e826 	beq	r17,zero,c004854 <_dtoa_r+0x15e0>
 c0044b4:	05030074 	movhi	r20,3073
 c0044b8:	a500b504 	addi	r20,r20,724
 c0044bc:	04000084 	movi	r16,2
 c0044c0:	8980004c 	andi	r6,r17,1
 c0044c4:	1009883a 	mov	r4,r2
 c0044c8:	8823d07a 	srai	r17,r17,1
 c0044cc:	180b883a 	mov	r5,r3
 c0044d0:	30000426 	beq	r6,zero,c0044e4 <_dtoa_r+0x1270>
 c0044d4:	a1800017 	ldw	r6,0(r20)
 c0044d8:	a1c00117 	ldw	r7,4(r20)
 c0044dc:	84000044 	addi	r16,r16,1
 c0044e0:	c00c4040 	call	c00c404 <__muldf3>
 c0044e4:	a5000204 	addi	r20,r20,8
 c0044e8:	883ff51e 	bne	r17,zero,c0044c0 <__alt_data_end+0xfc0044c0>
 c0044ec:	d8800f15 	stw	r2,60(sp)
 c0044f0:	d8c01015 	stw	r3,64(sp)
 c0044f4:	003c7606 	br	c0036d0 <__alt_data_end+0xfc0036d0>
 c0044f8:	00c00c04 	movi	r3,48
 c0044fc:	10c00005 	stb	r3,0(r2)
 c004500:	d8c00517 	ldw	r3,20(sp)
 c004504:	bd3fffc3 	ldbu	r20,-1(r23)
 c004508:	18c00044 	addi	r3,r3,1
 c00450c:	d8c00515 	stw	r3,20(sp)
 c004510:	003db906 	br	c003bf8 <__alt_data_end+0xfc003bf8>
 c004514:	89400117 	ldw	r5,4(r17)
 c004518:	e009883a 	mov	r4,fp
 c00451c:	c0061c00 	call	c0061c0 <_Balloc>
 c004520:	89800417 	ldw	r6,16(r17)
 c004524:	89400304 	addi	r5,r17,12
 c004528:	11000304 	addi	r4,r2,12
 c00452c:	31800084 	addi	r6,r6,2
 c004530:	318d883a 	add	r6,r6,r6
 c004534:	318d883a 	add	r6,r6,r6
 c004538:	1027883a 	mov	r19,r2
 c00453c:	c0009900 	call	c000990 <memcpy>
 c004540:	01800044 	movi	r6,1
 c004544:	980b883a 	mov	r5,r19
 c004548:	e009883a 	mov	r4,fp
 c00454c:	c0069fc0 	call	c0069fc <__lshift>
 c004550:	1029883a 	mov	r20,r2
 c004554:	003ecc06 	br	c004088 <__alt_data_end+0xfc004088>
 c004558:	00800e44 	movi	r2,57
 c00455c:	90809026 	beq	r18,r2,c0047a0 <_dtoa_r+0x152c>
 c004560:	92000044 	addi	r8,r18,1
 c004564:	003f1f06 	br	c0041e4 <__alt_data_end+0xfc0041e4>
 c004568:	9011883a 	mov	r8,r18
 c00456c:	8825883a 	mov	r18,r17
 c004570:	a023883a 	mov	r17,r20
 c004574:	003e2906 	br	c003e1c <__alt_data_end+0xfc003e1c>
 c004578:	002b883a 	mov	r21,zero
 c00457c:	0023883a 	mov	r17,zero
 c004580:	003f5406 	br	c0042d4 <__alt_data_end+0xfc0042d4>
 c004584:	61bfffc4 	addi	r6,r12,-1
 c004588:	300490fa 	slli	r2,r6,3
 c00458c:	00c30074 	movhi	r3,3073
 c004590:	18c0bf04 	addi	r3,r3,764
 c004594:	1885883a 	add	r2,r3,r2
 c004598:	11000017 	ldw	r4,0(r2)
 c00459c:	11400117 	ldw	r5,4(r2)
 c0045a0:	d8800717 	ldw	r2,28(sp)
 c0045a4:	880f883a 	mov	r7,r17
 c0045a8:	d9801215 	stw	r6,72(sp)
 c0045ac:	800d883a 	mov	r6,r16
 c0045b0:	db001615 	stw	r12,88(sp)
 c0045b4:	15c00044 	addi	r23,r2,1
 c0045b8:	c00c4040 	call	c00c404 <__muldf3>
 c0045bc:	d9401017 	ldw	r5,64(sp)
 c0045c0:	d9000f17 	ldw	r4,60(sp)
 c0045c4:	d8c01515 	stw	r3,84(sp)
 c0045c8:	d8801415 	stw	r2,80(sp)
 c0045cc:	c00d56c0 	call	c00d56c <__fixdfsi>
 c0045d0:	1009883a 	mov	r4,r2
 c0045d4:	1021883a 	mov	r16,r2
 c0045d8:	c00d5ec0 	call	c00d5ec <__floatsidf>
 c0045dc:	d9000f17 	ldw	r4,60(sp)
 c0045e0:	d9401017 	ldw	r5,64(sp)
 c0045e4:	100d883a 	mov	r6,r2
 c0045e8:	180f883a 	mov	r7,r3
 c0045ec:	c00cc700 	call	c00cc70 <__subdf3>
 c0045f0:	1829883a 	mov	r20,r3
 c0045f4:	d8c00717 	ldw	r3,28(sp)
 c0045f8:	84000c04 	addi	r16,r16,48
 c0045fc:	1023883a 	mov	r17,r2
 c004600:	1c000005 	stb	r16,0(r3)
 c004604:	db001617 	ldw	r12,88(sp)
 c004608:	00800044 	movi	r2,1
 c00460c:	60802226 	beq	r12,r2,c004698 <_dtoa_r+0x1424>
 c004610:	d9c00717 	ldw	r7,28(sp)
 c004614:	8805883a 	mov	r2,r17
 c004618:	b82b883a 	mov	r21,r23
 c00461c:	3b19883a 	add	r12,r7,r12
 c004620:	6023883a 	mov	r17,r12
 c004624:	a007883a 	mov	r3,r20
 c004628:	dc800f15 	stw	r18,60(sp)
 c00462c:	000d883a 	mov	r6,zero
 c004630:	01d00934 	movhi	r7,16420
 c004634:	1009883a 	mov	r4,r2
 c004638:	180b883a 	mov	r5,r3
 c00463c:	c00c4040 	call	c00c404 <__muldf3>
 c004640:	180b883a 	mov	r5,r3
 c004644:	1009883a 	mov	r4,r2
 c004648:	1829883a 	mov	r20,r3
 c00464c:	1025883a 	mov	r18,r2
 c004650:	c00d56c0 	call	c00d56c <__fixdfsi>
 c004654:	1009883a 	mov	r4,r2
 c004658:	1021883a 	mov	r16,r2
 c00465c:	c00d5ec0 	call	c00d5ec <__floatsidf>
 c004660:	100d883a 	mov	r6,r2
 c004664:	180f883a 	mov	r7,r3
 c004668:	9009883a 	mov	r4,r18
 c00466c:	a00b883a 	mov	r5,r20
 c004670:	84000c04 	addi	r16,r16,48
 c004674:	c00cc700 	call	c00cc70 <__subdf3>
 c004678:	ad400044 	addi	r21,r21,1
 c00467c:	ac3fffc5 	stb	r16,-1(r21)
 c004680:	ac7fea1e 	bne	r21,r17,c00462c <__alt_data_end+0xfc00462c>
 c004684:	1023883a 	mov	r17,r2
 c004688:	d8801217 	ldw	r2,72(sp)
 c00468c:	dc800f17 	ldw	r18,60(sp)
 c004690:	1829883a 	mov	r20,r3
 c004694:	b8af883a 	add	r23,r23,r2
 c004698:	d9001417 	ldw	r4,80(sp)
 c00469c:	d9401517 	ldw	r5,84(sp)
 c0046a0:	000d883a 	mov	r6,zero
 c0046a4:	01cff834 	movhi	r7,16352
 c0046a8:	c00af300 	call	c00af30 <__adddf3>
 c0046ac:	880d883a 	mov	r6,r17
 c0046b0:	a00f883a 	mov	r7,r20
 c0046b4:	1009883a 	mov	r4,r2
 c0046b8:	180b883a 	mov	r5,r3
 c0046bc:	c00c3100 	call	c00c310 <__ledf2>
 c0046c0:	10003e0e 	bge	r2,zero,c0047bc <_dtoa_r+0x1548>
 c0046c4:	d9001317 	ldw	r4,76(sp)
 c0046c8:	bd3fffc3 	ldbu	r20,-1(r23)
 c0046cc:	d9000515 	stw	r4,20(sp)
 c0046d0:	003d3b06 	br	c003bc0 <__alt_data_end+0xfc003bc0>
 c0046d4:	0027883a 	mov	r19,zero
 c0046d8:	003f1b06 	br	c004348 <__alt_data_end+0xfc004348>
 c0046dc:	d8800817 	ldw	r2,32(sp)
 c0046e0:	11e9c83a 	sub	r20,r2,r7
 c0046e4:	0005883a 	mov	r2,zero
 c0046e8:	003d5406 	br	c003c3c <__alt_data_end+0xfc003c3c>
 c0046ec:	00800044 	movi	r2,1
 c0046f0:	003dc706 	br	c003e10 <__alt_data_end+0xfc003e10>
 c0046f4:	d8c00217 	ldw	r3,8(sp)
 c0046f8:	00800d84 	movi	r2,54
 c0046fc:	dd400a17 	ldw	r21,40(sp)
 c004700:	10c5c83a 	sub	r2,r2,r3
 c004704:	dd000817 	ldw	r20,32(sp)
 c004708:	003d4c06 	br	c003c3c <__alt_data_end+0xfc003c3c>
 c00470c:	dc800f15 	stw	r18,60(sp)
 c004710:	dcc01015 	stw	r19,64(sp)
 c004714:	04000084 	movi	r16,2
 c004718:	003bed06 	br	c0036d0 <__alt_data_end+0xfc0036d0>
 c00471c:	d9000617 	ldw	r4,24(sp)
 c004720:	203f0d26 	beq	r4,zero,c004358 <__alt_data_end+0xfc004358>
 c004724:	d9800c17 	ldw	r6,48(sp)
 c004728:	01bcab0e 	bge	zero,r6,c0039d8 <__alt_data_end+0xfc0039d8>
 c00472c:	d9401017 	ldw	r5,64(sp)
 c004730:	d9000f17 	ldw	r4,60(sp)
 c004734:	000d883a 	mov	r6,zero
 c004738:	01d00934 	movhi	r7,16420
 c00473c:	c00c4040 	call	c00c404 <__muldf3>
 c004740:	81000044 	addi	r4,r16,1
 c004744:	d8800f15 	stw	r2,60(sp)
 c004748:	d8c01015 	stw	r3,64(sp)
 c00474c:	c00d5ec0 	call	c00d5ec <__floatsidf>
 c004750:	d9800f17 	ldw	r6,60(sp)
 c004754:	d9c01017 	ldw	r7,64(sp)
 c004758:	1009883a 	mov	r4,r2
 c00475c:	180b883a 	mov	r5,r3
 c004760:	c00c4040 	call	c00c404 <__muldf3>
 c004764:	01d00734 	movhi	r7,16412
 c004768:	000d883a 	mov	r6,zero
 c00476c:	1009883a 	mov	r4,r2
 c004770:	180b883a 	mov	r5,r3
 c004774:	c00af300 	call	c00af30 <__adddf3>
 c004778:	d9c00517 	ldw	r7,20(sp)
 c00477c:	047f3034 	movhi	r17,64704
 c004780:	1021883a 	mov	r16,r2
 c004784:	39ffffc4 	addi	r7,r7,-1
 c004788:	d9c01315 	stw	r7,76(sp)
 c00478c:	1c63883a 	add	r17,r3,r17
 c004790:	db000c17 	ldw	r12,48(sp)
 c004794:	003bea06 	br	c003740 <__alt_data_end+0xfc003740>
 c004798:	dc000915 	stw	r16,36(sp)
 c00479c:	003e0e06 	br	c003fd8 <__alt_data_end+0xfc003fd8>
 c0047a0:	01000e44 	movi	r4,57
 c0047a4:	8825883a 	mov	r18,r17
 c0047a8:	9dc00044 	addi	r23,r19,1
 c0047ac:	99000005 	stb	r4,0(r19)
 c0047b0:	a023883a 	mov	r17,r20
 c0047b4:	dc000915 	stw	r16,36(sp)
 c0047b8:	003da406 	br	c003e4c <__alt_data_end+0xfc003e4c>
 c0047bc:	d9801417 	ldw	r6,80(sp)
 c0047c0:	d9c01517 	ldw	r7,84(sp)
 c0047c4:	0009883a 	mov	r4,zero
 c0047c8:	014ff834 	movhi	r5,16352
 c0047cc:	c00cc700 	call	c00cc70 <__subdf3>
 c0047d0:	880d883a 	mov	r6,r17
 c0047d4:	a00f883a 	mov	r7,r20
 c0047d8:	1009883a 	mov	r4,r2
 c0047dc:	180b883a 	mov	r5,r3
 c0047e0:	c00c2340 	call	c00c234 <__gedf2>
 c0047e4:	00bc7c0e 	bge	zero,r2,c0039d8 <__alt_data_end+0xfc0039d8>
 c0047e8:	01000c04 	movi	r4,48
 c0047ec:	00000106 	br	c0047f4 <_dtoa_r+0x1580>
 c0047f0:	102f883a 	mov	r23,r2
 c0047f4:	b8bfffc4 	addi	r2,r23,-1
 c0047f8:	10c00007 	ldb	r3,0(r2)
 c0047fc:	193ffc26 	beq	r3,r4,c0047f0 <__alt_data_end+0xfc0047f0>
 c004800:	d9801317 	ldw	r6,76(sp)
 c004804:	d9800515 	stw	r6,20(sp)
 c004808:	003c4406 	br	c00391c <__alt_data_end+0xfc00391c>
 c00480c:	d9801317 	ldw	r6,76(sp)
 c004810:	d9800515 	stw	r6,20(sp)
 c004814:	003cea06 	br	c003bc0 <__alt_data_end+0xfc003bc0>
 c004818:	dd800f17 	ldw	r22,60(sp)
 c00481c:	dcc01017 	ldw	r19,64(sp)
 c004820:	dc801217 	ldw	r18,72(sp)
 c004824:	003c6c06 	br	c0039d8 <__alt_data_end+0xfc0039d8>
 c004828:	903e031e 	bne	r18,zero,c004038 <__alt_data_end+0xfc004038>
 c00482c:	003ebb06 	br	c00431c <__alt_data_end+0xfc00431c>
 c004830:	103e6c1e 	bne	r2,zero,c0041e4 <__alt_data_end+0xfc0041e4>
 c004834:	4080004c 	andi	r2,r8,1
 c004838:	103e6a26 	beq	r2,zero,c0041e4 <__alt_data_end+0xfc0041e4>
 c00483c:	003e6606 	br	c0041d8 <__alt_data_end+0xfc0041d8>
 c004840:	d8c00317 	ldw	r3,12(sp)
 c004844:	00800084 	movi	r2,2
 c004848:	10c02916 	blt	r2,r3,c0048f0 <_dtoa_r+0x167c>
 c00484c:	d9000c17 	ldw	r4,48(sp)
 c004850:	003e8806 	br	c004274 <__alt_data_end+0xfc004274>
 c004854:	04000084 	movi	r16,2
 c004858:	003b9d06 	br	c0036d0 <__alt_data_end+0xfc0036d0>
 c00485c:	d9001317 	ldw	r4,76(sp)
 c004860:	d9000515 	stw	r4,20(sp)
 c004864:	003cd606 	br	c003bc0 <__alt_data_end+0xfc003bc0>
 c004868:	d8801317 	ldw	r2,76(sp)
 c00486c:	d8800515 	stw	r2,20(sp)
 c004870:	003c2a06 	br	c00391c <__alt_data_end+0xfc00391c>
 c004874:	d9800317 	ldw	r6,12(sp)
 c004878:	00800084 	movi	r2,2
 c00487c:	11801516 	blt	r2,r6,c0048d4 <_dtoa_r+0x1660>
 c004880:	d9c00c17 	ldw	r7,48(sp)
 c004884:	d9c00615 	stw	r7,24(sp)
 c004888:	003df706 	br	c004068 <__alt_data_end+0xfc004068>
 c00488c:	193d3926 	beq	r3,r4,c003d74 <__alt_data_end+0xfc003d74>
 c004890:	00c00f04 	movi	r3,60
 c004894:	1885c83a 	sub	r2,r3,r2
 c004898:	003ddf06 	br	c004018 <__alt_data_end+0xfc004018>
 c00489c:	e009883a 	mov	r4,fp
 c0048a0:	e0001115 	stw	zero,68(fp)
 c0048a4:	000b883a 	mov	r5,zero
 c0048a8:	c0061c00 	call	c0061c0 <_Balloc>
 c0048ac:	d8800715 	stw	r2,28(sp)
 c0048b0:	d8c00717 	ldw	r3,28(sp)
 c0048b4:	00bfffc4 	movi	r2,-1
 c0048b8:	01000044 	movi	r4,1
 c0048bc:	d8800c15 	stw	r2,48(sp)
 c0048c0:	e0c01015 	stw	r3,64(fp)
 c0048c4:	d9000b15 	stw	r4,44(sp)
 c0048c8:	d8800615 	stw	r2,24(sp)
 c0048cc:	d8002215 	stw	zero,136(sp)
 c0048d0:	003c4106 	br	c0039d8 <__alt_data_end+0xfc0039d8>
 c0048d4:	d8c00c17 	ldw	r3,48(sp)
 c0048d8:	d8c00615 	stw	r3,24(sp)
 c0048dc:	003e7006 	br	c0042a0 <__alt_data_end+0xfc0042a0>
 c0048e0:	04400044 	movi	r17,1
 c0048e4:	003b2006 	br	c003568 <__alt_data_end+0xfc003568>
 c0048e8:	000b883a 	mov	r5,zero
 c0048ec:	003b3d06 	br	c0035e4 <__alt_data_end+0xfc0035e4>
 c0048f0:	d8800c17 	ldw	r2,48(sp)
 c0048f4:	d8800615 	stw	r2,24(sp)
 c0048f8:	003e6906 	br	c0042a0 <__alt_data_end+0xfc0042a0>

0c0048fc <__sflush_r>:
 c0048fc:	2880030b 	ldhu	r2,12(r5)
 c004900:	defffb04 	addi	sp,sp,-20
 c004904:	dcc00315 	stw	r19,12(sp)
 c004908:	dc400115 	stw	r17,4(sp)
 c00490c:	dfc00415 	stw	ra,16(sp)
 c004910:	dc800215 	stw	r18,8(sp)
 c004914:	dc000015 	stw	r16,0(sp)
 c004918:	10c0020c 	andi	r3,r2,8
 c00491c:	2823883a 	mov	r17,r5
 c004920:	2027883a 	mov	r19,r4
 c004924:	1800311e 	bne	r3,zero,c0049ec <__sflush_r+0xf0>
 c004928:	28c00117 	ldw	r3,4(r5)
 c00492c:	10820014 	ori	r2,r2,2048
 c004930:	2880030d 	sth	r2,12(r5)
 c004934:	00c04b0e 	bge	zero,r3,c004a64 <__sflush_r+0x168>
 c004938:	8a000a17 	ldw	r8,40(r17)
 c00493c:	40002326 	beq	r8,zero,c0049cc <__sflush_r+0xd0>
 c004940:	9c000017 	ldw	r16,0(r19)
 c004944:	10c4000c 	andi	r3,r2,4096
 c004948:	98000015 	stw	zero,0(r19)
 c00494c:	18004826 	beq	r3,zero,c004a70 <__sflush_r+0x174>
 c004950:	89801417 	ldw	r6,80(r17)
 c004954:	10c0010c 	andi	r3,r2,4
 c004958:	18000626 	beq	r3,zero,c004974 <__sflush_r+0x78>
 c00495c:	88c00117 	ldw	r3,4(r17)
 c004960:	88800c17 	ldw	r2,48(r17)
 c004964:	30cdc83a 	sub	r6,r6,r3
 c004968:	10000226 	beq	r2,zero,c004974 <__sflush_r+0x78>
 c00496c:	88800f17 	ldw	r2,60(r17)
 c004970:	308dc83a 	sub	r6,r6,r2
 c004974:	89400717 	ldw	r5,28(r17)
 c004978:	000f883a 	mov	r7,zero
 c00497c:	9809883a 	mov	r4,r19
 c004980:	403ee83a 	callr	r8
 c004984:	00ffffc4 	movi	r3,-1
 c004988:	10c04426 	beq	r2,r3,c004a9c <__sflush_r+0x1a0>
 c00498c:	88c0030b 	ldhu	r3,12(r17)
 c004990:	89000417 	ldw	r4,16(r17)
 c004994:	88000115 	stw	zero,4(r17)
 c004998:	197dffcc 	andi	r5,r3,63487
 c00499c:	8940030d 	sth	r5,12(r17)
 c0049a0:	89000015 	stw	r4,0(r17)
 c0049a4:	18c4000c 	andi	r3,r3,4096
 c0049a8:	18002c1e 	bne	r3,zero,c004a5c <__sflush_r+0x160>
 c0049ac:	89400c17 	ldw	r5,48(r17)
 c0049b0:	9c000015 	stw	r16,0(r19)
 c0049b4:	28000526 	beq	r5,zero,c0049cc <__sflush_r+0xd0>
 c0049b8:	88801004 	addi	r2,r17,64
 c0049bc:	28800226 	beq	r5,r2,c0049c8 <__sflush_r+0xcc>
 c0049c0:	9809883a 	mov	r4,r19
 c0049c4:	c0050780 	call	c005078 <_free_r>
 c0049c8:	88000c15 	stw	zero,48(r17)
 c0049cc:	0005883a 	mov	r2,zero
 c0049d0:	dfc00417 	ldw	ra,16(sp)
 c0049d4:	dcc00317 	ldw	r19,12(sp)
 c0049d8:	dc800217 	ldw	r18,8(sp)
 c0049dc:	dc400117 	ldw	r17,4(sp)
 c0049e0:	dc000017 	ldw	r16,0(sp)
 c0049e4:	dec00504 	addi	sp,sp,20
 c0049e8:	f800283a 	ret
 c0049ec:	2c800417 	ldw	r18,16(r5)
 c0049f0:	903ff626 	beq	r18,zero,c0049cc <__alt_data_end+0xfc0049cc>
 c0049f4:	2c000017 	ldw	r16,0(r5)
 c0049f8:	108000cc 	andi	r2,r2,3
 c0049fc:	2c800015 	stw	r18,0(r5)
 c004a00:	84a1c83a 	sub	r16,r16,r18
 c004a04:	1000131e 	bne	r2,zero,c004a54 <__sflush_r+0x158>
 c004a08:	28800517 	ldw	r2,20(r5)
 c004a0c:	88800215 	stw	r2,8(r17)
 c004a10:	04000316 	blt	zero,r16,c004a20 <__sflush_r+0x124>
 c004a14:	003fed06 	br	c0049cc <__alt_data_end+0xfc0049cc>
 c004a18:	90a5883a 	add	r18,r18,r2
 c004a1c:	043feb0e 	bge	zero,r16,c0049cc <__alt_data_end+0xfc0049cc>
 c004a20:	88800917 	ldw	r2,36(r17)
 c004a24:	89400717 	ldw	r5,28(r17)
 c004a28:	800f883a 	mov	r7,r16
 c004a2c:	900d883a 	mov	r6,r18
 c004a30:	9809883a 	mov	r4,r19
 c004a34:	103ee83a 	callr	r2
 c004a38:	80a1c83a 	sub	r16,r16,r2
 c004a3c:	00bff616 	blt	zero,r2,c004a18 <__alt_data_end+0xfc004a18>
 c004a40:	88c0030b 	ldhu	r3,12(r17)
 c004a44:	00bfffc4 	movi	r2,-1
 c004a48:	18c01014 	ori	r3,r3,64
 c004a4c:	88c0030d 	sth	r3,12(r17)
 c004a50:	003fdf06 	br	c0049d0 <__alt_data_end+0xfc0049d0>
 c004a54:	0005883a 	mov	r2,zero
 c004a58:	003fec06 	br	c004a0c <__alt_data_end+0xfc004a0c>
 c004a5c:	88801415 	stw	r2,80(r17)
 c004a60:	003fd206 	br	c0049ac <__alt_data_end+0xfc0049ac>
 c004a64:	28c00f17 	ldw	r3,60(r5)
 c004a68:	00ffb316 	blt	zero,r3,c004938 <__alt_data_end+0xfc004938>
 c004a6c:	003fd706 	br	c0049cc <__alt_data_end+0xfc0049cc>
 c004a70:	89400717 	ldw	r5,28(r17)
 c004a74:	000d883a 	mov	r6,zero
 c004a78:	01c00044 	movi	r7,1
 c004a7c:	9809883a 	mov	r4,r19
 c004a80:	403ee83a 	callr	r8
 c004a84:	100d883a 	mov	r6,r2
 c004a88:	00bfffc4 	movi	r2,-1
 c004a8c:	30801426 	beq	r6,r2,c004ae0 <__sflush_r+0x1e4>
 c004a90:	8880030b 	ldhu	r2,12(r17)
 c004a94:	8a000a17 	ldw	r8,40(r17)
 c004a98:	003fae06 	br	c004954 <__alt_data_end+0xfc004954>
 c004a9c:	98c00017 	ldw	r3,0(r19)
 c004aa0:	183fba26 	beq	r3,zero,c00498c <__alt_data_end+0xfc00498c>
 c004aa4:	01000744 	movi	r4,29
 c004aa8:	19000626 	beq	r3,r4,c004ac4 <__sflush_r+0x1c8>
 c004aac:	01000584 	movi	r4,22
 c004ab0:	19000426 	beq	r3,r4,c004ac4 <__sflush_r+0x1c8>
 c004ab4:	88c0030b 	ldhu	r3,12(r17)
 c004ab8:	18c01014 	ori	r3,r3,64
 c004abc:	88c0030d 	sth	r3,12(r17)
 c004ac0:	003fc306 	br	c0049d0 <__alt_data_end+0xfc0049d0>
 c004ac4:	8880030b 	ldhu	r2,12(r17)
 c004ac8:	88c00417 	ldw	r3,16(r17)
 c004acc:	88000115 	stw	zero,4(r17)
 c004ad0:	10bdffcc 	andi	r2,r2,63487
 c004ad4:	8880030d 	sth	r2,12(r17)
 c004ad8:	88c00015 	stw	r3,0(r17)
 c004adc:	003fb306 	br	c0049ac <__alt_data_end+0xfc0049ac>
 c004ae0:	98800017 	ldw	r2,0(r19)
 c004ae4:	103fea26 	beq	r2,zero,c004a90 <__alt_data_end+0xfc004a90>
 c004ae8:	00c00744 	movi	r3,29
 c004aec:	10c00226 	beq	r2,r3,c004af8 <__sflush_r+0x1fc>
 c004af0:	00c00584 	movi	r3,22
 c004af4:	10c0031e 	bne	r2,r3,c004b04 <__sflush_r+0x208>
 c004af8:	9c000015 	stw	r16,0(r19)
 c004afc:	0005883a 	mov	r2,zero
 c004b00:	003fb306 	br	c0049d0 <__alt_data_end+0xfc0049d0>
 c004b04:	88c0030b 	ldhu	r3,12(r17)
 c004b08:	3005883a 	mov	r2,r6
 c004b0c:	18c01014 	ori	r3,r3,64
 c004b10:	88c0030d 	sth	r3,12(r17)
 c004b14:	003fae06 	br	c0049d0 <__alt_data_end+0xfc0049d0>

0c004b18 <_fflush_r>:
 c004b18:	defffd04 	addi	sp,sp,-12
 c004b1c:	dc000115 	stw	r16,4(sp)
 c004b20:	dfc00215 	stw	ra,8(sp)
 c004b24:	2021883a 	mov	r16,r4
 c004b28:	20000226 	beq	r4,zero,c004b34 <_fflush_r+0x1c>
 c004b2c:	20800e17 	ldw	r2,56(r4)
 c004b30:	10000c26 	beq	r2,zero,c004b64 <_fflush_r+0x4c>
 c004b34:	2880030f 	ldh	r2,12(r5)
 c004b38:	1000051e 	bne	r2,zero,c004b50 <_fflush_r+0x38>
 c004b3c:	0005883a 	mov	r2,zero
 c004b40:	dfc00217 	ldw	ra,8(sp)
 c004b44:	dc000117 	ldw	r16,4(sp)
 c004b48:	dec00304 	addi	sp,sp,12
 c004b4c:	f800283a 	ret
 c004b50:	8009883a 	mov	r4,r16
 c004b54:	dfc00217 	ldw	ra,8(sp)
 c004b58:	dc000117 	ldw	r16,4(sp)
 c004b5c:	dec00304 	addi	sp,sp,12
 c004b60:	c0048fc1 	jmpi	c0048fc <__sflush_r>
 c004b64:	d9400015 	stw	r5,0(sp)
 c004b68:	c004f040 	call	c004f04 <__sinit>
 c004b6c:	d9400017 	ldw	r5,0(sp)
 c004b70:	003ff006 	br	c004b34 <__alt_data_end+0xfc004b34>

0c004b74 <fflush>:
 c004b74:	20000526 	beq	r4,zero,c004b8c <fflush+0x18>
 c004b78:	00830074 	movhi	r2,3073
 c004b7c:	1087f404 	addi	r2,r2,8144
 c004b80:	200b883a 	mov	r5,r4
 c004b84:	11000017 	ldw	r4,0(r2)
 c004b88:	c004b181 	jmpi	c004b18 <_fflush_r>
 c004b8c:	00830074 	movhi	r2,3073
 c004b90:	1087f304 	addi	r2,r2,8140
 c004b94:	11000017 	ldw	r4,0(r2)
 c004b98:	01430034 	movhi	r5,3072
 c004b9c:	2952c604 	addi	r5,r5,19224
 c004ba0:	c00544c1 	jmpi	c00544c <_fwalk_reent>

0c004ba4 <__fp_unlock>:
 c004ba4:	0005883a 	mov	r2,zero
 c004ba8:	f800283a 	ret

0c004bac <_cleanup_r>:
 c004bac:	01430074 	movhi	r5,3073
 c004bb0:	29639e04 	addi	r5,r5,-29064
 c004bb4:	c00544c1 	jmpi	c00544c <_fwalk_reent>

0c004bb8 <__sinit.part.1>:
 c004bb8:	defff704 	addi	sp,sp,-36
 c004bbc:	00c30034 	movhi	r3,3072
 c004bc0:	dfc00815 	stw	ra,32(sp)
 c004bc4:	ddc00715 	stw	r23,28(sp)
 c004bc8:	dd800615 	stw	r22,24(sp)
 c004bcc:	dd400515 	stw	r21,20(sp)
 c004bd0:	dd000415 	stw	r20,16(sp)
 c004bd4:	dcc00315 	stw	r19,12(sp)
 c004bd8:	dc800215 	stw	r18,8(sp)
 c004bdc:	dc400115 	stw	r17,4(sp)
 c004be0:	dc000015 	stw	r16,0(sp)
 c004be4:	18d2eb04 	addi	r3,r3,19372
 c004be8:	24000117 	ldw	r16,4(r4)
 c004bec:	20c00f15 	stw	r3,60(r4)
 c004bf0:	2080bb04 	addi	r2,r4,748
 c004bf4:	00c000c4 	movi	r3,3
 c004bf8:	20c0b915 	stw	r3,740(r4)
 c004bfc:	2080ba15 	stw	r2,744(r4)
 c004c00:	2000b815 	stw	zero,736(r4)
 c004c04:	05c00204 	movi	r23,8
 c004c08:	00800104 	movi	r2,4
 c004c0c:	2025883a 	mov	r18,r4
 c004c10:	b80d883a 	mov	r6,r23
 c004c14:	81001704 	addi	r4,r16,92
 c004c18:	000b883a 	mov	r5,zero
 c004c1c:	80000015 	stw	zero,0(r16)
 c004c20:	80000115 	stw	zero,4(r16)
 c004c24:	80000215 	stw	zero,8(r16)
 c004c28:	8080030d 	sth	r2,12(r16)
 c004c2c:	80001915 	stw	zero,100(r16)
 c004c30:	8000038d 	sth	zero,14(r16)
 c004c34:	80000415 	stw	zero,16(r16)
 c004c38:	80000515 	stw	zero,20(r16)
 c004c3c:	80000615 	stw	zero,24(r16)
 c004c40:	c0060980 	call	c006098 <memset>
 c004c44:	05830034 	movhi	r22,3072
 c004c48:	94400217 	ldw	r17,8(r18)
 c004c4c:	05430034 	movhi	r21,3072
 c004c50:	05030034 	movhi	r20,3072
 c004c54:	04c30034 	movhi	r19,3072
 c004c58:	b59cd004 	addi	r22,r22,29504
 c004c5c:	ad5ce704 	addi	r21,r21,29596
 c004c60:	a51d0604 	addi	r20,r20,29720
 c004c64:	9cdd1d04 	addi	r19,r19,29812
 c004c68:	85800815 	stw	r22,32(r16)
 c004c6c:	85400915 	stw	r21,36(r16)
 c004c70:	85000a15 	stw	r20,40(r16)
 c004c74:	84c00b15 	stw	r19,44(r16)
 c004c78:	84000715 	stw	r16,28(r16)
 c004c7c:	00800284 	movi	r2,10
 c004c80:	8880030d 	sth	r2,12(r17)
 c004c84:	00800044 	movi	r2,1
 c004c88:	b80d883a 	mov	r6,r23
 c004c8c:	89001704 	addi	r4,r17,92
 c004c90:	000b883a 	mov	r5,zero
 c004c94:	88000015 	stw	zero,0(r17)
 c004c98:	88000115 	stw	zero,4(r17)
 c004c9c:	88000215 	stw	zero,8(r17)
 c004ca0:	88001915 	stw	zero,100(r17)
 c004ca4:	8880038d 	sth	r2,14(r17)
 c004ca8:	88000415 	stw	zero,16(r17)
 c004cac:	88000515 	stw	zero,20(r17)
 c004cb0:	88000615 	stw	zero,24(r17)
 c004cb4:	c0060980 	call	c006098 <memset>
 c004cb8:	94000317 	ldw	r16,12(r18)
 c004cbc:	00800484 	movi	r2,18
 c004cc0:	8c400715 	stw	r17,28(r17)
 c004cc4:	8d800815 	stw	r22,32(r17)
 c004cc8:	8d400915 	stw	r21,36(r17)
 c004ccc:	8d000a15 	stw	r20,40(r17)
 c004cd0:	8cc00b15 	stw	r19,44(r17)
 c004cd4:	8080030d 	sth	r2,12(r16)
 c004cd8:	00800084 	movi	r2,2
 c004cdc:	80000015 	stw	zero,0(r16)
 c004ce0:	80000115 	stw	zero,4(r16)
 c004ce4:	80000215 	stw	zero,8(r16)
 c004ce8:	80001915 	stw	zero,100(r16)
 c004cec:	8080038d 	sth	r2,14(r16)
 c004cf0:	80000415 	stw	zero,16(r16)
 c004cf4:	80000515 	stw	zero,20(r16)
 c004cf8:	80000615 	stw	zero,24(r16)
 c004cfc:	b80d883a 	mov	r6,r23
 c004d00:	000b883a 	mov	r5,zero
 c004d04:	81001704 	addi	r4,r16,92
 c004d08:	c0060980 	call	c006098 <memset>
 c004d0c:	00800044 	movi	r2,1
 c004d10:	84000715 	stw	r16,28(r16)
 c004d14:	85800815 	stw	r22,32(r16)
 c004d18:	85400915 	stw	r21,36(r16)
 c004d1c:	85000a15 	stw	r20,40(r16)
 c004d20:	84c00b15 	stw	r19,44(r16)
 c004d24:	90800e15 	stw	r2,56(r18)
 c004d28:	dfc00817 	ldw	ra,32(sp)
 c004d2c:	ddc00717 	ldw	r23,28(sp)
 c004d30:	dd800617 	ldw	r22,24(sp)
 c004d34:	dd400517 	ldw	r21,20(sp)
 c004d38:	dd000417 	ldw	r20,16(sp)
 c004d3c:	dcc00317 	ldw	r19,12(sp)
 c004d40:	dc800217 	ldw	r18,8(sp)
 c004d44:	dc400117 	ldw	r17,4(sp)
 c004d48:	dc000017 	ldw	r16,0(sp)
 c004d4c:	dec00904 	addi	sp,sp,36
 c004d50:	f800283a 	ret

0c004d54 <__fp_lock>:
 c004d54:	0005883a 	mov	r2,zero
 c004d58:	f800283a 	ret

0c004d5c <__sfmoreglue>:
 c004d5c:	defffc04 	addi	sp,sp,-16
 c004d60:	dc800215 	stw	r18,8(sp)
 c004d64:	2825883a 	mov	r18,r5
 c004d68:	dc000015 	stw	r16,0(sp)
 c004d6c:	01401a04 	movi	r5,104
 c004d70:	2021883a 	mov	r16,r4
 c004d74:	913fffc4 	addi	r4,r18,-1
 c004d78:	dfc00315 	stw	ra,12(sp)
 c004d7c:	dc400115 	stw	r17,4(sp)
 c004d80:	c0009680 	call	c000968 <__mulsi3>
 c004d84:	8009883a 	mov	r4,r16
 c004d88:	11401d04 	addi	r5,r2,116
 c004d8c:	1023883a 	mov	r17,r2
 c004d90:	c0057a80 	call	c0057a8 <_malloc_r>
 c004d94:	1021883a 	mov	r16,r2
 c004d98:	10000726 	beq	r2,zero,c004db8 <__sfmoreglue+0x5c>
 c004d9c:	11000304 	addi	r4,r2,12
 c004da0:	10000015 	stw	zero,0(r2)
 c004da4:	14800115 	stw	r18,4(r2)
 c004da8:	11000215 	stw	r4,8(r2)
 c004dac:	89801a04 	addi	r6,r17,104
 c004db0:	000b883a 	mov	r5,zero
 c004db4:	c0060980 	call	c006098 <memset>
 c004db8:	8005883a 	mov	r2,r16
 c004dbc:	dfc00317 	ldw	ra,12(sp)
 c004dc0:	dc800217 	ldw	r18,8(sp)
 c004dc4:	dc400117 	ldw	r17,4(sp)
 c004dc8:	dc000017 	ldw	r16,0(sp)
 c004dcc:	dec00404 	addi	sp,sp,16
 c004dd0:	f800283a 	ret

0c004dd4 <__sfp>:
 c004dd4:	defffb04 	addi	sp,sp,-20
 c004dd8:	dc000015 	stw	r16,0(sp)
 c004ddc:	04030074 	movhi	r16,3073
 c004de0:	8407f304 	addi	r16,r16,8140
 c004de4:	dcc00315 	stw	r19,12(sp)
 c004de8:	2027883a 	mov	r19,r4
 c004dec:	81000017 	ldw	r4,0(r16)
 c004df0:	dfc00415 	stw	ra,16(sp)
 c004df4:	dc800215 	stw	r18,8(sp)
 c004df8:	20800e17 	ldw	r2,56(r4)
 c004dfc:	dc400115 	stw	r17,4(sp)
 c004e00:	1000021e 	bne	r2,zero,c004e0c <__sfp+0x38>
 c004e04:	c004bb80 	call	c004bb8 <__sinit.part.1>
 c004e08:	81000017 	ldw	r4,0(r16)
 c004e0c:	2480b804 	addi	r18,r4,736
 c004e10:	047fffc4 	movi	r17,-1
 c004e14:	91000117 	ldw	r4,4(r18)
 c004e18:	94000217 	ldw	r16,8(r18)
 c004e1c:	213fffc4 	addi	r4,r4,-1
 c004e20:	20000a16 	blt	r4,zero,c004e4c <__sfp+0x78>
 c004e24:	8080030f 	ldh	r2,12(r16)
 c004e28:	10000c26 	beq	r2,zero,c004e5c <__sfp+0x88>
 c004e2c:	80c01d04 	addi	r3,r16,116
 c004e30:	00000206 	br	c004e3c <__sfp+0x68>
 c004e34:	18bfe60f 	ldh	r2,-104(r3)
 c004e38:	10000826 	beq	r2,zero,c004e5c <__sfp+0x88>
 c004e3c:	213fffc4 	addi	r4,r4,-1
 c004e40:	1c3ffd04 	addi	r16,r3,-12
 c004e44:	18c01a04 	addi	r3,r3,104
 c004e48:	247ffa1e 	bne	r4,r17,c004e34 <__alt_data_end+0xfc004e34>
 c004e4c:	90800017 	ldw	r2,0(r18)
 c004e50:	10001d26 	beq	r2,zero,c004ec8 <__sfp+0xf4>
 c004e54:	1025883a 	mov	r18,r2
 c004e58:	003fee06 	br	c004e14 <__alt_data_end+0xfc004e14>
 c004e5c:	00bfffc4 	movi	r2,-1
 c004e60:	8080038d 	sth	r2,14(r16)
 c004e64:	00800044 	movi	r2,1
 c004e68:	8080030d 	sth	r2,12(r16)
 c004e6c:	80001915 	stw	zero,100(r16)
 c004e70:	80000015 	stw	zero,0(r16)
 c004e74:	80000215 	stw	zero,8(r16)
 c004e78:	80000115 	stw	zero,4(r16)
 c004e7c:	80000415 	stw	zero,16(r16)
 c004e80:	80000515 	stw	zero,20(r16)
 c004e84:	80000615 	stw	zero,24(r16)
 c004e88:	01800204 	movi	r6,8
 c004e8c:	000b883a 	mov	r5,zero
 c004e90:	81001704 	addi	r4,r16,92
 c004e94:	c0060980 	call	c006098 <memset>
 c004e98:	8005883a 	mov	r2,r16
 c004e9c:	80000c15 	stw	zero,48(r16)
 c004ea0:	80000d15 	stw	zero,52(r16)
 c004ea4:	80001115 	stw	zero,68(r16)
 c004ea8:	80001215 	stw	zero,72(r16)
 c004eac:	dfc00417 	ldw	ra,16(sp)
 c004eb0:	dcc00317 	ldw	r19,12(sp)
 c004eb4:	dc800217 	ldw	r18,8(sp)
 c004eb8:	dc400117 	ldw	r17,4(sp)
 c004ebc:	dc000017 	ldw	r16,0(sp)
 c004ec0:	dec00504 	addi	sp,sp,20
 c004ec4:	f800283a 	ret
 c004ec8:	01400104 	movi	r5,4
 c004ecc:	9809883a 	mov	r4,r19
 c004ed0:	c004d5c0 	call	c004d5c <__sfmoreglue>
 c004ed4:	90800015 	stw	r2,0(r18)
 c004ed8:	103fde1e 	bne	r2,zero,c004e54 <__alt_data_end+0xfc004e54>
 c004edc:	00800304 	movi	r2,12
 c004ee0:	98800015 	stw	r2,0(r19)
 c004ee4:	0005883a 	mov	r2,zero
 c004ee8:	003ff006 	br	c004eac <__alt_data_end+0xfc004eac>

0c004eec <_cleanup>:
 c004eec:	00830074 	movhi	r2,3073
 c004ef0:	1087f304 	addi	r2,r2,8140
 c004ef4:	11000017 	ldw	r4,0(r2)
 c004ef8:	01430074 	movhi	r5,3073
 c004efc:	29639e04 	addi	r5,r5,-29064
 c004f00:	c00544c1 	jmpi	c00544c <_fwalk_reent>

0c004f04 <__sinit>:
 c004f04:	20800e17 	ldw	r2,56(r4)
 c004f08:	10000126 	beq	r2,zero,c004f10 <__sinit+0xc>
 c004f0c:	f800283a 	ret
 c004f10:	c004bb81 	jmpi	c004bb8 <__sinit.part.1>

0c004f14 <__sfp_lock_acquire>:
 c004f14:	f800283a 	ret

0c004f18 <__sfp_lock_release>:
 c004f18:	f800283a 	ret

0c004f1c <__sinit_lock_acquire>:
 c004f1c:	f800283a 	ret

0c004f20 <__sinit_lock_release>:
 c004f20:	f800283a 	ret

0c004f24 <__fp_lock_all>:
 c004f24:	00830074 	movhi	r2,3073
 c004f28:	1087f404 	addi	r2,r2,8144
 c004f2c:	11000017 	ldw	r4,0(r2)
 c004f30:	01430034 	movhi	r5,3072
 c004f34:	29535504 	addi	r5,r5,19796
 c004f38:	c0053881 	jmpi	c005388 <_fwalk>

0c004f3c <__fp_unlock_all>:
 c004f3c:	00830074 	movhi	r2,3073
 c004f40:	1087f404 	addi	r2,r2,8144
 c004f44:	11000017 	ldw	r4,0(r2)
 c004f48:	01430034 	movhi	r5,3072
 c004f4c:	2952e904 	addi	r5,r5,19364
 c004f50:	c0053881 	jmpi	c005388 <_fwalk>

0c004f54 <_malloc_trim_r>:
 c004f54:	defffb04 	addi	sp,sp,-20
 c004f58:	dcc00315 	stw	r19,12(sp)
 c004f5c:	04c30074 	movhi	r19,3073
 c004f60:	dc800215 	stw	r18,8(sp)
 c004f64:	dc400115 	stw	r17,4(sp)
 c004f68:	dc000015 	stw	r16,0(sp)
 c004f6c:	dfc00415 	stw	ra,16(sp)
 c004f70:	2821883a 	mov	r16,r5
 c004f74:	9cc26d04 	addi	r19,r19,2484
 c004f78:	2025883a 	mov	r18,r4
 c004f7c:	c00dd700 	call	c00dd70 <__malloc_lock>
 c004f80:	98800217 	ldw	r2,8(r19)
 c004f84:	14400117 	ldw	r17,4(r2)
 c004f88:	00bfff04 	movi	r2,-4
 c004f8c:	88a2703a 	and	r17,r17,r2
 c004f90:	8c21c83a 	sub	r16,r17,r16
 c004f94:	8403fbc4 	addi	r16,r16,4079
 c004f98:	8020d33a 	srli	r16,r16,12
 c004f9c:	0083ffc4 	movi	r2,4095
 c004fa0:	843fffc4 	addi	r16,r16,-1
 c004fa4:	8020933a 	slli	r16,r16,12
 c004fa8:	1400060e 	bge	r2,r16,c004fc4 <_malloc_trim_r+0x70>
 c004fac:	000b883a 	mov	r5,zero
 c004fb0:	9009883a 	mov	r4,r18
 c004fb4:	c0072ec0 	call	c0072ec <_sbrk_r>
 c004fb8:	98c00217 	ldw	r3,8(r19)
 c004fbc:	1c47883a 	add	r3,r3,r17
 c004fc0:	10c00a26 	beq	r2,r3,c004fec <_malloc_trim_r+0x98>
 c004fc4:	9009883a 	mov	r4,r18
 c004fc8:	c00dd940 	call	c00dd94 <__malloc_unlock>
 c004fcc:	0005883a 	mov	r2,zero
 c004fd0:	dfc00417 	ldw	ra,16(sp)
 c004fd4:	dcc00317 	ldw	r19,12(sp)
 c004fd8:	dc800217 	ldw	r18,8(sp)
 c004fdc:	dc400117 	ldw	r17,4(sp)
 c004fe0:	dc000017 	ldw	r16,0(sp)
 c004fe4:	dec00504 	addi	sp,sp,20
 c004fe8:	f800283a 	ret
 c004fec:	040bc83a 	sub	r5,zero,r16
 c004ff0:	9009883a 	mov	r4,r18
 c004ff4:	c0072ec0 	call	c0072ec <_sbrk_r>
 c004ff8:	00ffffc4 	movi	r3,-1
 c004ffc:	10c00d26 	beq	r2,r3,c005034 <_malloc_trim_r+0xe0>
 c005000:	00c30074 	movhi	r3,3073
 c005004:	18cece04 	addi	r3,r3,15160
 c005008:	18800017 	ldw	r2,0(r3)
 c00500c:	99000217 	ldw	r4,8(r19)
 c005010:	8c23c83a 	sub	r17,r17,r16
 c005014:	8c400054 	ori	r17,r17,1
 c005018:	1421c83a 	sub	r16,r2,r16
 c00501c:	24400115 	stw	r17,4(r4)
 c005020:	9009883a 	mov	r4,r18
 c005024:	1c000015 	stw	r16,0(r3)
 c005028:	c00dd940 	call	c00dd94 <__malloc_unlock>
 c00502c:	00800044 	movi	r2,1
 c005030:	003fe706 	br	c004fd0 <__alt_data_end+0xfc004fd0>
 c005034:	000b883a 	mov	r5,zero
 c005038:	9009883a 	mov	r4,r18
 c00503c:	c0072ec0 	call	c0072ec <_sbrk_r>
 c005040:	99000217 	ldw	r4,8(r19)
 c005044:	014003c4 	movi	r5,15
 c005048:	1107c83a 	sub	r3,r2,r4
 c00504c:	28ffdd0e 	bge	r5,r3,c004fc4 <__alt_data_end+0xfc004fc4>
 c005050:	01430074 	movhi	r5,3073
 c005054:	2947f604 	addi	r5,r5,8152
 c005058:	29400017 	ldw	r5,0(r5)
 c00505c:	18c00054 	ori	r3,r3,1
 c005060:	20c00115 	stw	r3,4(r4)
 c005064:	00c30074 	movhi	r3,3073
 c005068:	1145c83a 	sub	r2,r2,r5
 c00506c:	18cece04 	addi	r3,r3,15160
 c005070:	18800015 	stw	r2,0(r3)
 c005074:	003fd306 	br	c004fc4 <__alt_data_end+0xfc004fc4>

0c005078 <_free_r>:
 c005078:	28004126 	beq	r5,zero,c005180 <_free_r+0x108>
 c00507c:	defffd04 	addi	sp,sp,-12
 c005080:	dc400115 	stw	r17,4(sp)
 c005084:	dc000015 	stw	r16,0(sp)
 c005088:	2023883a 	mov	r17,r4
 c00508c:	2821883a 	mov	r16,r5
 c005090:	dfc00215 	stw	ra,8(sp)
 c005094:	c00dd700 	call	c00dd70 <__malloc_lock>
 c005098:	81ffff17 	ldw	r7,-4(r16)
 c00509c:	00bfff84 	movi	r2,-2
 c0050a0:	01030074 	movhi	r4,3073
 c0050a4:	81bffe04 	addi	r6,r16,-8
 c0050a8:	3884703a 	and	r2,r7,r2
 c0050ac:	21026d04 	addi	r4,r4,2484
 c0050b0:	308b883a 	add	r5,r6,r2
 c0050b4:	2a400117 	ldw	r9,4(r5)
 c0050b8:	22000217 	ldw	r8,8(r4)
 c0050bc:	00ffff04 	movi	r3,-4
 c0050c0:	48c6703a 	and	r3,r9,r3
 c0050c4:	2a005726 	beq	r5,r8,c005224 <_free_r+0x1ac>
 c0050c8:	28c00115 	stw	r3,4(r5)
 c0050cc:	39c0004c 	andi	r7,r7,1
 c0050d0:	3800091e 	bne	r7,zero,c0050f8 <_free_r+0x80>
 c0050d4:	823ffe17 	ldw	r8,-8(r16)
 c0050d8:	22400204 	addi	r9,r4,8
 c0050dc:	320dc83a 	sub	r6,r6,r8
 c0050e0:	31c00217 	ldw	r7,8(r6)
 c0050e4:	1205883a 	add	r2,r2,r8
 c0050e8:	3a406526 	beq	r7,r9,c005280 <_free_r+0x208>
 c0050ec:	32000317 	ldw	r8,12(r6)
 c0050f0:	3a000315 	stw	r8,12(r7)
 c0050f4:	41c00215 	stw	r7,8(r8)
 c0050f8:	28cf883a 	add	r7,r5,r3
 c0050fc:	39c00117 	ldw	r7,4(r7)
 c005100:	39c0004c 	andi	r7,r7,1
 c005104:	38003a26 	beq	r7,zero,c0051f0 <_free_r+0x178>
 c005108:	10c00054 	ori	r3,r2,1
 c00510c:	30c00115 	stw	r3,4(r6)
 c005110:	3087883a 	add	r3,r6,r2
 c005114:	18800015 	stw	r2,0(r3)
 c005118:	00c07fc4 	movi	r3,511
 c00511c:	18801936 	bltu	r3,r2,c005184 <_free_r+0x10c>
 c005120:	1004d0fa 	srli	r2,r2,3
 c005124:	01c00044 	movi	r7,1
 c005128:	21400117 	ldw	r5,4(r4)
 c00512c:	10c00044 	addi	r3,r2,1
 c005130:	18c7883a 	add	r3,r3,r3
 c005134:	1005d0ba 	srai	r2,r2,2
 c005138:	18c7883a 	add	r3,r3,r3
 c00513c:	18c7883a 	add	r3,r3,r3
 c005140:	1907883a 	add	r3,r3,r4
 c005144:	3884983a 	sll	r2,r7,r2
 c005148:	19c00017 	ldw	r7,0(r3)
 c00514c:	1a3ffe04 	addi	r8,r3,-8
 c005150:	1144b03a 	or	r2,r2,r5
 c005154:	32000315 	stw	r8,12(r6)
 c005158:	31c00215 	stw	r7,8(r6)
 c00515c:	20800115 	stw	r2,4(r4)
 c005160:	19800015 	stw	r6,0(r3)
 c005164:	39800315 	stw	r6,12(r7)
 c005168:	8809883a 	mov	r4,r17
 c00516c:	dfc00217 	ldw	ra,8(sp)
 c005170:	dc400117 	ldw	r17,4(sp)
 c005174:	dc000017 	ldw	r16,0(sp)
 c005178:	dec00304 	addi	sp,sp,12
 c00517c:	c00dd941 	jmpi	c00dd94 <__malloc_unlock>
 c005180:	f800283a 	ret
 c005184:	100ad27a 	srli	r5,r2,9
 c005188:	00c00104 	movi	r3,4
 c00518c:	19404a36 	bltu	r3,r5,c0052b8 <_free_r+0x240>
 c005190:	100ad1ba 	srli	r5,r2,6
 c005194:	28c00e44 	addi	r3,r5,57
 c005198:	18c7883a 	add	r3,r3,r3
 c00519c:	29400e04 	addi	r5,r5,56
 c0051a0:	18c7883a 	add	r3,r3,r3
 c0051a4:	18c7883a 	add	r3,r3,r3
 c0051a8:	1909883a 	add	r4,r3,r4
 c0051ac:	20c00017 	ldw	r3,0(r4)
 c0051b0:	01c30074 	movhi	r7,3073
 c0051b4:	213ffe04 	addi	r4,r4,-8
 c0051b8:	39c26d04 	addi	r7,r7,2484
 c0051bc:	20c04426 	beq	r4,r3,c0052d0 <_free_r+0x258>
 c0051c0:	01ffff04 	movi	r7,-4
 c0051c4:	19400117 	ldw	r5,4(r3)
 c0051c8:	29ca703a 	and	r5,r5,r7
 c0051cc:	1140022e 	bgeu	r2,r5,c0051d8 <_free_r+0x160>
 c0051d0:	18c00217 	ldw	r3,8(r3)
 c0051d4:	20fffb1e 	bne	r4,r3,c0051c4 <__alt_data_end+0xfc0051c4>
 c0051d8:	19000317 	ldw	r4,12(r3)
 c0051dc:	31000315 	stw	r4,12(r6)
 c0051e0:	30c00215 	stw	r3,8(r6)
 c0051e4:	21800215 	stw	r6,8(r4)
 c0051e8:	19800315 	stw	r6,12(r3)
 c0051ec:	003fde06 	br	c005168 <__alt_data_end+0xfc005168>
 c0051f0:	29c00217 	ldw	r7,8(r5)
 c0051f4:	10c5883a 	add	r2,r2,r3
 c0051f8:	00c30074 	movhi	r3,3073
 c0051fc:	18c26f04 	addi	r3,r3,2492
 c005200:	38c03b26 	beq	r7,r3,c0052f0 <_free_r+0x278>
 c005204:	2a000317 	ldw	r8,12(r5)
 c005208:	11400054 	ori	r5,r2,1
 c00520c:	3087883a 	add	r3,r6,r2
 c005210:	3a000315 	stw	r8,12(r7)
 c005214:	41c00215 	stw	r7,8(r8)
 c005218:	31400115 	stw	r5,4(r6)
 c00521c:	18800015 	stw	r2,0(r3)
 c005220:	003fbd06 	br	c005118 <__alt_data_end+0xfc005118>
 c005224:	39c0004c 	andi	r7,r7,1
 c005228:	10c5883a 	add	r2,r2,r3
 c00522c:	3800071e 	bne	r7,zero,c00524c <_free_r+0x1d4>
 c005230:	81fffe17 	ldw	r7,-8(r16)
 c005234:	31cdc83a 	sub	r6,r6,r7
 c005238:	30c00317 	ldw	r3,12(r6)
 c00523c:	31400217 	ldw	r5,8(r6)
 c005240:	11c5883a 	add	r2,r2,r7
 c005244:	28c00315 	stw	r3,12(r5)
 c005248:	19400215 	stw	r5,8(r3)
 c00524c:	10c00054 	ori	r3,r2,1
 c005250:	30c00115 	stw	r3,4(r6)
 c005254:	00c30074 	movhi	r3,3073
 c005258:	18c7f704 	addi	r3,r3,8156
 c00525c:	18c00017 	ldw	r3,0(r3)
 c005260:	21800215 	stw	r6,8(r4)
 c005264:	10ffc036 	bltu	r2,r3,c005168 <__alt_data_end+0xfc005168>
 c005268:	00830074 	movhi	r2,3073
 c00526c:	108ec504 	addi	r2,r2,15124
 c005270:	11400017 	ldw	r5,0(r2)
 c005274:	8809883a 	mov	r4,r17
 c005278:	c004f540 	call	c004f54 <_malloc_trim_r>
 c00527c:	003fba06 	br	c005168 <__alt_data_end+0xfc005168>
 c005280:	28c9883a 	add	r4,r5,r3
 c005284:	21000117 	ldw	r4,4(r4)
 c005288:	2100004c 	andi	r4,r4,1
 c00528c:	2000391e 	bne	r4,zero,c005374 <_free_r+0x2fc>
 c005290:	29c00217 	ldw	r7,8(r5)
 c005294:	29000317 	ldw	r4,12(r5)
 c005298:	1885883a 	add	r2,r3,r2
 c00529c:	10c00054 	ori	r3,r2,1
 c0052a0:	39000315 	stw	r4,12(r7)
 c0052a4:	21c00215 	stw	r7,8(r4)
 c0052a8:	30c00115 	stw	r3,4(r6)
 c0052ac:	308d883a 	add	r6,r6,r2
 c0052b0:	30800015 	stw	r2,0(r6)
 c0052b4:	003fac06 	br	c005168 <__alt_data_end+0xfc005168>
 c0052b8:	00c00504 	movi	r3,20
 c0052bc:	19401536 	bltu	r3,r5,c005314 <_free_r+0x29c>
 c0052c0:	28c01704 	addi	r3,r5,92
 c0052c4:	18c7883a 	add	r3,r3,r3
 c0052c8:	294016c4 	addi	r5,r5,91
 c0052cc:	003fb406 	br	c0051a0 <__alt_data_end+0xfc0051a0>
 c0052d0:	280bd0ba 	srai	r5,r5,2
 c0052d4:	00c00044 	movi	r3,1
 c0052d8:	38800117 	ldw	r2,4(r7)
 c0052dc:	194a983a 	sll	r5,r3,r5
 c0052e0:	2007883a 	mov	r3,r4
 c0052e4:	2884b03a 	or	r2,r5,r2
 c0052e8:	38800115 	stw	r2,4(r7)
 c0052ec:	003fbb06 	br	c0051dc <__alt_data_end+0xfc0051dc>
 c0052f0:	21800515 	stw	r6,20(r4)
 c0052f4:	21800415 	stw	r6,16(r4)
 c0052f8:	10c00054 	ori	r3,r2,1
 c0052fc:	31c00315 	stw	r7,12(r6)
 c005300:	31c00215 	stw	r7,8(r6)
 c005304:	30c00115 	stw	r3,4(r6)
 c005308:	308d883a 	add	r6,r6,r2
 c00530c:	30800015 	stw	r2,0(r6)
 c005310:	003f9506 	br	c005168 <__alt_data_end+0xfc005168>
 c005314:	00c01504 	movi	r3,84
 c005318:	19400536 	bltu	r3,r5,c005330 <_free_r+0x2b8>
 c00531c:	100ad33a 	srli	r5,r2,12
 c005320:	28c01bc4 	addi	r3,r5,111
 c005324:	18c7883a 	add	r3,r3,r3
 c005328:	29401b84 	addi	r5,r5,110
 c00532c:	003f9c06 	br	c0051a0 <__alt_data_end+0xfc0051a0>
 c005330:	00c05504 	movi	r3,340
 c005334:	19400536 	bltu	r3,r5,c00534c <_free_r+0x2d4>
 c005338:	100ad3fa 	srli	r5,r2,15
 c00533c:	28c01e04 	addi	r3,r5,120
 c005340:	18c7883a 	add	r3,r3,r3
 c005344:	29401dc4 	addi	r5,r5,119
 c005348:	003f9506 	br	c0051a0 <__alt_data_end+0xfc0051a0>
 c00534c:	00c15504 	movi	r3,1364
 c005350:	19400536 	bltu	r3,r5,c005368 <_free_r+0x2f0>
 c005354:	100ad4ba 	srli	r5,r2,18
 c005358:	28c01f44 	addi	r3,r5,125
 c00535c:	18c7883a 	add	r3,r3,r3
 c005360:	29401f04 	addi	r5,r5,124
 c005364:	003f8e06 	br	c0051a0 <__alt_data_end+0xfc0051a0>
 c005368:	00c03f84 	movi	r3,254
 c00536c:	01401f84 	movi	r5,126
 c005370:	003f8b06 	br	c0051a0 <__alt_data_end+0xfc0051a0>
 c005374:	10c00054 	ori	r3,r2,1
 c005378:	30c00115 	stw	r3,4(r6)
 c00537c:	308d883a 	add	r6,r6,r2
 c005380:	30800015 	stw	r2,0(r6)
 c005384:	003f7806 	br	c005168 <__alt_data_end+0xfc005168>

0c005388 <_fwalk>:
 c005388:	defff704 	addi	sp,sp,-36
 c00538c:	dd000415 	stw	r20,16(sp)
 c005390:	dfc00815 	stw	ra,32(sp)
 c005394:	ddc00715 	stw	r23,28(sp)
 c005398:	dd800615 	stw	r22,24(sp)
 c00539c:	dd400515 	stw	r21,20(sp)
 c0053a0:	dcc00315 	stw	r19,12(sp)
 c0053a4:	dc800215 	stw	r18,8(sp)
 c0053a8:	dc400115 	stw	r17,4(sp)
 c0053ac:	dc000015 	stw	r16,0(sp)
 c0053b0:	2500b804 	addi	r20,r4,736
 c0053b4:	a0002326 	beq	r20,zero,c005444 <_fwalk+0xbc>
 c0053b8:	282b883a 	mov	r21,r5
 c0053bc:	002f883a 	mov	r23,zero
 c0053c0:	05800044 	movi	r22,1
 c0053c4:	04ffffc4 	movi	r19,-1
 c0053c8:	a4400117 	ldw	r17,4(r20)
 c0053cc:	a4800217 	ldw	r18,8(r20)
 c0053d0:	8c7fffc4 	addi	r17,r17,-1
 c0053d4:	88000d16 	blt	r17,zero,c00540c <_fwalk+0x84>
 c0053d8:	94000304 	addi	r16,r18,12
 c0053dc:	94800384 	addi	r18,r18,14
 c0053e0:	8080000b 	ldhu	r2,0(r16)
 c0053e4:	8c7fffc4 	addi	r17,r17,-1
 c0053e8:	813ffd04 	addi	r4,r16,-12
 c0053ec:	b080042e 	bgeu	r22,r2,c005400 <_fwalk+0x78>
 c0053f0:	9080000f 	ldh	r2,0(r18)
 c0053f4:	14c00226 	beq	r2,r19,c005400 <_fwalk+0x78>
 c0053f8:	a83ee83a 	callr	r21
 c0053fc:	b8aeb03a 	or	r23,r23,r2
 c005400:	84001a04 	addi	r16,r16,104
 c005404:	94801a04 	addi	r18,r18,104
 c005408:	8cfff51e 	bne	r17,r19,c0053e0 <__alt_data_end+0xfc0053e0>
 c00540c:	a5000017 	ldw	r20,0(r20)
 c005410:	a03fed1e 	bne	r20,zero,c0053c8 <__alt_data_end+0xfc0053c8>
 c005414:	b805883a 	mov	r2,r23
 c005418:	dfc00817 	ldw	ra,32(sp)
 c00541c:	ddc00717 	ldw	r23,28(sp)
 c005420:	dd800617 	ldw	r22,24(sp)
 c005424:	dd400517 	ldw	r21,20(sp)
 c005428:	dd000417 	ldw	r20,16(sp)
 c00542c:	dcc00317 	ldw	r19,12(sp)
 c005430:	dc800217 	ldw	r18,8(sp)
 c005434:	dc400117 	ldw	r17,4(sp)
 c005438:	dc000017 	ldw	r16,0(sp)
 c00543c:	dec00904 	addi	sp,sp,36
 c005440:	f800283a 	ret
 c005444:	002f883a 	mov	r23,zero
 c005448:	003ff206 	br	c005414 <__alt_data_end+0xfc005414>

0c00544c <_fwalk_reent>:
 c00544c:	defff704 	addi	sp,sp,-36
 c005450:	dd000415 	stw	r20,16(sp)
 c005454:	dfc00815 	stw	ra,32(sp)
 c005458:	ddc00715 	stw	r23,28(sp)
 c00545c:	dd800615 	stw	r22,24(sp)
 c005460:	dd400515 	stw	r21,20(sp)
 c005464:	dcc00315 	stw	r19,12(sp)
 c005468:	dc800215 	stw	r18,8(sp)
 c00546c:	dc400115 	stw	r17,4(sp)
 c005470:	dc000015 	stw	r16,0(sp)
 c005474:	2500b804 	addi	r20,r4,736
 c005478:	a0002326 	beq	r20,zero,c005508 <_fwalk_reent+0xbc>
 c00547c:	282b883a 	mov	r21,r5
 c005480:	2027883a 	mov	r19,r4
 c005484:	002f883a 	mov	r23,zero
 c005488:	05800044 	movi	r22,1
 c00548c:	04bfffc4 	movi	r18,-1
 c005490:	a4400117 	ldw	r17,4(r20)
 c005494:	a4000217 	ldw	r16,8(r20)
 c005498:	8c7fffc4 	addi	r17,r17,-1
 c00549c:	88000c16 	blt	r17,zero,c0054d0 <_fwalk_reent+0x84>
 c0054a0:	84000304 	addi	r16,r16,12
 c0054a4:	8080000b 	ldhu	r2,0(r16)
 c0054a8:	8c7fffc4 	addi	r17,r17,-1
 c0054ac:	817ffd04 	addi	r5,r16,-12
 c0054b0:	b080052e 	bgeu	r22,r2,c0054c8 <_fwalk_reent+0x7c>
 c0054b4:	8080008f 	ldh	r2,2(r16)
 c0054b8:	9809883a 	mov	r4,r19
 c0054bc:	14800226 	beq	r2,r18,c0054c8 <_fwalk_reent+0x7c>
 c0054c0:	a83ee83a 	callr	r21
 c0054c4:	b8aeb03a 	or	r23,r23,r2
 c0054c8:	84001a04 	addi	r16,r16,104
 c0054cc:	8cbff51e 	bne	r17,r18,c0054a4 <__alt_data_end+0xfc0054a4>
 c0054d0:	a5000017 	ldw	r20,0(r20)
 c0054d4:	a03fee1e 	bne	r20,zero,c005490 <__alt_data_end+0xfc005490>
 c0054d8:	b805883a 	mov	r2,r23
 c0054dc:	dfc00817 	ldw	ra,32(sp)
 c0054e0:	ddc00717 	ldw	r23,28(sp)
 c0054e4:	dd800617 	ldw	r22,24(sp)
 c0054e8:	dd400517 	ldw	r21,20(sp)
 c0054ec:	dd000417 	ldw	r20,16(sp)
 c0054f0:	dcc00317 	ldw	r19,12(sp)
 c0054f4:	dc800217 	ldw	r18,8(sp)
 c0054f8:	dc400117 	ldw	r17,4(sp)
 c0054fc:	dc000017 	ldw	r16,0(sp)
 c005500:	dec00904 	addi	sp,sp,36
 c005504:	f800283a 	ret
 c005508:	002f883a 	mov	r23,zero
 c00550c:	003ff206 	br	c0054d8 <__alt_data_end+0xfc0054d8>

0c005510 <_setlocale_r>:
 c005510:	30001b26 	beq	r6,zero,c005580 <_setlocale_r+0x70>
 c005514:	01430074 	movhi	r5,3073
 c005518:	defffe04 	addi	sp,sp,-8
 c00551c:	2940a504 	addi	r5,r5,660
 c005520:	3009883a 	mov	r4,r6
 c005524:	dc000015 	stw	r16,0(sp)
 c005528:	dfc00115 	stw	ra,4(sp)
 c00552c:	3021883a 	mov	r16,r6
 c005530:	c00747c0 	call	c00747c <strcmp>
 c005534:	1000061e 	bne	r2,zero,c005550 <_setlocale_r+0x40>
 c005538:	00830074 	movhi	r2,3073
 c00553c:	1080a404 	addi	r2,r2,656
 c005540:	dfc00117 	ldw	ra,4(sp)
 c005544:	dc000017 	ldw	r16,0(sp)
 c005548:	dec00204 	addi	sp,sp,8
 c00554c:	f800283a 	ret
 c005550:	01430074 	movhi	r5,3073
 c005554:	2940a404 	addi	r5,r5,656
 c005558:	8009883a 	mov	r4,r16
 c00555c:	c00747c0 	call	c00747c <strcmp>
 c005560:	103ff526 	beq	r2,zero,c005538 <__alt_data_end+0xfc005538>
 c005564:	01430074 	movhi	r5,3073
 c005568:	29408f04 	addi	r5,r5,572
 c00556c:	8009883a 	mov	r4,r16
 c005570:	c00747c0 	call	c00747c <strcmp>
 c005574:	103ff026 	beq	r2,zero,c005538 <__alt_data_end+0xfc005538>
 c005578:	0005883a 	mov	r2,zero
 c00557c:	003ff006 	br	c005540 <__alt_data_end+0xfc005540>
 c005580:	00830074 	movhi	r2,3073
 c005584:	1080a404 	addi	r2,r2,656
 c005588:	f800283a 	ret

0c00558c <__locale_charset>:
 c00558c:	00830074 	movhi	r2,3073
 c005590:	10825704 	addi	r2,r2,2396
 c005594:	f800283a 	ret

0c005598 <__locale_mb_cur_max>:
 c005598:	00830074 	movhi	r2,3073
 c00559c:	1087f504 	addi	r2,r2,8148
 c0055a0:	10800017 	ldw	r2,0(r2)
 c0055a4:	f800283a 	ret

0c0055a8 <__locale_msgcharset>:
 c0055a8:	00830074 	movhi	r2,3073
 c0055ac:	10824f04 	addi	r2,r2,2364
 c0055b0:	f800283a 	ret

0c0055b4 <__locale_cjk_lang>:
 c0055b4:	0005883a 	mov	r2,zero
 c0055b8:	f800283a 	ret

0c0055bc <_localeconv_r>:
 c0055bc:	00830074 	movhi	r2,3073
 c0055c0:	10825f04 	addi	r2,r2,2428
 c0055c4:	f800283a 	ret

0c0055c8 <setlocale>:
 c0055c8:	00830074 	movhi	r2,3073
 c0055cc:	1087f404 	addi	r2,r2,8144
 c0055d0:	280d883a 	mov	r6,r5
 c0055d4:	200b883a 	mov	r5,r4
 c0055d8:	11000017 	ldw	r4,0(r2)
 c0055dc:	c0055101 	jmpi	c005510 <_setlocale_r>

0c0055e0 <localeconv>:
 c0055e0:	00830074 	movhi	r2,3073
 c0055e4:	10825f04 	addi	r2,r2,2428
 c0055e8:	f800283a 	ret

0c0055ec <__smakebuf_r>:
 c0055ec:	2880030b 	ldhu	r2,12(r5)
 c0055f0:	10c0008c 	andi	r3,r2,2
 c0055f4:	1800411e 	bne	r3,zero,c0056fc <__smakebuf_r+0x110>
 c0055f8:	deffec04 	addi	sp,sp,-80
 c0055fc:	dc000f15 	stw	r16,60(sp)
 c005600:	2821883a 	mov	r16,r5
 c005604:	2940038f 	ldh	r5,14(r5)
 c005608:	dc401015 	stw	r17,64(sp)
 c00560c:	dfc01315 	stw	ra,76(sp)
 c005610:	dcc01215 	stw	r19,72(sp)
 c005614:	dc801115 	stw	r18,68(sp)
 c005618:	2023883a 	mov	r17,r4
 c00561c:	28001c16 	blt	r5,zero,c005690 <__smakebuf_r+0xa4>
 c005620:	d80d883a 	mov	r6,sp
 c005624:	c0091840 	call	c009184 <_fstat_r>
 c005628:	10001816 	blt	r2,zero,c00568c <__smakebuf_r+0xa0>
 c00562c:	d8800117 	ldw	r2,4(sp)
 c005630:	00e00014 	movui	r3,32768
 c005634:	10bc000c 	andi	r2,r2,61440
 c005638:	14c80020 	cmpeqi	r19,r2,8192
 c00563c:	10c03726 	beq	r2,r3,c00571c <__smakebuf_r+0x130>
 c005640:	80c0030b 	ldhu	r3,12(r16)
 c005644:	18c20014 	ori	r3,r3,2048
 c005648:	80c0030d 	sth	r3,12(r16)
 c00564c:	00c80004 	movi	r3,8192
 c005650:	10c0521e 	bne	r2,r3,c00579c <__smakebuf_r+0x1b0>
 c005654:	8140038f 	ldh	r5,14(r16)
 c005658:	8809883a 	mov	r4,r17
 c00565c:	c0096a80 	call	c0096a8 <_isatty_r>
 c005660:	10004c26 	beq	r2,zero,c005794 <__smakebuf_r+0x1a8>
 c005664:	8080030b 	ldhu	r2,12(r16)
 c005668:	80c010c4 	addi	r3,r16,67
 c00566c:	80c00015 	stw	r3,0(r16)
 c005670:	10800054 	ori	r2,r2,1
 c005674:	8080030d 	sth	r2,12(r16)
 c005678:	00800044 	movi	r2,1
 c00567c:	80c00415 	stw	r3,16(r16)
 c005680:	80800515 	stw	r2,20(r16)
 c005684:	04810004 	movi	r18,1024
 c005688:	00000706 	br	c0056a8 <__smakebuf_r+0xbc>
 c00568c:	8080030b 	ldhu	r2,12(r16)
 c005690:	10c0200c 	andi	r3,r2,128
 c005694:	18001f1e 	bne	r3,zero,c005714 <__smakebuf_r+0x128>
 c005698:	04810004 	movi	r18,1024
 c00569c:	10820014 	ori	r2,r2,2048
 c0056a0:	8080030d 	sth	r2,12(r16)
 c0056a4:	0027883a 	mov	r19,zero
 c0056a8:	900b883a 	mov	r5,r18
 c0056ac:	8809883a 	mov	r4,r17
 c0056b0:	c0057a80 	call	c0057a8 <_malloc_r>
 c0056b4:	10002c26 	beq	r2,zero,c005768 <__smakebuf_r+0x17c>
 c0056b8:	80c0030b 	ldhu	r3,12(r16)
 c0056bc:	01030034 	movhi	r4,3072
 c0056c0:	2112eb04 	addi	r4,r4,19372
 c0056c4:	89000f15 	stw	r4,60(r17)
 c0056c8:	18c02014 	ori	r3,r3,128
 c0056cc:	80c0030d 	sth	r3,12(r16)
 c0056d0:	80800015 	stw	r2,0(r16)
 c0056d4:	80800415 	stw	r2,16(r16)
 c0056d8:	84800515 	stw	r18,20(r16)
 c0056dc:	98001a1e 	bne	r19,zero,c005748 <__smakebuf_r+0x15c>
 c0056e0:	dfc01317 	ldw	ra,76(sp)
 c0056e4:	dcc01217 	ldw	r19,72(sp)
 c0056e8:	dc801117 	ldw	r18,68(sp)
 c0056ec:	dc401017 	ldw	r17,64(sp)
 c0056f0:	dc000f17 	ldw	r16,60(sp)
 c0056f4:	dec01404 	addi	sp,sp,80
 c0056f8:	f800283a 	ret
 c0056fc:	288010c4 	addi	r2,r5,67
 c005700:	28800015 	stw	r2,0(r5)
 c005704:	28800415 	stw	r2,16(r5)
 c005708:	00800044 	movi	r2,1
 c00570c:	28800515 	stw	r2,20(r5)
 c005710:	f800283a 	ret
 c005714:	04801004 	movi	r18,64
 c005718:	003fe006 	br	c00569c <__alt_data_end+0xfc00569c>
 c00571c:	81000a17 	ldw	r4,40(r16)
 c005720:	00c30034 	movhi	r3,3072
 c005724:	18dd0604 	addi	r3,r3,29720
 c005728:	20ffc51e 	bne	r4,r3,c005640 <__alt_data_end+0xfc005640>
 c00572c:	8080030b 	ldhu	r2,12(r16)
 c005730:	04810004 	movi	r18,1024
 c005734:	84801315 	stw	r18,76(r16)
 c005738:	1484b03a 	or	r2,r2,r18
 c00573c:	8080030d 	sth	r2,12(r16)
 c005740:	0027883a 	mov	r19,zero
 c005744:	003fd806 	br	c0056a8 <__alt_data_end+0xfc0056a8>
 c005748:	8140038f 	ldh	r5,14(r16)
 c00574c:	8809883a 	mov	r4,r17
 c005750:	c0096a80 	call	c0096a8 <_isatty_r>
 c005754:	103fe226 	beq	r2,zero,c0056e0 <__alt_data_end+0xfc0056e0>
 c005758:	8080030b 	ldhu	r2,12(r16)
 c00575c:	10800054 	ori	r2,r2,1
 c005760:	8080030d 	sth	r2,12(r16)
 c005764:	003fde06 	br	c0056e0 <__alt_data_end+0xfc0056e0>
 c005768:	8080030b 	ldhu	r2,12(r16)
 c00576c:	10c0800c 	andi	r3,r2,512
 c005770:	183fdb1e 	bne	r3,zero,c0056e0 <__alt_data_end+0xfc0056e0>
 c005774:	10800094 	ori	r2,r2,2
 c005778:	80c010c4 	addi	r3,r16,67
 c00577c:	8080030d 	sth	r2,12(r16)
 c005780:	00800044 	movi	r2,1
 c005784:	80c00015 	stw	r3,0(r16)
 c005788:	80c00415 	stw	r3,16(r16)
 c00578c:	80800515 	stw	r2,20(r16)
 c005790:	003fd306 	br	c0056e0 <__alt_data_end+0xfc0056e0>
 c005794:	04810004 	movi	r18,1024
 c005798:	003fc306 	br	c0056a8 <__alt_data_end+0xfc0056a8>
 c00579c:	0027883a 	mov	r19,zero
 c0057a0:	04810004 	movi	r18,1024
 c0057a4:	003fc006 	br	c0056a8 <__alt_data_end+0xfc0056a8>

0c0057a8 <_malloc_r>:
 c0057a8:	defff504 	addi	sp,sp,-44
 c0057ac:	dc800315 	stw	r18,12(sp)
 c0057b0:	dfc00a15 	stw	ra,40(sp)
 c0057b4:	df000915 	stw	fp,36(sp)
 c0057b8:	ddc00815 	stw	r23,32(sp)
 c0057bc:	dd800715 	stw	r22,28(sp)
 c0057c0:	dd400615 	stw	r21,24(sp)
 c0057c4:	dd000515 	stw	r20,20(sp)
 c0057c8:	dcc00415 	stw	r19,16(sp)
 c0057cc:	dc400215 	stw	r17,8(sp)
 c0057d0:	dc000115 	stw	r16,4(sp)
 c0057d4:	288002c4 	addi	r2,r5,11
 c0057d8:	00c00584 	movi	r3,22
 c0057dc:	2025883a 	mov	r18,r4
 c0057e0:	18807f2e 	bgeu	r3,r2,c0059e0 <_malloc_r+0x238>
 c0057e4:	047ffe04 	movi	r17,-8
 c0057e8:	1462703a 	and	r17,r2,r17
 c0057ec:	8800a316 	blt	r17,zero,c005a7c <_malloc_r+0x2d4>
 c0057f0:	8940a236 	bltu	r17,r5,c005a7c <_malloc_r+0x2d4>
 c0057f4:	c00dd700 	call	c00dd70 <__malloc_lock>
 c0057f8:	00807dc4 	movi	r2,503
 c0057fc:	1441e92e 	bgeu	r2,r17,c005fa4 <_malloc_r+0x7fc>
 c005800:	8804d27a 	srli	r2,r17,9
 c005804:	1000a126 	beq	r2,zero,c005a8c <_malloc_r+0x2e4>
 c005808:	00c00104 	movi	r3,4
 c00580c:	18811e36 	bltu	r3,r2,c005c88 <_malloc_r+0x4e0>
 c005810:	8804d1ba 	srli	r2,r17,6
 c005814:	12000e44 	addi	r8,r2,57
 c005818:	11c00e04 	addi	r7,r2,56
 c00581c:	4209883a 	add	r4,r8,r8
 c005820:	04c30074 	movhi	r19,3073
 c005824:	2109883a 	add	r4,r4,r4
 c005828:	9cc26d04 	addi	r19,r19,2484
 c00582c:	2109883a 	add	r4,r4,r4
 c005830:	9909883a 	add	r4,r19,r4
 c005834:	24000117 	ldw	r16,4(r4)
 c005838:	213ffe04 	addi	r4,r4,-8
 c00583c:	24009726 	beq	r4,r16,c005a9c <_malloc_r+0x2f4>
 c005840:	80800117 	ldw	r2,4(r16)
 c005844:	01bfff04 	movi	r6,-4
 c005848:	014003c4 	movi	r5,15
 c00584c:	1184703a 	and	r2,r2,r6
 c005850:	1447c83a 	sub	r3,r2,r17
 c005854:	28c00716 	blt	r5,r3,c005874 <_malloc_r+0xcc>
 c005858:	1800920e 	bge	r3,zero,c005aa4 <_malloc_r+0x2fc>
 c00585c:	84000317 	ldw	r16,12(r16)
 c005860:	24008e26 	beq	r4,r16,c005a9c <_malloc_r+0x2f4>
 c005864:	80800117 	ldw	r2,4(r16)
 c005868:	1184703a 	and	r2,r2,r6
 c00586c:	1447c83a 	sub	r3,r2,r17
 c005870:	28fff90e 	bge	r5,r3,c005858 <__alt_data_end+0xfc005858>
 c005874:	3809883a 	mov	r4,r7
 c005878:	01830074 	movhi	r6,3073
 c00587c:	9c000417 	ldw	r16,16(r19)
 c005880:	31826d04 	addi	r6,r6,2484
 c005884:	32000204 	addi	r8,r6,8
 c005888:	82013426 	beq	r16,r8,c005d5c <_malloc_r+0x5b4>
 c00588c:	80c00117 	ldw	r3,4(r16)
 c005890:	00bfff04 	movi	r2,-4
 c005894:	188e703a 	and	r7,r3,r2
 c005898:	3c45c83a 	sub	r2,r7,r17
 c00589c:	00c003c4 	movi	r3,15
 c0058a0:	18811f16 	blt	r3,r2,c005d20 <_malloc_r+0x578>
 c0058a4:	32000515 	stw	r8,20(r6)
 c0058a8:	32000415 	stw	r8,16(r6)
 c0058ac:	10007f0e 	bge	r2,zero,c005aac <_malloc_r+0x304>
 c0058b0:	00807fc4 	movi	r2,511
 c0058b4:	11c0fd36 	bltu	r2,r7,c005cac <_malloc_r+0x504>
 c0058b8:	3806d0fa 	srli	r3,r7,3
 c0058bc:	01c00044 	movi	r7,1
 c0058c0:	30800117 	ldw	r2,4(r6)
 c0058c4:	19400044 	addi	r5,r3,1
 c0058c8:	294b883a 	add	r5,r5,r5
 c0058cc:	1807d0ba 	srai	r3,r3,2
 c0058d0:	294b883a 	add	r5,r5,r5
 c0058d4:	294b883a 	add	r5,r5,r5
 c0058d8:	298b883a 	add	r5,r5,r6
 c0058dc:	38c6983a 	sll	r3,r7,r3
 c0058e0:	29c00017 	ldw	r7,0(r5)
 c0058e4:	2a7ffe04 	addi	r9,r5,-8
 c0058e8:	1886b03a 	or	r3,r3,r2
 c0058ec:	82400315 	stw	r9,12(r16)
 c0058f0:	81c00215 	stw	r7,8(r16)
 c0058f4:	30c00115 	stw	r3,4(r6)
 c0058f8:	2c000015 	stw	r16,0(r5)
 c0058fc:	3c000315 	stw	r16,12(r7)
 c005900:	2005d0ba 	srai	r2,r4,2
 c005904:	01400044 	movi	r5,1
 c005908:	288a983a 	sll	r5,r5,r2
 c00590c:	19406f36 	bltu	r3,r5,c005acc <_malloc_r+0x324>
 c005910:	28c4703a 	and	r2,r5,r3
 c005914:	10000a1e 	bne	r2,zero,c005940 <_malloc_r+0x198>
 c005918:	00bfff04 	movi	r2,-4
 c00591c:	294b883a 	add	r5,r5,r5
 c005920:	2088703a 	and	r4,r4,r2
 c005924:	28c4703a 	and	r2,r5,r3
 c005928:	21000104 	addi	r4,r4,4
 c00592c:	1000041e 	bne	r2,zero,c005940 <_malloc_r+0x198>
 c005930:	294b883a 	add	r5,r5,r5
 c005934:	28c4703a 	and	r2,r5,r3
 c005938:	21000104 	addi	r4,r4,4
 c00593c:	103ffc26 	beq	r2,zero,c005930 <__alt_data_end+0xfc005930>
 c005940:	02bfff04 	movi	r10,-4
 c005944:	024003c4 	movi	r9,15
 c005948:	21800044 	addi	r6,r4,1
 c00594c:	318d883a 	add	r6,r6,r6
 c005950:	318d883a 	add	r6,r6,r6
 c005954:	318d883a 	add	r6,r6,r6
 c005958:	998d883a 	add	r6,r19,r6
 c00595c:	333ffe04 	addi	r12,r6,-8
 c005960:	2017883a 	mov	r11,r4
 c005964:	31800104 	addi	r6,r6,4
 c005968:	34000017 	ldw	r16,0(r6)
 c00596c:	31fffd04 	addi	r7,r6,-12
 c005970:	81c0041e 	bne	r16,r7,c005984 <_malloc_r+0x1dc>
 c005974:	0000fb06 	br	c005d64 <_malloc_r+0x5bc>
 c005978:	1801030e 	bge	r3,zero,c005d88 <_malloc_r+0x5e0>
 c00597c:	84000317 	ldw	r16,12(r16)
 c005980:	81c0f826 	beq	r16,r7,c005d64 <_malloc_r+0x5bc>
 c005984:	80800117 	ldw	r2,4(r16)
 c005988:	1284703a 	and	r2,r2,r10
 c00598c:	1447c83a 	sub	r3,r2,r17
 c005990:	48fff90e 	bge	r9,r3,c005978 <__alt_data_end+0xfc005978>
 c005994:	80800317 	ldw	r2,12(r16)
 c005998:	81000217 	ldw	r4,8(r16)
 c00599c:	89400054 	ori	r5,r17,1
 c0059a0:	81400115 	stw	r5,4(r16)
 c0059a4:	20800315 	stw	r2,12(r4)
 c0059a8:	11000215 	stw	r4,8(r2)
 c0059ac:	8463883a 	add	r17,r16,r17
 c0059b0:	9c400515 	stw	r17,20(r19)
 c0059b4:	9c400415 	stw	r17,16(r19)
 c0059b8:	18800054 	ori	r2,r3,1
 c0059bc:	88800115 	stw	r2,4(r17)
 c0059c0:	8a000315 	stw	r8,12(r17)
 c0059c4:	8a000215 	stw	r8,8(r17)
 c0059c8:	88e3883a 	add	r17,r17,r3
 c0059cc:	88c00015 	stw	r3,0(r17)
 c0059d0:	9009883a 	mov	r4,r18
 c0059d4:	c00dd940 	call	c00dd94 <__malloc_unlock>
 c0059d8:	80800204 	addi	r2,r16,8
 c0059dc:	00001b06 	br	c005a4c <_malloc_r+0x2a4>
 c0059e0:	04400404 	movi	r17,16
 c0059e4:	89402536 	bltu	r17,r5,c005a7c <_malloc_r+0x2d4>
 c0059e8:	c00dd700 	call	c00dd70 <__malloc_lock>
 c0059ec:	00800184 	movi	r2,6
 c0059f0:	01000084 	movi	r4,2
 c0059f4:	04c30074 	movhi	r19,3073
 c0059f8:	1085883a 	add	r2,r2,r2
 c0059fc:	9cc26d04 	addi	r19,r19,2484
 c005a00:	1085883a 	add	r2,r2,r2
 c005a04:	9885883a 	add	r2,r19,r2
 c005a08:	14000117 	ldw	r16,4(r2)
 c005a0c:	10fffe04 	addi	r3,r2,-8
 c005a10:	80c0d926 	beq	r16,r3,c005d78 <_malloc_r+0x5d0>
 c005a14:	80c00117 	ldw	r3,4(r16)
 c005a18:	81000317 	ldw	r4,12(r16)
 c005a1c:	00bfff04 	movi	r2,-4
 c005a20:	1884703a 	and	r2,r3,r2
 c005a24:	81400217 	ldw	r5,8(r16)
 c005a28:	8085883a 	add	r2,r16,r2
 c005a2c:	10c00117 	ldw	r3,4(r2)
 c005a30:	29000315 	stw	r4,12(r5)
 c005a34:	21400215 	stw	r5,8(r4)
 c005a38:	18c00054 	ori	r3,r3,1
 c005a3c:	10c00115 	stw	r3,4(r2)
 c005a40:	9009883a 	mov	r4,r18
 c005a44:	c00dd940 	call	c00dd94 <__malloc_unlock>
 c005a48:	80800204 	addi	r2,r16,8
 c005a4c:	dfc00a17 	ldw	ra,40(sp)
 c005a50:	df000917 	ldw	fp,36(sp)
 c005a54:	ddc00817 	ldw	r23,32(sp)
 c005a58:	dd800717 	ldw	r22,28(sp)
 c005a5c:	dd400617 	ldw	r21,24(sp)
 c005a60:	dd000517 	ldw	r20,20(sp)
 c005a64:	dcc00417 	ldw	r19,16(sp)
 c005a68:	dc800317 	ldw	r18,12(sp)
 c005a6c:	dc400217 	ldw	r17,8(sp)
 c005a70:	dc000117 	ldw	r16,4(sp)
 c005a74:	dec00b04 	addi	sp,sp,44
 c005a78:	f800283a 	ret
 c005a7c:	00800304 	movi	r2,12
 c005a80:	90800015 	stw	r2,0(r18)
 c005a84:	0005883a 	mov	r2,zero
 c005a88:	003ff006 	br	c005a4c <__alt_data_end+0xfc005a4c>
 c005a8c:	01002004 	movi	r4,128
 c005a90:	02001004 	movi	r8,64
 c005a94:	01c00fc4 	movi	r7,63
 c005a98:	003f6106 	br	c005820 <__alt_data_end+0xfc005820>
 c005a9c:	4009883a 	mov	r4,r8
 c005aa0:	003f7506 	br	c005878 <__alt_data_end+0xfc005878>
 c005aa4:	81000317 	ldw	r4,12(r16)
 c005aa8:	003fde06 	br	c005a24 <__alt_data_end+0xfc005a24>
 c005aac:	81c5883a 	add	r2,r16,r7
 c005ab0:	11400117 	ldw	r5,4(r2)
 c005ab4:	9009883a 	mov	r4,r18
 c005ab8:	29400054 	ori	r5,r5,1
 c005abc:	11400115 	stw	r5,4(r2)
 c005ac0:	c00dd940 	call	c00dd94 <__malloc_unlock>
 c005ac4:	80800204 	addi	r2,r16,8
 c005ac8:	003fe006 	br	c005a4c <__alt_data_end+0xfc005a4c>
 c005acc:	9c000217 	ldw	r16,8(r19)
 c005ad0:	00bfff04 	movi	r2,-4
 c005ad4:	85800117 	ldw	r22,4(r16)
 c005ad8:	b0ac703a 	and	r22,r22,r2
 c005adc:	b4400336 	bltu	r22,r17,c005aec <_malloc_r+0x344>
 c005ae0:	b445c83a 	sub	r2,r22,r17
 c005ae4:	00c003c4 	movi	r3,15
 c005ae8:	18805d16 	blt	r3,r2,c005c60 <_malloc_r+0x4b8>
 c005aec:	05c30074 	movhi	r23,3073
 c005af0:	00830074 	movhi	r2,3073
 c005af4:	108ec504 	addi	r2,r2,15124
 c005af8:	bdc7f604 	addi	r23,r23,8152
 c005afc:	15400017 	ldw	r21,0(r2)
 c005b00:	b8c00017 	ldw	r3,0(r23)
 c005b04:	00bfffc4 	movi	r2,-1
 c005b08:	858d883a 	add	r6,r16,r22
 c005b0c:	8d6b883a 	add	r21,r17,r21
 c005b10:	1880ea26 	beq	r3,r2,c005ebc <_malloc_r+0x714>
 c005b14:	ad4403c4 	addi	r21,r21,4111
 c005b18:	00bc0004 	movi	r2,-4096
 c005b1c:	a8aa703a 	and	r21,r21,r2
 c005b20:	a80b883a 	mov	r5,r21
 c005b24:	9009883a 	mov	r4,r18
 c005b28:	d9800015 	stw	r6,0(sp)
 c005b2c:	c0072ec0 	call	c0072ec <_sbrk_r>
 c005b30:	1029883a 	mov	r20,r2
 c005b34:	00bfffc4 	movi	r2,-1
 c005b38:	d9800017 	ldw	r6,0(sp)
 c005b3c:	a080e826 	beq	r20,r2,c005ee0 <_malloc_r+0x738>
 c005b40:	a180a636 	bltu	r20,r6,c005ddc <_malloc_r+0x634>
 c005b44:	07030074 	movhi	fp,3073
 c005b48:	e70ece04 	addi	fp,fp,15160
 c005b4c:	e0800017 	ldw	r2,0(fp)
 c005b50:	a887883a 	add	r3,r21,r2
 c005b54:	e0c00015 	stw	r3,0(fp)
 c005b58:	3500e626 	beq	r6,r20,c005ef4 <_malloc_r+0x74c>
 c005b5c:	b9000017 	ldw	r4,0(r23)
 c005b60:	00bfffc4 	movi	r2,-1
 c005b64:	2080ee26 	beq	r4,r2,c005f20 <_malloc_r+0x778>
 c005b68:	a185c83a 	sub	r2,r20,r6
 c005b6c:	10c5883a 	add	r2,r2,r3
 c005b70:	e0800015 	stw	r2,0(fp)
 c005b74:	a0c001cc 	andi	r3,r20,7
 c005b78:	1800bc26 	beq	r3,zero,c005e6c <_malloc_r+0x6c4>
 c005b7c:	a0e9c83a 	sub	r20,r20,r3
 c005b80:	00840204 	movi	r2,4104
 c005b84:	a5000204 	addi	r20,r20,8
 c005b88:	10c7c83a 	sub	r3,r2,r3
 c005b8c:	a545883a 	add	r2,r20,r21
 c005b90:	1083ffcc 	andi	r2,r2,4095
 c005b94:	18abc83a 	sub	r21,r3,r2
 c005b98:	a80b883a 	mov	r5,r21
 c005b9c:	9009883a 	mov	r4,r18
 c005ba0:	c0072ec0 	call	c0072ec <_sbrk_r>
 c005ba4:	00ffffc4 	movi	r3,-1
 c005ba8:	10c0e126 	beq	r2,r3,c005f30 <_malloc_r+0x788>
 c005bac:	1505c83a 	sub	r2,r2,r20
 c005bb0:	1545883a 	add	r2,r2,r21
 c005bb4:	10800054 	ori	r2,r2,1
 c005bb8:	e0c00017 	ldw	r3,0(fp)
 c005bbc:	9d000215 	stw	r20,8(r19)
 c005bc0:	a0800115 	stw	r2,4(r20)
 c005bc4:	a8c7883a 	add	r3,r21,r3
 c005bc8:	e0c00015 	stw	r3,0(fp)
 c005bcc:	84c00e26 	beq	r16,r19,c005c08 <_malloc_r+0x460>
 c005bd0:	018003c4 	movi	r6,15
 c005bd4:	3580a72e 	bgeu	r6,r22,c005e74 <_malloc_r+0x6cc>
 c005bd8:	81400117 	ldw	r5,4(r16)
 c005bdc:	013ffe04 	movi	r4,-8
 c005be0:	b0bffd04 	addi	r2,r22,-12
 c005be4:	1104703a 	and	r2,r2,r4
 c005be8:	2900004c 	andi	r4,r5,1
 c005bec:	2088b03a 	or	r4,r4,r2
 c005bf0:	81000115 	stw	r4,4(r16)
 c005bf4:	01400144 	movi	r5,5
 c005bf8:	8089883a 	add	r4,r16,r2
 c005bfc:	21400115 	stw	r5,4(r4)
 c005c00:	21400215 	stw	r5,8(r4)
 c005c04:	3080cd36 	bltu	r6,r2,c005f3c <_malloc_r+0x794>
 c005c08:	00830074 	movhi	r2,3073
 c005c0c:	108ec404 	addi	r2,r2,15120
 c005c10:	11000017 	ldw	r4,0(r2)
 c005c14:	20c0012e 	bgeu	r4,r3,c005c1c <_malloc_r+0x474>
 c005c18:	10c00015 	stw	r3,0(r2)
 c005c1c:	00830074 	movhi	r2,3073
 c005c20:	108ec304 	addi	r2,r2,15116
 c005c24:	11000017 	ldw	r4,0(r2)
 c005c28:	9c000217 	ldw	r16,8(r19)
 c005c2c:	20c0012e 	bgeu	r4,r3,c005c34 <_malloc_r+0x48c>
 c005c30:	10c00015 	stw	r3,0(r2)
 c005c34:	80c00117 	ldw	r3,4(r16)
 c005c38:	00bfff04 	movi	r2,-4
 c005c3c:	1886703a 	and	r3,r3,r2
 c005c40:	1c45c83a 	sub	r2,r3,r17
 c005c44:	1c400236 	bltu	r3,r17,c005c50 <_malloc_r+0x4a8>
 c005c48:	00c003c4 	movi	r3,15
 c005c4c:	18800416 	blt	r3,r2,c005c60 <_malloc_r+0x4b8>
 c005c50:	9009883a 	mov	r4,r18
 c005c54:	c00dd940 	call	c00dd94 <__malloc_unlock>
 c005c58:	0005883a 	mov	r2,zero
 c005c5c:	003f7b06 	br	c005a4c <__alt_data_end+0xfc005a4c>
 c005c60:	88c00054 	ori	r3,r17,1
 c005c64:	80c00115 	stw	r3,4(r16)
 c005c68:	8463883a 	add	r17,r16,r17
 c005c6c:	10800054 	ori	r2,r2,1
 c005c70:	9c400215 	stw	r17,8(r19)
 c005c74:	88800115 	stw	r2,4(r17)
 c005c78:	9009883a 	mov	r4,r18
 c005c7c:	c00dd940 	call	c00dd94 <__malloc_unlock>
 c005c80:	80800204 	addi	r2,r16,8
 c005c84:	003f7106 	br	c005a4c <__alt_data_end+0xfc005a4c>
 c005c88:	00c00504 	movi	r3,20
 c005c8c:	18804a2e 	bgeu	r3,r2,c005db8 <_malloc_r+0x610>
 c005c90:	00c01504 	movi	r3,84
 c005c94:	18806e36 	bltu	r3,r2,c005e50 <_malloc_r+0x6a8>
 c005c98:	8804d33a 	srli	r2,r17,12
 c005c9c:	12001bc4 	addi	r8,r2,111
 c005ca0:	11c01b84 	addi	r7,r2,110
 c005ca4:	4209883a 	add	r4,r8,r8
 c005ca8:	003edd06 	br	c005820 <__alt_data_end+0xfc005820>
 c005cac:	3804d27a 	srli	r2,r7,9
 c005cb0:	00c00104 	movi	r3,4
 c005cb4:	1880442e 	bgeu	r3,r2,c005dc8 <_malloc_r+0x620>
 c005cb8:	00c00504 	movi	r3,20
 c005cbc:	18808136 	bltu	r3,r2,c005ec4 <_malloc_r+0x71c>
 c005cc0:	11401704 	addi	r5,r2,92
 c005cc4:	10c016c4 	addi	r3,r2,91
 c005cc8:	294b883a 	add	r5,r5,r5
 c005ccc:	294b883a 	add	r5,r5,r5
 c005cd0:	294b883a 	add	r5,r5,r5
 c005cd4:	994b883a 	add	r5,r19,r5
 c005cd8:	28800017 	ldw	r2,0(r5)
 c005cdc:	01830074 	movhi	r6,3073
 c005ce0:	297ffe04 	addi	r5,r5,-8
 c005ce4:	31826d04 	addi	r6,r6,2484
 c005ce8:	28806526 	beq	r5,r2,c005e80 <_malloc_r+0x6d8>
 c005cec:	01bfff04 	movi	r6,-4
 c005cf0:	10c00117 	ldw	r3,4(r2)
 c005cf4:	1986703a 	and	r3,r3,r6
 c005cf8:	38c0022e 	bgeu	r7,r3,c005d04 <_malloc_r+0x55c>
 c005cfc:	10800217 	ldw	r2,8(r2)
 c005d00:	28bffb1e 	bne	r5,r2,c005cf0 <__alt_data_end+0xfc005cf0>
 c005d04:	11400317 	ldw	r5,12(r2)
 c005d08:	98c00117 	ldw	r3,4(r19)
 c005d0c:	81400315 	stw	r5,12(r16)
 c005d10:	80800215 	stw	r2,8(r16)
 c005d14:	2c000215 	stw	r16,8(r5)
 c005d18:	14000315 	stw	r16,12(r2)
 c005d1c:	003ef806 	br	c005900 <__alt_data_end+0xfc005900>
 c005d20:	88c00054 	ori	r3,r17,1
 c005d24:	80c00115 	stw	r3,4(r16)
 c005d28:	8463883a 	add	r17,r16,r17
 c005d2c:	34400515 	stw	r17,20(r6)
 c005d30:	34400415 	stw	r17,16(r6)
 c005d34:	10c00054 	ori	r3,r2,1
 c005d38:	8a000315 	stw	r8,12(r17)
 c005d3c:	8a000215 	stw	r8,8(r17)
 c005d40:	88c00115 	stw	r3,4(r17)
 c005d44:	88a3883a 	add	r17,r17,r2
 c005d48:	88800015 	stw	r2,0(r17)
 c005d4c:	9009883a 	mov	r4,r18
 c005d50:	c00dd940 	call	c00dd94 <__malloc_unlock>
 c005d54:	80800204 	addi	r2,r16,8
 c005d58:	003f3c06 	br	c005a4c <__alt_data_end+0xfc005a4c>
 c005d5c:	30c00117 	ldw	r3,4(r6)
 c005d60:	003ee706 	br	c005900 <__alt_data_end+0xfc005900>
 c005d64:	5ac00044 	addi	r11,r11,1
 c005d68:	588000cc 	andi	r2,r11,3
 c005d6c:	31800204 	addi	r6,r6,8
 c005d70:	103efd1e 	bne	r2,zero,c005968 <__alt_data_end+0xfc005968>
 c005d74:	00002406 	br	c005e08 <_malloc_r+0x660>
 c005d78:	14000317 	ldw	r16,12(r2)
 c005d7c:	143f251e 	bne	r2,r16,c005a14 <__alt_data_end+0xfc005a14>
 c005d80:	21000084 	addi	r4,r4,2
 c005d84:	003ebc06 	br	c005878 <__alt_data_end+0xfc005878>
 c005d88:	8085883a 	add	r2,r16,r2
 c005d8c:	10c00117 	ldw	r3,4(r2)
 c005d90:	81000317 	ldw	r4,12(r16)
 c005d94:	81400217 	ldw	r5,8(r16)
 c005d98:	18c00054 	ori	r3,r3,1
 c005d9c:	10c00115 	stw	r3,4(r2)
 c005da0:	29000315 	stw	r4,12(r5)
 c005da4:	21400215 	stw	r5,8(r4)
 c005da8:	9009883a 	mov	r4,r18
 c005dac:	c00dd940 	call	c00dd94 <__malloc_unlock>
 c005db0:	80800204 	addi	r2,r16,8
 c005db4:	003f2506 	br	c005a4c <__alt_data_end+0xfc005a4c>
 c005db8:	12001704 	addi	r8,r2,92
 c005dbc:	11c016c4 	addi	r7,r2,91
 c005dc0:	4209883a 	add	r4,r8,r8
 c005dc4:	003e9606 	br	c005820 <__alt_data_end+0xfc005820>
 c005dc8:	3804d1ba 	srli	r2,r7,6
 c005dcc:	11400e44 	addi	r5,r2,57
 c005dd0:	10c00e04 	addi	r3,r2,56
 c005dd4:	294b883a 	add	r5,r5,r5
 c005dd8:	003fbc06 	br	c005ccc <__alt_data_end+0xfc005ccc>
 c005ddc:	84ff5926 	beq	r16,r19,c005b44 <__alt_data_end+0xfc005b44>
 c005de0:	00830074 	movhi	r2,3073
 c005de4:	10826d04 	addi	r2,r2,2484
 c005de8:	14000217 	ldw	r16,8(r2)
 c005dec:	00bfff04 	movi	r2,-4
 c005df0:	80c00117 	ldw	r3,4(r16)
 c005df4:	1886703a 	and	r3,r3,r2
 c005df8:	003f9106 	br	c005c40 <__alt_data_end+0xfc005c40>
 c005dfc:	60800217 	ldw	r2,8(r12)
 c005e00:	213fffc4 	addi	r4,r4,-1
 c005e04:	1300651e 	bne	r2,r12,c005f9c <_malloc_r+0x7f4>
 c005e08:	208000cc 	andi	r2,r4,3
 c005e0c:	633ffe04 	addi	r12,r12,-8
 c005e10:	103ffa1e 	bne	r2,zero,c005dfc <__alt_data_end+0xfc005dfc>
 c005e14:	98800117 	ldw	r2,4(r19)
 c005e18:	0146303a 	nor	r3,zero,r5
 c005e1c:	1884703a 	and	r2,r3,r2
 c005e20:	98800115 	stw	r2,4(r19)
 c005e24:	294b883a 	add	r5,r5,r5
 c005e28:	117f2836 	bltu	r2,r5,c005acc <__alt_data_end+0xfc005acc>
 c005e2c:	283f2726 	beq	r5,zero,c005acc <__alt_data_end+0xfc005acc>
 c005e30:	2886703a 	and	r3,r5,r2
 c005e34:	5809883a 	mov	r4,r11
 c005e38:	183ec31e 	bne	r3,zero,c005948 <__alt_data_end+0xfc005948>
 c005e3c:	294b883a 	add	r5,r5,r5
 c005e40:	2886703a 	and	r3,r5,r2
 c005e44:	21000104 	addi	r4,r4,4
 c005e48:	183ffc26 	beq	r3,zero,c005e3c <__alt_data_end+0xfc005e3c>
 c005e4c:	003ebe06 	br	c005948 <__alt_data_end+0xfc005948>
 c005e50:	00c05504 	movi	r3,340
 c005e54:	18801236 	bltu	r3,r2,c005ea0 <_malloc_r+0x6f8>
 c005e58:	8804d3fa 	srli	r2,r17,15
 c005e5c:	12001e04 	addi	r8,r2,120
 c005e60:	11c01dc4 	addi	r7,r2,119
 c005e64:	4209883a 	add	r4,r8,r8
 c005e68:	003e6d06 	br	c005820 <__alt_data_end+0xfc005820>
 c005e6c:	00c40004 	movi	r3,4096
 c005e70:	003f4606 	br	c005b8c <__alt_data_end+0xfc005b8c>
 c005e74:	00800044 	movi	r2,1
 c005e78:	a0800115 	stw	r2,4(r20)
 c005e7c:	003f7406 	br	c005c50 <__alt_data_end+0xfc005c50>
 c005e80:	1805d0ba 	srai	r2,r3,2
 c005e84:	01c00044 	movi	r7,1
 c005e88:	30c00117 	ldw	r3,4(r6)
 c005e8c:	388e983a 	sll	r7,r7,r2
 c005e90:	2805883a 	mov	r2,r5
 c005e94:	38c6b03a 	or	r3,r7,r3
 c005e98:	30c00115 	stw	r3,4(r6)
 c005e9c:	003f9b06 	br	c005d0c <__alt_data_end+0xfc005d0c>
 c005ea0:	00c15504 	movi	r3,1364
 c005ea4:	18801a36 	bltu	r3,r2,c005f10 <_malloc_r+0x768>
 c005ea8:	8804d4ba 	srli	r2,r17,18
 c005eac:	12001f44 	addi	r8,r2,125
 c005eb0:	11c01f04 	addi	r7,r2,124
 c005eb4:	4209883a 	add	r4,r8,r8
 c005eb8:	003e5906 	br	c005820 <__alt_data_end+0xfc005820>
 c005ebc:	ad400404 	addi	r21,r21,16
 c005ec0:	003f1706 	br	c005b20 <__alt_data_end+0xfc005b20>
 c005ec4:	00c01504 	movi	r3,84
 c005ec8:	18802336 	bltu	r3,r2,c005f58 <_malloc_r+0x7b0>
 c005ecc:	3804d33a 	srli	r2,r7,12
 c005ed0:	11401bc4 	addi	r5,r2,111
 c005ed4:	10c01b84 	addi	r3,r2,110
 c005ed8:	294b883a 	add	r5,r5,r5
 c005edc:	003f7b06 	br	c005ccc <__alt_data_end+0xfc005ccc>
 c005ee0:	9c000217 	ldw	r16,8(r19)
 c005ee4:	00bfff04 	movi	r2,-4
 c005ee8:	80c00117 	ldw	r3,4(r16)
 c005eec:	1886703a 	and	r3,r3,r2
 c005ef0:	003f5306 	br	c005c40 <__alt_data_end+0xfc005c40>
 c005ef4:	3083ffcc 	andi	r2,r6,4095
 c005ef8:	103f181e 	bne	r2,zero,c005b5c <__alt_data_end+0xfc005b5c>
 c005efc:	99000217 	ldw	r4,8(r19)
 c005f00:	b545883a 	add	r2,r22,r21
 c005f04:	10800054 	ori	r2,r2,1
 c005f08:	20800115 	stw	r2,4(r4)
 c005f0c:	003f3e06 	br	c005c08 <__alt_data_end+0xfc005c08>
 c005f10:	01003f84 	movi	r4,254
 c005f14:	02001fc4 	movi	r8,127
 c005f18:	01c01f84 	movi	r7,126
 c005f1c:	003e4006 	br	c005820 <__alt_data_end+0xfc005820>
 c005f20:	00830074 	movhi	r2,3073
 c005f24:	1087f604 	addi	r2,r2,8152
 c005f28:	15000015 	stw	r20,0(r2)
 c005f2c:	003f1106 	br	c005b74 <__alt_data_end+0xfc005b74>
 c005f30:	00800044 	movi	r2,1
 c005f34:	002b883a 	mov	r21,zero
 c005f38:	003f1f06 	br	c005bb8 <__alt_data_end+0xfc005bb8>
 c005f3c:	81400204 	addi	r5,r16,8
 c005f40:	9009883a 	mov	r4,r18
 c005f44:	c0050780 	call	c005078 <_free_r>
 c005f48:	00830074 	movhi	r2,3073
 c005f4c:	108ece04 	addi	r2,r2,15160
 c005f50:	10c00017 	ldw	r3,0(r2)
 c005f54:	003f2c06 	br	c005c08 <__alt_data_end+0xfc005c08>
 c005f58:	00c05504 	movi	r3,340
 c005f5c:	18800536 	bltu	r3,r2,c005f74 <_malloc_r+0x7cc>
 c005f60:	3804d3fa 	srli	r2,r7,15
 c005f64:	11401e04 	addi	r5,r2,120
 c005f68:	10c01dc4 	addi	r3,r2,119
 c005f6c:	294b883a 	add	r5,r5,r5
 c005f70:	003f5606 	br	c005ccc <__alt_data_end+0xfc005ccc>
 c005f74:	00c15504 	movi	r3,1364
 c005f78:	18800536 	bltu	r3,r2,c005f90 <_malloc_r+0x7e8>
 c005f7c:	3804d4ba 	srli	r2,r7,18
 c005f80:	11401f44 	addi	r5,r2,125
 c005f84:	10c01f04 	addi	r3,r2,124
 c005f88:	294b883a 	add	r5,r5,r5
 c005f8c:	003f4f06 	br	c005ccc <__alt_data_end+0xfc005ccc>
 c005f90:	01403f84 	movi	r5,254
 c005f94:	00c01f84 	movi	r3,126
 c005f98:	003f4c06 	br	c005ccc <__alt_data_end+0xfc005ccc>
 c005f9c:	98800117 	ldw	r2,4(r19)
 c005fa0:	003fa006 	br	c005e24 <__alt_data_end+0xfc005e24>
 c005fa4:	8808d0fa 	srli	r4,r17,3
 c005fa8:	20800044 	addi	r2,r4,1
 c005fac:	1085883a 	add	r2,r2,r2
 c005fb0:	003e9006 	br	c0059f4 <__alt_data_end+0xfc0059f4>

0c005fb4 <memchr>:
 c005fb4:	208000cc 	andi	r2,r4,3
 c005fb8:	280f883a 	mov	r7,r5
 c005fbc:	10003426 	beq	r2,zero,c006090 <memchr+0xdc>
 c005fc0:	30bfffc4 	addi	r2,r6,-1
 c005fc4:	30001a26 	beq	r6,zero,c006030 <memchr+0x7c>
 c005fc8:	20c00003 	ldbu	r3,0(r4)
 c005fcc:	29803fcc 	andi	r6,r5,255
 c005fd0:	30c0051e 	bne	r6,r3,c005fe8 <memchr+0x34>
 c005fd4:	00001806 	br	c006038 <memchr+0x84>
 c005fd8:	10001526 	beq	r2,zero,c006030 <memchr+0x7c>
 c005fdc:	20c00003 	ldbu	r3,0(r4)
 c005fe0:	10bfffc4 	addi	r2,r2,-1
 c005fe4:	30c01426 	beq	r6,r3,c006038 <memchr+0x84>
 c005fe8:	21000044 	addi	r4,r4,1
 c005fec:	20c000cc 	andi	r3,r4,3
 c005ff0:	183ff91e 	bne	r3,zero,c005fd8 <__alt_data_end+0xfc005fd8>
 c005ff4:	020000c4 	movi	r8,3
 c005ff8:	40801136 	bltu	r8,r2,c006040 <memchr+0x8c>
 c005ffc:	10000c26 	beq	r2,zero,c006030 <memchr+0x7c>
 c006000:	20c00003 	ldbu	r3,0(r4)
 c006004:	29403fcc 	andi	r5,r5,255
 c006008:	28c00b26 	beq	r5,r3,c006038 <memchr+0x84>
 c00600c:	20c00044 	addi	r3,r4,1
 c006010:	39803fcc 	andi	r6,r7,255
 c006014:	2089883a 	add	r4,r4,r2
 c006018:	00000306 	br	c006028 <memchr+0x74>
 c00601c:	18c00044 	addi	r3,r3,1
 c006020:	197fffc3 	ldbu	r5,-1(r3)
 c006024:	31400526 	beq	r6,r5,c00603c <memchr+0x88>
 c006028:	1805883a 	mov	r2,r3
 c00602c:	20fffb1e 	bne	r4,r3,c00601c <__alt_data_end+0xfc00601c>
 c006030:	0005883a 	mov	r2,zero
 c006034:	f800283a 	ret
 c006038:	2005883a 	mov	r2,r4
 c00603c:	f800283a 	ret
 c006040:	28c03fcc 	andi	r3,r5,255
 c006044:	1812923a 	slli	r9,r3,8
 c006048:	02ffbff4 	movhi	r11,65279
 c00604c:	02a02074 	movhi	r10,32897
 c006050:	48d2b03a 	or	r9,r9,r3
 c006054:	4806943a 	slli	r3,r9,16
 c006058:	5affbfc4 	addi	r11,r11,-257
 c00605c:	52a02004 	addi	r10,r10,-32640
 c006060:	48d2b03a 	or	r9,r9,r3
 c006064:	20c00017 	ldw	r3,0(r4)
 c006068:	48c6f03a 	xor	r3,r9,r3
 c00606c:	1acd883a 	add	r6,r3,r11
 c006070:	00c6303a 	nor	r3,zero,r3
 c006074:	30c6703a 	and	r3,r6,r3
 c006078:	1a86703a 	and	r3,r3,r10
 c00607c:	183fe01e 	bne	r3,zero,c006000 <__alt_data_end+0xfc006000>
 c006080:	10bfff04 	addi	r2,r2,-4
 c006084:	21000104 	addi	r4,r4,4
 c006088:	40bff636 	bltu	r8,r2,c006064 <__alt_data_end+0xfc006064>
 c00608c:	003fdb06 	br	c005ffc <__alt_data_end+0xfc005ffc>
 c006090:	3005883a 	mov	r2,r6
 c006094:	003fd706 	br	c005ff4 <__alt_data_end+0xfc005ff4>

0c006098 <memset>:
 c006098:	20c000cc 	andi	r3,r4,3
 c00609c:	2005883a 	mov	r2,r4
 c0060a0:	18004426 	beq	r3,zero,c0061b4 <memset+0x11c>
 c0060a4:	31ffffc4 	addi	r7,r6,-1
 c0060a8:	30004026 	beq	r6,zero,c0061ac <memset+0x114>
 c0060ac:	2813883a 	mov	r9,r5
 c0060b0:	200d883a 	mov	r6,r4
 c0060b4:	2007883a 	mov	r3,r4
 c0060b8:	00000406 	br	c0060cc <memset+0x34>
 c0060bc:	3a3fffc4 	addi	r8,r7,-1
 c0060c0:	31800044 	addi	r6,r6,1
 c0060c4:	38003926 	beq	r7,zero,c0061ac <memset+0x114>
 c0060c8:	400f883a 	mov	r7,r8
 c0060cc:	18c00044 	addi	r3,r3,1
 c0060d0:	32400005 	stb	r9,0(r6)
 c0060d4:	1a0000cc 	andi	r8,r3,3
 c0060d8:	403ff81e 	bne	r8,zero,c0060bc <__alt_data_end+0xfc0060bc>
 c0060dc:	010000c4 	movi	r4,3
 c0060e0:	21c02d2e 	bgeu	r4,r7,c006198 <memset+0x100>
 c0060e4:	29003fcc 	andi	r4,r5,255
 c0060e8:	200c923a 	slli	r6,r4,8
 c0060ec:	3108b03a 	or	r4,r6,r4
 c0060f0:	200c943a 	slli	r6,r4,16
 c0060f4:	218cb03a 	or	r6,r4,r6
 c0060f8:	010003c4 	movi	r4,15
 c0060fc:	21c0182e 	bgeu	r4,r7,c006160 <memset+0xc8>
 c006100:	3b3ffc04 	addi	r12,r7,-16
 c006104:	6018d13a 	srli	r12,r12,4
 c006108:	1a000104 	addi	r8,r3,4
 c00610c:	1ac00204 	addi	r11,r3,8
 c006110:	6008913a 	slli	r4,r12,4
 c006114:	1a800304 	addi	r10,r3,12
 c006118:	1813883a 	mov	r9,r3
 c00611c:	21000504 	addi	r4,r4,20
 c006120:	1909883a 	add	r4,r3,r4
 c006124:	49800015 	stw	r6,0(r9)
 c006128:	41800015 	stw	r6,0(r8)
 c00612c:	59800015 	stw	r6,0(r11)
 c006130:	51800015 	stw	r6,0(r10)
 c006134:	42000404 	addi	r8,r8,16
 c006138:	4a400404 	addi	r9,r9,16
 c00613c:	5ac00404 	addi	r11,r11,16
 c006140:	52800404 	addi	r10,r10,16
 c006144:	413ff71e 	bne	r8,r4,c006124 <__alt_data_end+0xfc006124>
 c006148:	63000044 	addi	r12,r12,1
 c00614c:	6018913a 	slli	r12,r12,4
 c006150:	39c003cc 	andi	r7,r7,15
 c006154:	010000c4 	movi	r4,3
 c006158:	1b07883a 	add	r3,r3,r12
 c00615c:	21c00e2e 	bgeu	r4,r7,c006198 <memset+0x100>
 c006160:	1813883a 	mov	r9,r3
 c006164:	3811883a 	mov	r8,r7
 c006168:	010000c4 	movi	r4,3
 c00616c:	49800015 	stw	r6,0(r9)
 c006170:	423fff04 	addi	r8,r8,-4
 c006174:	4a400104 	addi	r9,r9,4
 c006178:	223ffc36 	bltu	r4,r8,c00616c <__alt_data_end+0xfc00616c>
 c00617c:	393fff04 	addi	r4,r7,-4
 c006180:	2008d0ba 	srli	r4,r4,2
 c006184:	39c000cc 	andi	r7,r7,3
 c006188:	21000044 	addi	r4,r4,1
 c00618c:	2109883a 	add	r4,r4,r4
 c006190:	2109883a 	add	r4,r4,r4
 c006194:	1907883a 	add	r3,r3,r4
 c006198:	38000526 	beq	r7,zero,c0061b0 <memset+0x118>
 c00619c:	19cf883a 	add	r7,r3,r7
 c0061a0:	19400005 	stb	r5,0(r3)
 c0061a4:	18c00044 	addi	r3,r3,1
 c0061a8:	38fffd1e 	bne	r7,r3,c0061a0 <__alt_data_end+0xfc0061a0>
 c0061ac:	f800283a 	ret
 c0061b0:	f800283a 	ret
 c0061b4:	2007883a 	mov	r3,r4
 c0061b8:	300f883a 	mov	r7,r6
 c0061bc:	003fc706 	br	c0060dc <__alt_data_end+0xfc0060dc>

0c0061c0 <_Balloc>:
 c0061c0:	20801317 	ldw	r2,76(r4)
 c0061c4:	defffc04 	addi	sp,sp,-16
 c0061c8:	dc400115 	stw	r17,4(sp)
 c0061cc:	dc000015 	stw	r16,0(sp)
 c0061d0:	dfc00315 	stw	ra,12(sp)
 c0061d4:	dc800215 	stw	r18,8(sp)
 c0061d8:	2023883a 	mov	r17,r4
 c0061dc:	2821883a 	mov	r16,r5
 c0061e0:	10000f26 	beq	r2,zero,c006220 <_Balloc+0x60>
 c0061e4:	8407883a 	add	r3,r16,r16
 c0061e8:	18c7883a 	add	r3,r3,r3
 c0061ec:	10c7883a 	add	r3,r2,r3
 c0061f0:	18800017 	ldw	r2,0(r3)
 c0061f4:	10001126 	beq	r2,zero,c00623c <_Balloc+0x7c>
 c0061f8:	11000017 	ldw	r4,0(r2)
 c0061fc:	19000015 	stw	r4,0(r3)
 c006200:	10000415 	stw	zero,16(r2)
 c006204:	10000315 	stw	zero,12(r2)
 c006208:	dfc00317 	ldw	ra,12(sp)
 c00620c:	dc800217 	ldw	r18,8(sp)
 c006210:	dc400117 	ldw	r17,4(sp)
 c006214:	dc000017 	ldw	r16,0(sp)
 c006218:	dec00404 	addi	sp,sp,16
 c00621c:	f800283a 	ret
 c006220:	01800844 	movi	r6,33
 c006224:	01400104 	movi	r5,4
 c006228:	c008d9c0 	call	c008d9c <_calloc_r>
 c00622c:	88801315 	stw	r2,76(r17)
 c006230:	103fec1e 	bne	r2,zero,c0061e4 <__alt_data_end+0xfc0061e4>
 c006234:	0005883a 	mov	r2,zero
 c006238:	003ff306 	br	c006208 <__alt_data_end+0xfc006208>
 c00623c:	01400044 	movi	r5,1
 c006240:	2c24983a 	sll	r18,r5,r16
 c006244:	8809883a 	mov	r4,r17
 c006248:	91800144 	addi	r6,r18,5
 c00624c:	318d883a 	add	r6,r6,r6
 c006250:	318d883a 	add	r6,r6,r6
 c006254:	c008d9c0 	call	c008d9c <_calloc_r>
 c006258:	103ff626 	beq	r2,zero,c006234 <__alt_data_end+0xfc006234>
 c00625c:	14000115 	stw	r16,4(r2)
 c006260:	14800215 	stw	r18,8(r2)
 c006264:	003fe606 	br	c006200 <__alt_data_end+0xfc006200>

0c006268 <_Bfree>:
 c006268:	28000826 	beq	r5,zero,c00628c <_Bfree+0x24>
 c00626c:	28c00117 	ldw	r3,4(r5)
 c006270:	20801317 	ldw	r2,76(r4)
 c006274:	18c7883a 	add	r3,r3,r3
 c006278:	18c7883a 	add	r3,r3,r3
 c00627c:	10c5883a 	add	r2,r2,r3
 c006280:	10c00017 	ldw	r3,0(r2)
 c006284:	28c00015 	stw	r3,0(r5)
 c006288:	11400015 	stw	r5,0(r2)
 c00628c:	f800283a 	ret

0c006290 <__multadd>:
 c006290:	defff704 	addi	sp,sp,-36
 c006294:	dc800215 	stw	r18,8(sp)
 c006298:	2c800417 	ldw	r18,16(r5)
 c00629c:	dd800615 	stw	r22,24(sp)
 c0062a0:	dd400515 	stw	r21,20(sp)
 c0062a4:	dd000415 	stw	r20,16(sp)
 c0062a8:	dcc00315 	stw	r19,12(sp)
 c0062ac:	dc400115 	stw	r17,4(sp)
 c0062b0:	dc000015 	stw	r16,0(sp)
 c0062b4:	dfc00815 	stw	ra,32(sp)
 c0062b8:	ddc00715 	stw	r23,28(sp)
 c0062bc:	2827883a 	mov	r19,r5
 c0062c0:	2029883a 	mov	r20,r4
 c0062c4:	3023883a 	mov	r17,r6
 c0062c8:	3821883a 	mov	r16,r7
 c0062cc:	2d400504 	addi	r21,r5,20
 c0062d0:	002d883a 	mov	r22,zero
 c0062d4:	adc00017 	ldw	r23,0(r21)
 c0062d8:	880b883a 	mov	r5,r17
 c0062dc:	ad400104 	addi	r21,r21,4
 c0062e0:	b93fffcc 	andi	r4,r23,65535
 c0062e4:	c0009680 	call	c000968 <__mulsi3>
 c0062e8:	b808d43a 	srli	r4,r23,16
 c0062ec:	880b883a 	mov	r5,r17
 c0062f0:	1421883a 	add	r16,r2,r16
 c0062f4:	c0009680 	call	c000968 <__mulsi3>
 c0062f8:	800ed43a 	srli	r7,r16,16
 c0062fc:	80ffffcc 	andi	r3,r16,65535
 c006300:	b5800044 	addi	r22,r22,1
 c006304:	11c5883a 	add	r2,r2,r7
 c006308:	100e943a 	slli	r7,r2,16
 c00630c:	1020d43a 	srli	r16,r2,16
 c006310:	38c7883a 	add	r3,r7,r3
 c006314:	a8ffff15 	stw	r3,-4(r21)
 c006318:	b4bfee16 	blt	r22,r18,c0062d4 <__alt_data_end+0xfc0062d4>
 c00631c:	80000926 	beq	r16,zero,c006344 <__multadd+0xb4>
 c006320:	98800217 	ldw	r2,8(r19)
 c006324:	9080130e 	bge	r18,r2,c006374 <__multadd+0xe4>
 c006328:	90800144 	addi	r2,r18,5
 c00632c:	1085883a 	add	r2,r2,r2
 c006330:	1085883a 	add	r2,r2,r2
 c006334:	9885883a 	add	r2,r19,r2
 c006338:	14000015 	stw	r16,0(r2)
 c00633c:	94800044 	addi	r18,r18,1
 c006340:	9c800415 	stw	r18,16(r19)
 c006344:	9805883a 	mov	r2,r19
 c006348:	dfc00817 	ldw	ra,32(sp)
 c00634c:	ddc00717 	ldw	r23,28(sp)
 c006350:	dd800617 	ldw	r22,24(sp)
 c006354:	dd400517 	ldw	r21,20(sp)
 c006358:	dd000417 	ldw	r20,16(sp)
 c00635c:	dcc00317 	ldw	r19,12(sp)
 c006360:	dc800217 	ldw	r18,8(sp)
 c006364:	dc400117 	ldw	r17,4(sp)
 c006368:	dc000017 	ldw	r16,0(sp)
 c00636c:	dec00904 	addi	sp,sp,36
 c006370:	f800283a 	ret
 c006374:	99400117 	ldw	r5,4(r19)
 c006378:	a009883a 	mov	r4,r20
 c00637c:	29400044 	addi	r5,r5,1
 c006380:	c0061c00 	call	c0061c0 <_Balloc>
 c006384:	99800417 	ldw	r6,16(r19)
 c006388:	99400304 	addi	r5,r19,12
 c00638c:	11000304 	addi	r4,r2,12
 c006390:	31800084 	addi	r6,r6,2
 c006394:	318d883a 	add	r6,r6,r6
 c006398:	318d883a 	add	r6,r6,r6
 c00639c:	1023883a 	mov	r17,r2
 c0063a0:	c0009900 	call	c000990 <memcpy>
 c0063a4:	98000a26 	beq	r19,zero,c0063d0 <__multadd+0x140>
 c0063a8:	98c00117 	ldw	r3,4(r19)
 c0063ac:	a0801317 	ldw	r2,76(r20)
 c0063b0:	18c7883a 	add	r3,r3,r3
 c0063b4:	18c7883a 	add	r3,r3,r3
 c0063b8:	10c5883a 	add	r2,r2,r3
 c0063bc:	10c00017 	ldw	r3,0(r2)
 c0063c0:	98c00015 	stw	r3,0(r19)
 c0063c4:	14c00015 	stw	r19,0(r2)
 c0063c8:	8827883a 	mov	r19,r17
 c0063cc:	003fd606 	br	c006328 <__alt_data_end+0xfc006328>
 c0063d0:	8827883a 	mov	r19,r17
 c0063d4:	003fd406 	br	c006328 <__alt_data_end+0xfc006328>

0c0063d8 <__s2b>:
 c0063d8:	defff904 	addi	sp,sp,-28
 c0063dc:	dc400115 	stw	r17,4(sp)
 c0063e0:	dc000015 	stw	r16,0(sp)
 c0063e4:	2023883a 	mov	r17,r4
 c0063e8:	2821883a 	mov	r16,r5
 c0063ec:	39000204 	addi	r4,r7,8
 c0063f0:	01400244 	movi	r5,9
 c0063f4:	dcc00315 	stw	r19,12(sp)
 c0063f8:	dc800215 	stw	r18,8(sp)
 c0063fc:	dfc00615 	stw	ra,24(sp)
 c006400:	dd400515 	stw	r21,20(sp)
 c006404:	dd000415 	stw	r20,16(sp)
 c006408:	3825883a 	mov	r18,r7
 c00640c:	3027883a 	mov	r19,r6
 c006410:	c00ad7c0 	call	c00ad7c <__divsi3>
 c006414:	00c00044 	movi	r3,1
 c006418:	000b883a 	mov	r5,zero
 c00641c:	1880030e 	bge	r3,r2,c00642c <__s2b+0x54>
 c006420:	18c7883a 	add	r3,r3,r3
 c006424:	29400044 	addi	r5,r5,1
 c006428:	18bffd16 	blt	r3,r2,c006420 <__alt_data_end+0xfc006420>
 c00642c:	8809883a 	mov	r4,r17
 c006430:	c0061c00 	call	c0061c0 <_Balloc>
 c006434:	d8c00717 	ldw	r3,28(sp)
 c006438:	10c00515 	stw	r3,20(r2)
 c00643c:	00c00044 	movi	r3,1
 c006440:	10c00415 	stw	r3,16(r2)
 c006444:	00c00244 	movi	r3,9
 c006448:	1cc0210e 	bge	r3,r19,c0064d0 <__s2b+0xf8>
 c00644c:	80eb883a 	add	r21,r16,r3
 c006450:	a829883a 	mov	r20,r21
 c006454:	84e1883a 	add	r16,r16,r19
 c006458:	a1c00007 	ldb	r7,0(r20)
 c00645c:	01800284 	movi	r6,10
 c006460:	a5000044 	addi	r20,r20,1
 c006464:	100b883a 	mov	r5,r2
 c006468:	39fff404 	addi	r7,r7,-48
 c00646c:	8809883a 	mov	r4,r17
 c006470:	c0062900 	call	c006290 <__multadd>
 c006474:	a43ff81e 	bne	r20,r16,c006458 <__alt_data_end+0xfc006458>
 c006478:	ace1883a 	add	r16,r21,r19
 c00647c:	843ffe04 	addi	r16,r16,-8
 c006480:	9c800a0e 	bge	r19,r18,c0064ac <__s2b+0xd4>
 c006484:	94e5c83a 	sub	r18,r18,r19
 c006488:	84a5883a 	add	r18,r16,r18
 c00648c:	81c00007 	ldb	r7,0(r16)
 c006490:	01800284 	movi	r6,10
 c006494:	84000044 	addi	r16,r16,1
 c006498:	100b883a 	mov	r5,r2
 c00649c:	39fff404 	addi	r7,r7,-48
 c0064a0:	8809883a 	mov	r4,r17
 c0064a4:	c0062900 	call	c006290 <__multadd>
 c0064a8:	84bff81e 	bne	r16,r18,c00648c <__alt_data_end+0xfc00648c>
 c0064ac:	dfc00617 	ldw	ra,24(sp)
 c0064b0:	dd400517 	ldw	r21,20(sp)
 c0064b4:	dd000417 	ldw	r20,16(sp)
 c0064b8:	dcc00317 	ldw	r19,12(sp)
 c0064bc:	dc800217 	ldw	r18,8(sp)
 c0064c0:	dc400117 	ldw	r17,4(sp)
 c0064c4:	dc000017 	ldw	r16,0(sp)
 c0064c8:	dec00704 	addi	sp,sp,28
 c0064cc:	f800283a 	ret
 c0064d0:	84000284 	addi	r16,r16,10
 c0064d4:	1827883a 	mov	r19,r3
 c0064d8:	003fe906 	br	c006480 <__alt_data_end+0xfc006480>

0c0064dc <__hi0bits>:
 c0064dc:	20bfffec 	andhi	r2,r4,65535
 c0064e0:	1000141e 	bne	r2,zero,c006534 <__hi0bits+0x58>
 c0064e4:	2008943a 	slli	r4,r4,16
 c0064e8:	00800404 	movi	r2,16
 c0064ec:	20ffc02c 	andhi	r3,r4,65280
 c0064f0:	1800021e 	bne	r3,zero,c0064fc <__hi0bits+0x20>
 c0064f4:	2008923a 	slli	r4,r4,8
 c0064f8:	10800204 	addi	r2,r2,8
 c0064fc:	20fc002c 	andhi	r3,r4,61440
 c006500:	1800021e 	bne	r3,zero,c00650c <__hi0bits+0x30>
 c006504:	2008913a 	slli	r4,r4,4
 c006508:	10800104 	addi	r2,r2,4
 c00650c:	20f0002c 	andhi	r3,r4,49152
 c006510:	1800031e 	bne	r3,zero,c006520 <__hi0bits+0x44>
 c006514:	2109883a 	add	r4,r4,r4
 c006518:	10800084 	addi	r2,r2,2
 c00651c:	2109883a 	add	r4,r4,r4
 c006520:	20000316 	blt	r4,zero,c006530 <__hi0bits+0x54>
 c006524:	2110002c 	andhi	r4,r4,16384
 c006528:	2000041e 	bne	r4,zero,c00653c <__hi0bits+0x60>
 c00652c:	00800804 	movi	r2,32
 c006530:	f800283a 	ret
 c006534:	0005883a 	mov	r2,zero
 c006538:	003fec06 	br	c0064ec <__alt_data_end+0xfc0064ec>
 c00653c:	10800044 	addi	r2,r2,1
 c006540:	f800283a 	ret

0c006544 <__lo0bits>:
 c006544:	20c00017 	ldw	r3,0(r4)
 c006548:	188001cc 	andi	r2,r3,7
 c00654c:	10000826 	beq	r2,zero,c006570 <__lo0bits+0x2c>
 c006550:	1880004c 	andi	r2,r3,1
 c006554:	1000211e 	bne	r2,zero,c0065dc <__lo0bits+0x98>
 c006558:	1880008c 	andi	r2,r3,2
 c00655c:	1000211e 	bne	r2,zero,c0065e4 <__lo0bits+0xa0>
 c006560:	1806d0ba 	srli	r3,r3,2
 c006564:	00800084 	movi	r2,2
 c006568:	20c00015 	stw	r3,0(r4)
 c00656c:	f800283a 	ret
 c006570:	18bfffcc 	andi	r2,r3,65535
 c006574:	10001326 	beq	r2,zero,c0065c4 <__lo0bits+0x80>
 c006578:	0005883a 	mov	r2,zero
 c00657c:	19403fcc 	andi	r5,r3,255
 c006580:	2800021e 	bne	r5,zero,c00658c <__lo0bits+0x48>
 c006584:	1806d23a 	srli	r3,r3,8
 c006588:	10800204 	addi	r2,r2,8
 c00658c:	194003cc 	andi	r5,r3,15
 c006590:	2800021e 	bne	r5,zero,c00659c <__lo0bits+0x58>
 c006594:	1806d13a 	srli	r3,r3,4
 c006598:	10800104 	addi	r2,r2,4
 c00659c:	194000cc 	andi	r5,r3,3
 c0065a0:	2800021e 	bne	r5,zero,c0065ac <__lo0bits+0x68>
 c0065a4:	1806d0ba 	srli	r3,r3,2
 c0065a8:	10800084 	addi	r2,r2,2
 c0065ac:	1940004c 	andi	r5,r3,1
 c0065b0:	2800081e 	bne	r5,zero,c0065d4 <__lo0bits+0x90>
 c0065b4:	1806d07a 	srli	r3,r3,1
 c0065b8:	1800051e 	bne	r3,zero,c0065d0 <__lo0bits+0x8c>
 c0065bc:	00800804 	movi	r2,32
 c0065c0:	f800283a 	ret
 c0065c4:	1806d43a 	srli	r3,r3,16
 c0065c8:	00800404 	movi	r2,16
 c0065cc:	003feb06 	br	c00657c <__alt_data_end+0xfc00657c>
 c0065d0:	10800044 	addi	r2,r2,1
 c0065d4:	20c00015 	stw	r3,0(r4)
 c0065d8:	f800283a 	ret
 c0065dc:	0005883a 	mov	r2,zero
 c0065e0:	f800283a 	ret
 c0065e4:	1806d07a 	srli	r3,r3,1
 c0065e8:	00800044 	movi	r2,1
 c0065ec:	20c00015 	stw	r3,0(r4)
 c0065f0:	f800283a 	ret

0c0065f4 <__i2b>:
 c0065f4:	defffd04 	addi	sp,sp,-12
 c0065f8:	dc000015 	stw	r16,0(sp)
 c0065fc:	04000044 	movi	r16,1
 c006600:	dc400115 	stw	r17,4(sp)
 c006604:	2823883a 	mov	r17,r5
 c006608:	800b883a 	mov	r5,r16
 c00660c:	dfc00215 	stw	ra,8(sp)
 c006610:	c0061c00 	call	c0061c0 <_Balloc>
 c006614:	14400515 	stw	r17,20(r2)
 c006618:	14000415 	stw	r16,16(r2)
 c00661c:	dfc00217 	ldw	ra,8(sp)
 c006620:	dc400117 	ldw	r17,4(sp)
 c006624:	dc000017 	ldw	r16,0(sp)
 c006628:	dec00304 	addi	sp,sp,12
 c00662c:	f800283a 	ret

0c006630 <__multiply>:
 c006630:	deffef04 	addi	sp,sp,-68
 c006634:	dc400815 	stw	r17,32(sp)
 c006638:	dc000715 	stw	r16,28(sp)
 c00663c:	34400417 	ldw	r17,16(r6)
 c006640:	2c000417 	ldw	r16,16(r5)
 c006644:	dd800d15 	stw	r22,52(sp)
 c006648:	dc800915 	stw	r18,36(sp)
 c00664c:	dfc01015 	stw	ra,64(sp)
 c006650:	df000f15 	stw	fp,60(sp)
 c006654:	ddc00e15 	stw	r23,56(sp)
 c006658:	dd400c15 	stw	r21,48(sp)
 c00665c:	dd000b15 	stw	r20,44(sp)
 c006660:	dcc00a15 	stw	r19,40(sp)
 c006664:	2825883a 	mov	r18,r5
 c006668:	302d883a 	mov	r22,r6
 c00666c:	8440050e 	bge	r16,r17,c006684 <__multiply+0x54>
 c006670:	8007883a 	mov	r3,r16
 c006674:	3025883a 	mov	r18,r6
 c006678:	8821883a 	mov	r16,r17
 c00667c:	282d883a 	mov	r22,r5
 c006680:	1823883a 	mov	r17,r3
 c006684:	90800217 	ldw	r2,8(r18)
 c006688:	8447883a 	add	r3,r16,r17
 c00668c:	d8c00215 	stw	r3,8(sp)
 c006690:	91400117 	ldw	r5,4(r18)
 c006694:	10c0010e 	bge	r2,r3,c00669c <__multiply+0x6c>
 c006698:	29400044 	addi	r5,r5,1
 c00669c:	c0061c00 	call	c0061c0 <_Balloc>
 c0066a0:	d8c00217 	ldw	r3,8(sp)
 c0066a4:	d8800615 	stw	r2,24(sp)
 c0066a8:	18eb883a 	add	r21,r3,r3
 c0066ac:	ad6b883a 	add	r21,r21,r21
 c0066b0:	10c00504 	addi	r3,r2,20
 c0066b4:	1d6b883a 	add	r21,r3,r21
 c0066b8:	d8c00115 	stw	r3,4(sp)
 c0066bc:	dd400315 	stw	r21,12(sp)
 c0066c0:	1805883a 	mov	r2,r3
 c0066c4:	1d40042e 	bgeu	r3,r21,c0066d8 <__multiply+0xa8>
 c0066c8:	d8c00317 	ldw	r3,12(sp)
 c0066cc:	10000015 	stw	zero,0(r2)
 c0066d0:	10800104 	addi	r2,r2,4
 c0066d4:	10fffc36 	bltu	r2,r3,c0066c8 <__alt_data_end+0xfc0066c8>
 c0066d8:	8c63883a 	add	r17,r17,r17
 c0066dc:	b5800504 	addi	r22,r22,20
 c0066e0:	8c63883a 	add	r17,r17,r17
 c0066e4:	94800504 	addi	r18,r18,20
 c0066e8:	8421883a 	add	r16,r16,r16
 c0066ec:	b463883a 	add	r17,r22,r17
 c0066f0:	8421883a 	add	r16,r16,r16
 c0066f4:	dd800015 	stw	r22,0(sp)
 c0066f8:	dc800415 	stw	r18,16(sp)
 c0066fc:	dc400515 	stw	r17,20(sp)
 c006700:	9429883a 	add	r20,r18,r16
 c006704:	b4404f2e 	bgeu	r22,r17,c006844 <__multiply+0x214>
 c006708:	d8c00017 	ldw	r3,0(sp)
 c00670c:	1c800017 	ldw	r18,0(r3)
 c006710:	947fffcc 	andi	r17,r18,65535
 c006714:	88001e26 	beq	r17,zero,c006790 <__multiply+0x160>
 c006718:	dd800117 	ldw	r22,4(sp)
 c00671c:	dd400417 	ldw	r21,16(sp)
 c006720:	0027883a 	mov	r19,zero
 c006724:	ac800017 	ldw	r18,0(r21)
 c006728:	b4000017 	ldw	r16,0(r22)
 c00672c:	880b883a 	mov	r5,r17
 c006730:	913fffcc 	andi	r4,r18,65535
 c006734:	c0009680 	call	c000968 <__mulsi3>
 c006738:	9008d43a 	srli	r4,r18,16
 c00673c:	84bfffcc 	andi	r18,r16,65535
 c006740:	1485883a 	add	r2,r2,r18
 c006744:	14e5883a 	add	r18,r2,r19
 c006748:	8020d43a 	srli	r16,r16,16
 c00674c:	9026d43a 	srli	r19,r18,16
 c006750:	880b883a 	mov	r5,r17
 c006754:	c0009680 	call	c000968 <__mulsi3>
 c006758:	1405883a 	add	r2,r2,r16
 c00675c:	14e1883a 	add	r16,r2,r19
 c006760:	90ffffcc 	andi	r3,r18,65535
 c006764:	8024943a 	slli	r18,r16,16
 c006768:	ad400104 	addi	r21,r21,4
 c00676c:	b005883a 	mov	r2,r22
 c006770:	90c6b03a 	or	r3,r18,r3
 c006774:	b0c00015 	stw	r3,0(r22)
 c006778:	8026d43a 	srli	r19,r16,16
 c00677c:	b5800104 	addi	r22,r22,4
 c006780:	ad3fe836 	bltu	r21,r20,c006724 <__alt_data_end+0xfc006724>
 c006784:	d8c00017 	ldw	r3,0(sp)
 c006788:	14c00115 	stw	r19,4(r2)
 c00678c:	1c800017 	ldw	r18,0(r3)
 c006790:	9024d43a 	srli	r18,r18,16
 c006794:	90002226 	beq	r18,zero,c006820 <__multiply+0x1f0>
 c006798:	d8c00117 	ldw	r3,4(sp)
 c00679c:	dd800417 	ldw	r22,16(sp)
 c0067a0:	002f883a 	mov	r23,zero
 c0067a4:	1f000017 	ldw	fp,0(r3)
 c0067a8:	1823883a 	mov	r17,r3
 c0067ac:	182b883a 	mov	r21,r3
 c0067b0:	e021883a 	mov	r16,fp
 c0067b4:	00000106 	br	c0067bc <__multiply+0x18c>
 c0067b8:	982b883a 	mov	r21,r19
 c0067bc:	b100000b 	ldhu	r4,0(r22)
 c0067c0:	8020d43a 	srli	r16,r16,16
 c0067c4:	900b883a 	mov	r5,r18
 c0067c8:	c0009680 	call	c000968 <__mulsi3>
 c0067cc:	1405883a 	add	r2,r2,r16
 c0067d0:	15ef883a 	add	r23,r2,r23
 c0067d4:	b804943a 	slli	r2,r23,16
 c0067d8:	e0ffffcc 	andi	r3,fp,65535
 c0067dc:	8c400104 	addi	r17,r17,4
 c0067e0:	10c6b03a 	or	r3,r2,r3
 c0067e4:	88ffff15 	stw	r3,-4(r17)
 c0067e8:	b5800104 	addi	r22,r22,4
 c0067ec:	b13fff17 	ldw	r4,-4(r22)
 c0067f0:	acc00104 	addi	r19,r21,4
 c0067f4:	900b883a 	mov	r5,r18
 c0067f8:	2008d43a 	srli	r4,r4,16
 c0067fc:	9c000017 	ldw	r16,0(r19)
 c006800:	c0009680 	call	c000968 <__mulsi3>
 c006804:	b806d43a 	srli	r3,r23,16
 c006808:	813fffcc 	andi	r4,r16,65535
 c00680c:	1105883a 	add	r2,r2,r4
 c006810:	10f9883a 	add	fp,r2,r3
 c006814:	e02ed43a 	srli	r23,fp,16
 c006818:	b53fe736 	bltu	r22,r20,c0067b8 <__alt_data_end+0xfc0067b8>
 c00681c:	af000115 	stw	fp,4(r21)
 c006820:	d8c00017 	ldw	r3,0(sp)
 c006824:	d9000517 	ldw	r4,20(sp)
 c006828:	18c00104 	addi	r3,r3,4
 c00682c:	d8c00015 	stw	r3,0(sp)
 c006830:	d8c00117 	ldw	r3,4(sp)
 c006834:	18c00104 	addi	r3,r3,4
 c006838:	d8c00115 	stw	r3,4(sp)
 c00683c:	d8c00017 	ldw	r3,0(sp)
 c006840:	193fb136 	bltu	r3,r4,c006708 <__alt_data_end+0xfc006708>
 c006844:	d8c00217 	ldw	r3,8(sp)
 c006848:	00c00c0e 	bge	zero,r3,c00687c <__multiply+0x24c>
 c00684c:	d8c00317 	ldw	r3,12(sp)
 c006850:	18bfff17 	ldw	r2,-4(r3)
 c006854:	1d7fff04 	addi	r21,r3,-4
 c006858:	10000326 	beq	r2,zero,c006868 <__multiply+0x238>
 c00685c:	00000706 	br	c00687c <__multiply+0x24c>
 c006860:	a8800017 	ldw	r2,0(r21)
 c006864:	1000051e 	bne	r2,zero,c00687c <__multiply+0x24c>
 c006868:	d8c00217 	ldw	r3,8(sp)
 c00686c:	ad7fff04 	addi	r21,r21,-4
 c006870:	18ffffc4 	addi	r3,r3,-1
 c006874:	d8c00215 	stw	r3,8(sp)
 c006878:	183ff91e 	bne	r3,zero,c006860 <__alt_data_end+0xfc006860>
 c00687c:	d8c00617 	ldw	r3,24(sp)
 c006880:	d9000217 	ldw	r4,8(sp)
 c006884:	1805883a 	mov	r2,r3
 c006888:	19000415 	stw	r4,16(r3)
 c00688c:	dfc01017 	ldw	ra,64(sp)
 c006890:	df000f17 	ldw	fp,60(sp)
 c006894:	ddc00e17 	ldw	r23,56(sp)
 c006898:	dd800d17 	ldw	r22,52(sp)
 c00689c:	dd400c17 	ldw	r21,48(sp)
 c0068a0:	dd000b17 	ldw	r20,44(sp)
 c0068a4:	dcc00a17 	ldw	r19,40(sp)
 c0068a8:	dc800917 	ldw	r18,36(sp)
 c0068ac:	dc400817 	ldw	r17,32(sp)
 c0068b0:	dc000717 	ldw	r16,28(sp)
 c0068b4:	dec01104 	addi	sp,sp,68
 c0068b8:	f800283a 	ret

0c0068bc <__pow5mult>:
 c0068bc:	defffa04 	addi	sp,sp,-24
 c0068c0:	dcc00315 	stw	r19,12(sp)
 c0068c4:	dc000015 	stw	r16,0(sp)
 c0068c8:	dfc00515 	stw	ra,20(sp)
 c0068cc:	dd000415 	stw	r20,16(sp)
 c0068d0:	dc800215 	stw	r18,8(sp)
 c0068d4:	dc400115 	stw	r17,4(sp)
 c0068d8:	308000cc 	andi	r2,r6,3
 c0068dc:	3021883a 	mov	r16,r6
 c0068e0:	2027883a 	mov	r19,r4
 c0068e4:	10002f1e 	bne	r2,zero,c0069a4 <__pow5mult+0xe8>
 c0068e8:	2825883a 	mov	r18,r5
 c0068ec:	8021d0ba 	srai	r16,r16,2
 c0068f0:	80001a26 	beq	r16,zero,c00695c <__pow5mult+0xa0>
 c0068f4:	9c401217 	ldw	r17,72(r19)
 c0068f8:	8800061e 	bne	r17,zero,c006914 <__pow5mult+0x58>
 c0068fc:	00003406 	br	c0069d0 <__pow5mult+0x114>
 c006900:	8021d07a 	srai	r16,r16,1
 c006904:	80001526 	beq	r16,zero,c00695c <__pow5mult+0xa0>
 c006908:	88800017 	ldw	r2,0(r17)
 c00690c:	10001c26 	beq	r2,zero,c006980 <__pow5mult+0xc4>
 c006910:	1023883a 	mov	r17,r2
 c006914:	8080004c 	andi	r2,r16,1
 c006918:	103ff926 	beq	r2,zero,c006900 <__alt_data_end+0xfc006900>
 c00691c:	880d883a 	mov	r6,r17
 c006920:	900b883a 	mov	r5,r18
 c006924:	9809883a 	mov	r4,r19
 c006928:	c0066300 	call	c006630 <__multiply>
 c00692c:	90001b26 	beq	r18,zero,c00699c <__pow5mult+0xe0>
 c006930:	91000117 	ldw	r4,4(r18)
 c006934:	98c01317 	ldw	r3,76(r19)
 c006938:	8021d07a 	srai	r16,r16,1
 c00693c:	2109883a 	add	r4,r4,r4
 c006940:	2109883a 	add	r4,r4,r4
 c006944:	1907883a 	add	r3,r3,r4
 c006948:	19000017 	ldw	r4,0(r3)
 c00694c:	91000015 	stw	r4,0(r18)
 c006950:	1c800015 	stw	r18,0(r3)
 c006954:	1025883a 	mov	r18,r2
 c006958:	803feb1e 	bne	r16,zero,c006908 <__alt_data_end+0xfc006908>
 c00695c:	9005883a 	mov	r2,r18
 c006960:	dfc00517 	ldw	ra,20(sp)
 c006964:	dd000417 	ldw	r20,16(sp)
 c006968:	dcc00317 	ldw	r19,12(sp)
 c00696c:	dc800217 	ldw	r18,8(sp)
 c006970:	dc400117 	ldw	r17,4(sp)
 c006974:	dc000017 	ldw	r16,0(sp)
 c006978:	dec00604 	addi	sp,sp,24
 c00697c:	f800283a 	ret
 c006980:	880d883a 	mov	r6,r17
 c006984:	880b883a 	mov	r5,r17
 c006988:	9809883a 	mov	r4,r19
 c00698c:	c0066300 	call	c006630 <__multiply>
 c006990:	88800015 	stw	r2,0(r17)
 c006994:	10000015 	stw	zero,0(r2)
 c006998:	003fdd06 	br	c006910 <__alt_data_end+0xfc006910>
 c00699c:	1025883a 	mov	r18,r2
 c0069a0:	003fd706 	br	c006900 <__alt_data_end+0xfc006900>
 c0069a4:	10bfffc4 	addi	r2,r2,-1
 c0069a8:	1085883a 	add	r2,r2,r2
 c0069ac:	00c30074 	movhi	r3,3073
 c0069b0:	18c0a804 	addi	r3,r3,672
 c0069b4:	1085883a 	add	r2,r2,r2
 c0069b8:	1885883a 	add	r2,r3,r2
 c0069bc:	11800017 	ldw	r6,0(r2)
 c0069c0:	000f883a 	mov	r7,zero
 c0069c4:	c0062900 	call	c006290 <__multadd>
 c0069c8:	1025883a 	mov	r18,r2
 c0069cc:	003fc706 	br	c0068ec <__alt_data_end+0xfc0068ec>
 c0069d0:	05000044 	movi	r20,1
 c0069d4:	a00b883a 	mov	r5,r20
 c0069d8:	9809883a 	mov	r4,r19
 c0069dc:	c0061c00 	call	c0061c0 <_Balloc>
 c0069e0:	1023883a 	mov	r17,r2
 c0069e4:	00809c44 	movi	r2,625
 c0069e8:	88800515 	stw	r2,20(r17)
 c0069ec:	8d000415 	stw	r20,16(r17)
 c0069f0:	9c401215 	stw	r17,72(r19)
 c0069f4:	88000015 	stw	zero,0(r17)
 c0069f8:	003fc606 	br	c006914 <__alt_data_end+0xfc006914>

0c0069fc <__lshift>:
 c0069fc:	defff904 	addi	sp,sp,-28
 c006a00:	dd400515 	stw	r21,20(sp)
 c006a04:	dcc00315 	stw	r19,12(sp)
 c006a08:	302bd17a 	srai	r21,r6,5
 c006a0c:	2cc00417 	ldw	r19,16(r5)
 c006a10:	28800217 	ldw	r2,8(r5)
 c006a14:	dd000415 	stw	r20,16(sp)
 c006a18:	ace7883a 	add	r19,r21,r19
 c006a1c:	dc800215 	stw	r18,8(sp)
 c006a20:	dc400115 	stw	r17,4(sp)
 c006a24:	dc000015 	stw	r16,0(sp)
 c006a28:	dfc00615 	stw	ra,24(sp)
 c006a2c:	9c000044 	addi	r16,r19,1
 c006a30:	2823883a 	mov	r17,r5
 c006a34:	3029883a 	mov	r20,r6
 c006a38:	2025883a 	mov	r18,r4
 c006a3c:	29400117 	ldw	r5,4(r5)
 c006a40:	1400030e 	bge	r2,r16,c006a50 <__lshift+0x54>
 c006a44:	1085883a 	add	r2,r2,r2
 c006a48:	29400044 	addi	r5,r5,1
 c006a4c:	143ffd16 	blt	r2,r16,c006a44 <__alt_data_end+0xfc006a44>
 c006a50:	9009883a 	mov	r4,r18
 c006a54:	c0061c00 	call	c0061c0 <_Balloc>
 c006a58:	10c00504 	addi	r3,r2,20
 c006a5c:	0540070e 	bge	zero,r21,c006a7c <__lshift+0x80>
 c006a60:	ad6b883a 	add	r21,r21,r21
 c006a64:	ad6b883a 	add	r21,r21,r21
 c006a68:	1809883a 	mov	r4,r3
 c006a6c:	1d47883a 	add	r3,r3,r21
 c006a70:	20000015 	stw	zero,0(r4)
 c006a74:	21000104 	addi	r4,r4,4
 c006a78:	193ffd1e 	bne	r3,r4,c006a70 <__alt_data_end+0xfc006a70>
 c006a7c:	8a000417 	ldw	r8,16(r17)
 c006a80:	89000504 	addi	r4,r17,20
 c006a84:	a18007cc 	andi	r6,r20,31
 c006a88:	4211883a 	add	r8,r8,r8
 c006a8c:	4211883a 	add	r8,r8,r8
 c006a90:	2211883a 	add	r8,r4,r8
 c006a94:	30002326 	beq	r6,zero,c006b24 <__lshift+0x128>
 c006a98:	02400804 	movi	r9,32
 c006a9c:	4993c83a 	sub	r9,r9,r6
 c006aa0:	000b883a 	mov	r5,zero
 c006aa4:	21c00017 	ldw	r7,0(r4)
 c006aa8:	1815883a 	mov	r10,r3
 c006aac:	18c00104 	addi	r3,r3,4
 c006ab0:	398e983a 	sll	r7,r7,r6
 c006ab4:	21000104 	addi	r4,r4,4
 c006ab8:	394ab03a 	or	r5,r7,r5
 c006abc:	197fff15 	stw	r5,-4(r3)
 c006ac0:	217fff17 	ldw	r5,-4(r4)
 c006ac4:	2a4ad83a 	srl	r5,r5,r9
 c006ac8:	223ff636 	bltu	r4,r8,c006aa4 <__alt_data_end+0xfc006aa4>
 c006acc:	51400115 	stw	r5,4(r10)
 c006ad0:	28001a1e 	bne	r5,zero,c006b3c <__lshift+0x140>
 c006ad4:	843fffc4 	addi	r16,r16,-1
 c006ad8:	14000415 	stw	r16,16(r2)
 c006adc:	88000826 	beq	r17,zero,c006b00 <__lshift+0x104>
 c006ae0:	89000117 	ldw	r4,4(r17)
 c006ae4:	90c01317 	ldw	r3,76(r18)
 c006ae8:	2109883a 	add	r4,r4,r4
 c006aec:	2109883a 	add	r4,r4,r4
 c006af0:	1907883a 	add	r3,r3,r4
 c006af4:	19000017 	ldw	r4,0(r3)
 c006af8:	89000015 	stw	r4,0(r17)
 c006afc:	1c400015 	stw	r17,0(r3)
 c006b00:	dfc00617 	ldw	ra,24(sp)
 c006b04:	dd400517 	ldw	r21,20(sp)
 c006b08:	dd000417 	ldw	r20,16(sp)
 c006b0c:	dcc00317 	ldw	r19,12(sp)
 c006b10:	dc800217 	ldw	r18,8(sp)
 c006b14:	dc400117 	ldw	r17,4(sp)
 c006b18:	dc000017 	ldw	r16,0(sp)
 c006b1c:	dec00704 	addi	sp,sp,28
 c006b20:	f800283a 	ret
 c006b24:	21400017 	ldw	r5,0(r4)
 c006b28:	18c00104 	addi	r3,r3,4
 c006b2c:	21000104 	addi	r4,r4,4
 c006b30:	197fff15 	stw	r5,-4(r3)
 c006b34:	223ffb36 	bltu	r4,r8,c006b24 <__alt_data_end+0xfc006b24>
 c006b38:	003fe606 	br	c006ad4 <__alt_data_end+0xfc006ad4>
 c006b3c:	9c000084 	addi	r16,r19,2
 c006b40:	003fe406 	br	c006ad4 <__alt_data_end+0xfc006ad4>

0c006b44 <__mcmp>:
 c006b44:	20800417 	ldw	r2,16(r4)
 c006b48:	28c00417 	ldw	r3,16(r5)
 c006b4c:	10c5c83a 	sub	r2,r2,r3
 c006b50:	1000111e 	bne	r2,zero,c006b98 <__mcmp+0x54>
 c006b54:	18c7883a 	add	r3,r3,r3
 c006b58:	18c7883a 	add	r3,r3,r3
 c006b5c:	21000504 	addi	r4,r4,20
 c006b60:	29400504 	addi	r5,r5,20
 c006b64:	20c5883a 	add	r2,r4,r3
 c006b68:	28cb883a 	add	r5,r5,r3
 c006b6c:	00000106 	br	c006b74 <__mcmp+0x30>
 c006b70:	20800a2e 	bgeu	r4,r2,c006b9c <__mcmp+0x58>
 c006b74:	10bfff04 	addi	r2,r2,-4
 c006b78:	297fff04 	addi	r5,r5,-4
 c006b7c:	11800017 	ldw	r6,0(r2)
 c006b80:	28c00017 	ldw	r3,0(r5)
 c006b84:	30fffa26 	beq	r6,r3,c006b70 <__alt_data_end+0xfc006b70>
 c006b88:	30c00236 	bltu	r6,r3,c006b94 <__mcmp+0x50>
 c006b8c:	00800044 	movi	r2,1
 c006b90:	f800283a 	ret
 c006b94:	00bfffc4 	movi	r2,-1
 c006b98:	f800283a 	ret
 c006b9c:	0005883a 	mov	r2,zero
 c006ba0:	f800283a 	ret

0c006ba4 <__mdiff>:
 c006ba4:	28c00417 	ldw	r3,16(r5)
 c006ba8:	30800417 	ldw	r2,16(r6)
 c006bac:	defffa04 	addi	sp,sp,-24
 c006bb0:	dcc00315 	stw	r19,12(sp)
 c006bb4:	dc800215 	stw	r18,8(sp)
 c006bb8:	dfc00515 	stw	ra,20(sp)
 c006bbc:	dd000415 	stw	r20,16(sp)
 c006bc0:	dc400115 	stw	r17,4(sp)
 c006bc4:	dc000015 	stw	r16,0(sp)
 c006bc8:	1887c83a 	sub	r3,r3,r2
 c006bcc:	2825883a 	mov	r18,r5
 c006bd0:	3027883a 	mov	r19,r6
 c006bd4:	1800141e 	bne	r3,zero,c006c28 <__mdiff+0x84>
 c006bd8:	1085883a 	add	r2,r2,r2
 c006bdc:	1085883a 	add	r2,r2,r2
 c006be0:	2a000504 	addi	r8,r5,20
 c006be4:	34000504 	addi	r16,r6,20
 c006be8:	4087883a 	add	r3,r8,r2
 c006bec:	8085883a 	add	r2,r16,r2
 c006bf0:	00000106 	br	c006bf8 <__mdiff+0x54>
 c006bf4:	40c0592e 	bgeu	r8,r3,c006d5c <__mdiff+0x1b8>
 c006bf8:	18ffff04 	addi	r3,r3,-4
 c006bfc:	10bfff04 	addi	r2,r2,-4
 c006c00:	19c00017 	ldw	r7,0(r3)
 c006c04:	11400017 	ldw	r5,0(r2)
 c006c08:	397ffa26 	beq	r7,r5,c006bf4 <__alt_data_end+0xfc006bf4>
 c006c0c:	3940592e 	bgeu	r7,r5,c006d74 <__mdiff+0x1d0>
 c006c10:	9005883a 	mov	r2,r18
 c006c14:	4023883a 	mov	r17,r8
 c006c18:	9825883a 	mov	r18,r19
 c006c1c:	05000044 	movi	r20,1
 c006c20:	1027883a 	mov	r19,r2
 c006c24:	00000406 	br	c006c38 <__mdiff+0x94>
 c006c28:	18005616 	blt	r3,zero,c006d84 <__mdiff+0x1e0>
 c006c2c:	34400504 	addi	r17,r6,20
 c006c30:	2c000504 	addi	r16,r5,20
 c006c34:	0029883a 	mov	r20,zero
 c006c38:	91400117 	ldw	r5,4(r18)
 c006c3c:	c0061c00 	call	c0061c0 <_Balloc>
 c006c40:	92400417 	ldw	r9,16(r18)
 c006c44:	9b000417 	ldw	r12,16(r19)
 c006c48:	12c00504 	addi	r11,r2,20
 c006c4c:	4a51883a 	add	r8,r9,r9
 c006c50:	6319883a 	add	r12,r12,r12
 c006c54:	4211883a 	add	r8,r8,r8
 c006c58:	6319883a 	add	r12,r12,r12
 c006c5c:	15000315 	stw	r20,12(r2)
 c006c60:	8211883a 	add	r8,r16,r8
 c006c64:	8b19883a 	add	r12,r17,r12
 c006c68:	0007883a 	mov	r3,zero
 c006c6c:	81400017 	ldw	r5,0(r16)
 c006c70:	89c00017 	ldw	r7,0(r17)
 c006c74:	59800104 	addi	r6,r11,4
 c006c78:	293fffcc 	andi	r4,r5,65535
 c006c7c:	20c7883a 	add	r3,r4,r3
 c006c80:	393fffcc 	andi	r4,r7,65535
 c006c84:	1909c83a 	sub	r4,r3,r4
 c006c88:	280ad43a 	srli	r5,r5,16
 c006c8c:	380ed43a 	srli	r7,r7,16
 c006c90:	2007d43a 	srai	r3,r4,16
 c006c94:	213fffcc 	andi	r4,r4,65535
 c006c98:	29cbc83a 	sub	r5,r5,r7
 c006c9c:	28c7883a 	add	r3,r5,r3
 c006ca0:	180a943a 	slli	r5,r3,16
 c006ca4:	8c400104 	addi	r17,r17,4
 c006ca8:	84000104 	addi	r16,r16,4
 c006cac:	2908b03a 	or	r4,r5,r4
 c006cb0:	59000015 	stw	r4,0(r11)
 c006cb4:	1807d43a 	srai	r3,r3,16
 c006cb8:	3015883a 	mov	r10,r6
 c006cbc:	3017883a 	mov	r11,r6
 c006cc0:	8b3fea36 	bltu	r17,r12,c006c6c <__alt_data_end+0xfc006c6c>
 c006cc4:	8200162e 	bgeu	r16,r8,c006d20 <__mdiff+0x17c>
 c006cc8:	8017883a 	mov	r11,r16
 c006ccc:	59400017 	ldw	r5,0(r11)
 c006cd0:	31800104 	addi	r6,r6,4
 c006cd4:	5ac00104 	addi	r11,r11,4
 c006cd8:	293fffcc 	andi	r4,r5,65535
 c006cdc:	20c7883a 	add	r3,r4,r3
 c006ce0:	280ed43a 	srli	r7,r5,16
 c006ce4:	180bd43a 	srai	r5,r3,16
 c006ce8:	193fffcc 	andi	r4,r3,65535
 c006cec:	3947883a 	add	r3,r7,r5
 c006cf0:	180a943a 	slli	r5,r3,16
 c006cf4:	1807d43a 	srai	r3,r3,16
 c006cf8:	2908b03a 	or	r4,r5,r4
 c006cfc:	313fff15 	stw	r4,-4(r6)
 c006d00:	5a3ff236 	bltu	r11,r8,c006ccc <__alt_data_end+0xfc006ccc>
 c006d04:	0406303a 	nor	r3,zero,r16
 c006d08:	1a07883a 	add	r3,r3,r8
 c006d0c:	1806d0ba 	srli	r3,r3,2
 c006d10:	18c00044 	addi	r3,r3,1
 c006d14:	18c7883a 	add	r3,r3,r3
 c006d18:	18c7883a 	add	r3,r3,r3
 c006d1c:	50d5883a 	add	r10,r10,r3
 c006d20:	50ffff04 	addi	r3,r10,-4
 c006d24:	2000041e 	bne	r4,zero,c006d38 <__mdiff+0x194>
 c006d28:	18ffff04 	addi	r3,r3,-4
 c006d2c:	19000017 	ldw	r4,0(r3)
 c006d30:	4a7fffc4 	addi	r9,r9,-1
 c006d34:	203ffc26 	beq	r4,zero,c006d28 <__alt_data_end+0xfc006d28>
 c006d38:	12400415 	stw	r9,16(r2)
 c006d3c:	dfc00517 	ldw	ra,20(sp)
 c006d40:	dd000417 	ldw	r20,16(sp)
 c006d44:	dcc00317 	ldw	r19,12(sp)
 c006d48:	dc800217 	ldw	r18,8(sp)
 c006d4c:	dc400117 	ldw	r17,4(sp)
 c006d50:	dc000017 	ldw	r16,0(sp)
 c006d54:	dec00604 	addi	sp,sp,24
 c006d58:	f800283a 	ret
 c006d5c:	000b883a 	mov	r5,zero
 c006d60:	c0061c00 	call	c0061c0 <_Balloc>
 c006d64:	00c00044 	movi	r3,1
 c006d68:	10c00415 	stw	r3,16(r2)
 c006d6c:	10000515 	stw	zero,20(r2)
 c006d70:	003ff206 	br	c006d3c <__alt_data_end+0xfc006d3c>
 c006d74:	8023883a 	mov	r17,r16
 c006d78:	0029883a 	mov	r20,zero
 c006d7c:	4021883a 	mov	r16,r8
 c006d80:	003fad06 	br	c006c38 <__alt_data_end+0xfc006c38>
 c006d84:	9005883a 	mov	r2,r18
 c006d88:	94400504 	addi	r17,r18,20
 c006d8c:	9c000504 	addi	r16,r19,20
 c006d90:	9825883a 	mov	r18,r19
 c006d94:	05000044 	movi	r20,1
 c006d98:	1027883a 	mov	r19,r2
 c006d9c:	003fa606 	br	c006c38 <__alt_data_end+0xfc006c38>

0c006da0 <__ulp>:
 c006da0:	295ffc2c 	andhi	r5,r5,32752
 c006da4:	00bf3034 	movhi	r2,64704
 c006da8:	2887883a 	add	r3,r5,r2
 c006dac:	00c0020e 	bge	zero,r3,c006db8 <__ulp+0x18>
 c006db0:	0005883a 	mov	r2,zero
 c006db4:	f800283a 	ret
 c006db8:	00c7c83a 	sub	r3,zero,r3
 c006dbc:	1807d53a 	srai	r3,r3,20
 c006dc0:	008004c4 	movi	r2,19
 c006dc4:	10c00b0e 	bge	r2,r3,c006df4 <__ulp+0x54>
 c006dc8:	18bffb04 	addi	r2,r3,-20
 c006dcc:	01000784 	movi	r4,30
 c006dd0:	0007883a 	mov	r3,zero
 c006dd4:	20800516 	blt	r4,r2,c006dec <__ulp+0x4c>
 c006dd8:	010007c4 	movi	r4,31
 c006ddc:	2089c83a 	sub	r4,r4,r2
 c006de0:	00800044 	movi	r2,1
 c006de4:	1104983a 	sll	r2,r2,r4
 c006de8:	f800283a 	ret
 c006dec:	00800044 	movi	r2,1
 c006df0:	f800283a 	ret
 c006df4:	01400234 	movhi	r5,8
 c006df8:	28c7d83a 	sra	r3,r5,r3
 c006dfc:	0005883a 	mov	r2,zero
 c006e00:	f800283a 	ret

0c006e04 <__b2d>:
 c006e04:	defffa04 	addi	sp,sp,-24
 c006e08:	dc000015 	stw	r16,0(sp)
 c006e0c:	24000417 	ldw	r16,16(r4)
 c006e10:	dc400115 	stw	r17,4(sp)
 c006e14:	24400504 	addi	r17,r4,20
 c006e18:	8421883a 	add	r16,r16,r16
 c006e1c:	8421883a 	add	r16,r16,r16
 c006e20:	8c21883a 	add	r16,r17,r16
 c006e24:	dc800215 	stw	r18,8(sp)
 c006e28:	84bfff17 	ldw	r18,-4(r16)
 c006e2c:	dd000415 	stw	r20,16(sp)
 c006e30:	dcc00315 	stw	r19,12(sp)
 c006e34:	9009883a 	mov	r4,r18
 c006e38:	2829883a 	mov	r20,r5
 c006e3c:	dfc00515 	stw	ra,20(sp)
 c006e40:	c0064dc0 	call	c0064dc <__hi0bits>
 c006e44:	00c00804 	movi	r3,32
 c006e48:	1889c83a 	sub	r4,r3,r2
 c006e4c:	a1000015 	stw	r4,0(r20)
 c006e50:	01000284 	movi	r4,10
 c006e54:	84ffff04 	addi	r19,r16,-4
 c006e58:	20801216 	blt	r4,r2,c006ea4 <__b2d+0xa0>
 c006e5c:	018002c4 	movi	r6,11
 c006e60:	308dc83a 	sub	r6,r6,r2
 c006e64:	9186d83a 	srl	r3,r18,r6
 c006e68:	18cffc34 	orhi	r3,r3,16368
 c006e6c:	8cc0212e 	bgeu	r17,r19,c006ef4 <__b2d+0xf0>
 c006e70:	813ffe17 	ldw	r4,-8(r16)
 c006e74:	218cd83a 	srl	r6,r4,r6
 c006e78:	10800544 	addi	r2,r2,21
 c006e7c:	9084983a 	sll	r2,r18,r2
 c006e80:	1184b03a 	or	r2,r2,r6
 c006e84:	dfc00517 	ldw	ra,20(sp)
 c006e88:	dd000417 	ldw	r20,16(sp)
 c006e8c:	dcc00317 	ldw	r19,12(sp)
 c006e90:	dc800217 	ldw	r18,8(sp)
 c006e94:	dc400117 	ldw	r17,4(sp)
 c006e98:	dc000017 	ldw	r16,0(sp)
 c006e9c:	dec00604 	addi	sp,sp,24
 c006ea0:	f800283a 	ret
 c006ea4:	8cc00f2e 	bgeu	r17,r19,c006ee4 <__b2d+0xe0>
 c006ea8:	117ffd44 	addi	r5,r2,-11
 c006eac:	80bffe17 	ldw	r2,-8(r16)
 c006eb0:	28000e26 	beq	r5,zero,c006eec <__b2d+0xe8>
 c006eb4:	1949c83a 	sub	r4,r3,r5
 c006eb8:	9164983a 	sll	r18,r18,r5
 c006ebc:	1106d83a 	srl	r3,r2,r4
 c006ec0:	81bffe04 	addi	r6,r16,-8
 c006ec4:	948ffc34 	orhi	r18,r18,16368
 c006ec8:	90c6b03a 	or	r3,r18,r3
 c006ecc:	89800e2e 	bgeu	r17,r6,c006f08 <__b2d+0x104>
 c006ed0:	81bffd17 	ldw	r6,-12(r16)
 c006ed4:	1144983a 	sll	r2,r2,r5
 c006ed8:	310ad83a 	srl	r5,r6,r4
 c006edc:	2884b03a 	or	r2,r5,r2
 c006ee0:	003fe806 	br	c006e84 <__alt_data_end+0xfc006e84>
 c006ee4:	10bffd44 	addi	r2,r2,-11
 c006ee8:	1000041e 	bne	r2,zero,c006efc <__b2d+0xf8>
 c006eec:	90cffc34 	orhi	r3,r18,16368
 c006ef0:	003fe406 	br	c006e84 <__alt_data_end+0xfc006e84>
 c006ef4:	000d883a 	mov	r6,zero
 c006ef8:	003fdf06 	br	c006e78 <__alt_data_end+0xfc006e78>
 c006efc:	90a4983a 	sll	r18,r18,r2
 c006f00:	0005883a 	mov	r2,zero
 c006f04:	003ff906 	br	c006eec <__alt_data_end+0xfc006eec>
 c006f08:	1144983a 	sll	r2,r2,r5
 c006f0c:	003fdd06 	br	c006e84 <__alt_data_end+0xfc006e84>

0c006f10 <__d2b>:
 c006f10:	defff804 	addi	sp,sp,-32
 c006f14:	dc000215 	stw	r16,8(sp)
 c006f18:	3021883a 	mov	r16,r6
 c006f1c:	dc400315 	stw	r17,12(sp)
 c006f20:	8022907a 	slli	r17,r16,1
 c006f24:	dd000615 	stw	r20,24(sp)
 c006f28:	2829883a 	mov	r20,r5
 c006f2c:	01400044 	movi	r5,1
 c006f30:	dcc00515 	stw	r19,20(sp)
 c006f34:	dc800415 	stw	r18,16(sp)
 c006f38:	dfc00715 	stw	ra,28(sp)
 c006f3c:	3825883a 	mov	r18,r7
 c006f40:	8822d57a 	srli	r17,r17,21
 c006f44:	c0061c00 	call	c0061c0 <_Balloc>
 c006f48:	1027883a 	mov	r19,r2
 c006f4c:	00800434 	movhi	r2,16
 c006f50:	10bfffc4 	addi	r2,r2,-1
 c006f54:	808c703a 	and	r6,r16,r2
 c006f58:	88000126 	beq	r17,zero,c006f60 <__d2b+0x50>
 c006f5c:	31800434 	orhi	r6,r6,16
 c006f60:	d9800015 	stw	r6,0(sp)
 c006f64:	a0002426 	beq	r20,zero,c006ff8 <__d2b+0xe8>
 c006f68:	d9000104 	addi	r4,sp,4
 c006f6c:	dd000115 	stw	r20,4(sp)
 c006f70:	c0065440 	call	c006544 <__lo0bits>
 c006f74:	d8c00017 	ldw	r3,0(sp)
 c006f78:	10002f1e 	bne	r2,zero,c007038 <__d2b+0x128>
 c006f7c:	d9000117 	ldw	r4,4(sp)
 c006f80:	99000515 	stw	r4,20(r19)
 c006f84:	1821003a 	cmpeq	r16,r3,zero
 c006f88:	01000084 	movi	r4,2
 c006f8c:	2421c83a 	sub	r16,r4,r16
 c006f90:	98c00615 	stw	r3,24(r19)
 c006f94:	9c000415 	stw	r16,16(r19)
 c006f98:	88001f1e 	bne	r17,zero,c007018 <__d2b+0x108>
 c006f9c:	10bef384 	addi	r2,r2,-1074
 c006fa0:	90800015 	stw	r2,0(r18)
 c006fa4:	00900034 	movhi	r2,16384
 c006fa8:	10bfffc4 	addi	r2,r2,-1
 c006fac:	8085883a 	add	r2,r16,r2
 c006fb0:	1085883a 	add	r2,r2,r2
 c006fb4:	1085883a 	add	r2,r2,r2
 c006fb8:	9885883a 	add	r2,r19,r2
 c006fbc:	11000517 	ldw	r4,20(r2)
 c006fc0:	8020917a 	slli	r16,r16,5
 c006fc4:	c0064dc0 	call	c0064dc <__hi0bits>
 c006fc8:	d8c00817 	ldw	r3,32(sp)
 c006fcc:	8085c83a 	sub	r2,r16,r2
 c006fd0:	18800015 	stw	r2,0(r3)
 c006fd4:	9805883a 	mov	r2,r19
 c006fd8:	dfc00717 	ldw	ra,28(sp)
 c006fdc:	dd000617 	ldw	r20,24(sp)
 c006fe0:	dcc00517 	ldw	r19,20(sp)
 c006fe4:	dc800417 	ldw	r18,16(sp)
 c006fe8:	dc400317 	ldw	r17,12(sp)
 c006fec:	dc000217 	ldw	r16,8(sp)
 c006ff0:	dec00804 	addi	sp,sp,32
 c006ff4:	f800283a 	ret
 c006ff8:	d809883a 	mov	r4,sp
 c006ffc:	c0065440 	call	c006544 <__lo0bits>
 c007000:	d8c00017 	ldw	r3,0(sp)
 c007004:	04000044 	movi	r16,1
 c007008:	9c000415 	stw	r16,16(r19)
 c00700c:	98c00515 	stw	r3,20(r19)
 c007010:	10800804 	addi	r2,r2,32
 c007014:	883fe126 	beq	r17,zero,c006f9c <__alt_data_end+0xfc006f9c>
 c007018:	00c00d44 	movi	r3,53
 c00701c:	8c7ef344 	addi	r17,r17,-1075
 c007020:	88a3883a 	add	r17,r17,r2
 c007024:	1885c83a 	sub	r2,r3,r2
 c007028:	d8c00817 	ldw	r3,32(sp)
 c00702c:	94400015 	stw	r17,0(r18)
 c007030:	18800015 	stw	r2,0(r3)
 c007034:	003fe706 	br	c006fd4 <__alt_data_end+0xfc006fd4>
 c007038:	01000804 	movi	r4,32
 c00703c:	2089c83a 	sub	r4,r4,r2
 c007040:	1908983a 	sll	r4,r3,r4
 c007044:	d9400117 	ldw	r5,4(sp)
 c007048:	1886d83a 	srl	r3,r3,r2
 c00704c:	2148b03a 	or	r4,r4,r5
 c007050:	99000515 	stw	r4,20(r19)
 c007054:	d8c00015 	stw	r3,0(sp)
 c007058:	003fca06 	br	c006f84 <__alt_data_end+0xfc006f84>

0c00705c <__ratio>:
 c00705c:	defff904 	addi	sp,sp,-28
 c007060:	dc400315 	stw	r17,12(sp)
 c007064:	2823883a 	mov	r17,r5
 c007068:	d9400104 	addi	r5,sp,4
 c00706c:	dfc00615 	stw	ra,24(sp)
 c007070:	dcc00515 	stw	r19,20(sp)
 c007074:	dc800415 	stw	r18,16(sp)
 c007078:	2027883a 	mov	r19,r4
 c00707c:	dc000215 	stw	r16,8(sp)
 c007080:	c006e040 	call	c006e04 <__b2d>
 c007084:	d80b883a 	mov	r5,sp
 c007088:	8809883a 	mov	r4,r17
 c00708c:	1025883a 	mov	r18,r2
 c007090:	1821883a 	mov	r16,r3
 c007094:	c006e040 	call	c006e04 <__b2d>
 c007098:	8a000417 	ldw	r8,16(r17)
 c00709c:	99000417 	ldw	r4,16(r19)
 c0070a0:	d9400117 	ldw	r5,4(sp)
 c0070a4:	2209c83a 	sub	r4,r4,r8
 c0070a8:	2010917a 	slli	r8,r4,5
 c0070ac:	d9000017 	ldw	r4,0(sp)
 c0070b0:	2909c83a 	sub	r4,r5,r4
 c0070b4:	4109883a 	add	r4,r8,r4
 c0070b8:	01000e0e 	bge	zero,r4,c0070f4 <__ratio+0x98>
 c0070bc:	2008953a 	slli	r4,r4,20
 c0070c0:	2421883a 	add	r16,r4,r16
 c0070c4:	100d883a 	mov	r6,r2
 c0070c8:	180f883a 	mov	r7,r3
 c0070cc:	9009883a 	mov	r4,r18
 c0070d0:	800b883a 	mov	r5,r16
 c0070d4:	c00b7dc0 	call	c00b7dc <__divdf3>
 c0070d8:	dfc00617 	ldw	ra,24(sp)
 c0070dc:	dcc00517 	ldw	r19,20(sp)
 c0070e0:	dc800417 	ldw	r18,16(sp)
 c0070e4:	dc400317 	ldw	r17,12(sp)
 c0070e8:	dc000217 	ldw	r16,8(sp)
 c0070ec:	dec00704 	addi	sp,sp,28
 c0070f0:	f800283a 	ret
 c0070f4:	2008953a 	slli	r4,r4,20
 c0070f8:	1907c83a 	sub	r3,r3,r4
 c0070fc:	003ff106 	br	c0070c4 <__alt_data_end+0xfc0070c4>

0c007100 <_mprec_log10>:
 c007100:	defffe04 	addi	sp,sp,-8
 c007104:	dc000015 	stw	r16,0(sp)
 c007108:	dfc00115 	stw	ra,4(sp)
 c00710c:	008005c4 	movi	r2,23
 c007110:	2021883a 	mov	r16,r4
 c007114:	11000d0e 	bge	r2,r4,c00714c <_mprec_log10+0x4c>
 c007118:	0005883a 	mov	r2,zero
 c00711c:	00cffc34 	movhi	r3,16368
 c007120:	843fffc4 	addi	r16,r16,-1
 c007124:	000d883a 	mov	r6,zero
 c007128:	01d00934 	movhi	r7,16420
 c00712c:	1009883a 	mov	r4,r2
 c007130:	180b883a 	mov	r5,r3
 c007134:	c00c4040 	call	c00c404 <__muldf3>
 c007138:	803ff91e 	bne	r16,zero,c007120 <__alt_data_end+0xfc007120>
 c00713c:	dfc00117 	ldw	ra,4(sp)
 c007140:	dc000017 	ldw	r16,0(sp)
 c007144:	dec00204 	addi	sp,sp,8
 c007148:	f800283a 	ret
 c00714c:	202090fa 	slli	r16,r4,3
 c007150:	00830074 	movhi	r2,3073
 c007154:	1080bf04 	addi	r2,r2,764
 c007158:	1421883a 	add	r16,r2,r16
 c00715c:	80800017 	ldw	r2,0(r16)
 c007160:	80c00117 	ldw	r3,4(r16)
 c007164:	dfc00117 	ldw	ra,4(sp)
 c007168:	dc000017 	ldw	r16,0(sp)
 c00716c:	dec00204 	addi	sp,sp,8
 c007170:	f800283a 	ret

0c007174 <__copybits>:
 c007174:	297fffc4 	addi	r5,r5,-1
 c007178:	280fd17a 	srai	r7,r5,5
 c00717c:	30c00417 	ldw	r3,16(r6)
 c007180:	30800504 	addi	r2,r6,20
 c007184:	39c00044 	addi	r7,r7,1
 c007188:	18c7883a 	add	r3,r3,r3
 c00718c:	39cf883a 	add	r7,r7,r7
 c007190:	18c7883a 	add	r3,r3,r3
 c007194:	39cf883a 	add	r7,r7,r7
 c007198:	10c7883a 	add	r3,r2,r3
 c00719c:	21cf883a 	add	r7,r4,r7
 c0071a0:	10c00d2e 	bgeu	r2,r3,c0071d8 <__copybits+0x64>
 c0071a4:	200b883a 	mov	r5,r4
 c0071a8:	12000017 	ldw	r8,0(r2)
 c0071ac:	29400104 	addi	r5,r5,4
 c0071b0:	10800104 	addi	r2,r2,4
 c0071b4:	2a3fff15 	stw	r8,-4(r5)
 c0071b8:	10fffb36 	bltu	r2,r3,c0071a8 <__alt_data_end+0xfc0071a8>
 c0071bc:	1985c83a 	sub	r2,r3,r6
 c0071c0:	10bffac4 	addi	r2,r2,-21
 c0071c4:	1004d0ba 	srli	r2,r2,2
 c0071c8:	10800044 	addi	r2,r2,1
 c0071cc:	1085883a 	add	r2,r2,r2
 c0071d0:	1085883a 	add	r2,r2,r2
 c0071d4:	2089883a 	add	r4,r4,r2
 c0071d8:	21c0032e 	bgeu	r4,r7,c0071e8 <__copybits+0x74>
 c0071dc:	20000015 	stw	zero,0(r4)
 c0071e0:	21000104 	addi	r4,r4,4
 c0071e4:	21fffd36 	bltu	r4,r7,c0071dc <__alt_data_end+0xfc0071dc>
 c0071e8:	f800283a 	ret

0c0071ec <__any_on>:
 c0071ec:	20c00417 	ldw	r3,16(r4)
 c0071f0:	2805d17a 	srai	r2,r5,5
 c0071f4:	21000504 	addi	r4,r4,20
 c0071f8:	18800d0e 	bge	r3,r2,c007230 <__any_on+0x44>
 c0071fc:	18c7883a 	add	r3,r3,r3
 c007200:	18c7883a 	add	r3,r3,r3
 c007204:	20c7883a 	add	r3,r4,r3
 c007208:	20c0192e 	bgeu	r4,r3,c007270 <__any_on+0x84>
 c00720c:	18bfff17 	ldw	r2,-4(r3)
 c007210:	18ffff04 	addi	r3,r3,-4
 c007214:	1000041e 	bne	r2,zero,c007228 <__any_on+0x3c>
 c007218:	20c0142e 	bgeu	r4,r3,c00726c <__any_on+0x80>
 c00721c:	18ffff04 	addi	r3,r3,-4
 c007220:	19400017 	ldw	r5,0(r3)
 c007224:	283ffc26 	beq	r5,zero,c007218 <__alt_data_end+0xfc007218>
 c007228:	00800044 	movi	r2,1
 c00722c:	f800283a 	ret
 c007230:	10c00a0e 	bge	r2,r3,c00725c <__any_on+0x70>
 c007234:	1085883a 	add	r2,r2,r2
 c007238:	1085883a 	add	r2,r2,r2
 c00723c:	294007cc 	andi	r5,r5,31
 c007240:	2087883a 	add	r3,r4,r2
 c007244:	283ff026 	beq	r5,zero,c007208 <__alt_data_end+0xfc007208>
 c007248:	19800017 	ldw	r6,0(r3)
 c00724c:	3144d83a 	srl	r2,r6,r5
 c007250:	114a983a 	sll	r5,r2,r5
 c007254:	317ff41e 	bne	r6,r5,c007228 <__alt_data_end+0xfc007228>
 c007258:	003feb06 	br	c007208 <__alt_data_end+0xfc007208>
 c00725c:	1085883a 	add	r2,r2,r2
 c007260:	1085883a 	add	r2,r2,r2
 c007264:	2087883a 	add	r3,r4,r2
 c007268:	003fe706 	br	c007208 <__alt_data_end+0xfc007208>
 c00726c:	f800283a 	ret
 c007270:	0005883a 	mov	r2,zero
 c007274:	f800283a 	ret

0c007278 <__fpclassifyd>:
 c007278:	00a00034 	movhi	r2,32768
 c00727c:	10bfffc4 	addi	r2,r2,-1
 c007280:	2884703a 	and	r2,r5,r2
 c007284:	10000726 	beq	r2,zero,c0072a4 <__fpclassifyd+0x2c>
 c007288:	00fffc34 	movhi	r3,65520
 c00728c:	019ff834 	movhi	r6,32736
 c007290:	28c7883a 	add	r3,r5,r3
 c007294:	31bfffc4 	addi	r6,r6,-1
 c007298:	30c00536 	bltu	r6,r3,c0072b0 <__fpclassifyd+0x38>
 c00729c:	00800104 	movi	r2,4
 c0072a0:	f800283a 	ret
 c0072a4:	2000021e 	bne	r4,zero,c0072b0 <__fpclassifyd+0x38>
 c0072a8:	00800084 	movi	r2,2
 c0072ac:	f800283a 	ret
 c0072b0:	00dffc34 	movhi	r3,32752
 c0072b4:	019ff834 	movhi	r6,32736
 c0072b8:	28cb883a 	add	r5,r5,r3
 c0072bc:	31bfffc4 	addi	r6,r6,-1
 c0072c0:	317ff62e 	bgeu	r6,r5,c00729c <__alt_data_end+0xfc00729c>
 c0072c4:	01400434 	movhi	r5,16
 c0072c8:	297fffc4 	addi	r5,r5,-1
 c0072cc:	28800236 	bltu	r5,r2,c0072d8 <__fpclassifyd+0x60>
 c0072d0:	008000c4 	movi	r2,3
 c0072d4:	f800283a 	ret
 c0072d8:	10c00226 	beq	r2,r3,c0072e4 <__fpclassifyd+0x6c>
 c0072dc:	0005883a 	mov	r2,zero
 c0072e0:	f800283a 	ret
 c0072e4:	2005003a 	cmpeq	r2,r4,zero
 c0072e8:	f800283a 	ret

0c0072ec <_sbrk_r>:
 c0072ec:	defffd04 	addi	sp,sp,-12
 c0072f0:	dc000015 	stw	r16,0(sp)
 c0072f4:	04030074 	movhi	r16,3073
 c0072f8:	dc400115 	stw	r17,4(sp)
 c0072fc:	840ec604 	addi	r16,r16,15128
 c007300:	2023883a 	mov	r17,r4
 c007304:	2809883a 	mov	r4,r5
 c007308:	dfc00215 	stw	ra,8(sp)
 c00730c:	80000015 	stw	zero,0(r16)
 c007310:	c00df7c0 	call	c00df7c <sbrk>
 c007314:	00ffffc4 	movi	r3,-1
 c007318:	10c00526 	beq	r2,r3,c007330 <_sbrk_r+0x44>
 c00731c:	dfc00217 	ldw	ra,8(sp)
 c007320:	dc400117 	ldw	r17,4(sp)
 c007324:	dc000017 	ldw	r16,0(sp)
 c007328:	dec00304 	addi	sp,sp,12
 c00732c:	f800283a 	ret
 c007330:	80c00017 	ldw	r3,0(r16)
 c007334:	183ff926 	beq	r3,zero,c00731c <__alt_data_end+0xfc00731c>
 c007338:	88c00015 	stw	r3,0(r17)
 c00733c:	003ff706 	br	c00731c <__alt_data_end+0xfc00731c>

0c007340 <__sread>:
 c007340:	defffe04 	addi	sp,sp,-8
 c007344:	dc000015 	stw	r16,0(sp)
 c007348:	2821883a 	mov	r16,r5
 c00734c:	2940038f 	ldh	r5,14(r5)
 c007350:	dfc00115 	stw	ra,4(sp)
 c007354:	c0098b80 	call	c0098b8 <_read_r>
 c007358:	10000716 	blt	r2,zero,c007378 <__sread+0x38>
 c00735c:	80c01417 	ldw	r3,80(r16)
 c007360:	1887883a 	add	r3,r3,r2
 c007364:	80c01415 	stw	r3,80(r16)
 c007368:	dfc00117 	ldw	ra,4(sp)
 c00736c:	dc000017 	ldw	r16,0(sp)
 c007370:	dec00204 	addi	sp,sp,8
 c007374:	f800283a 	ret
 c007378:	80c0030b 	ldhu	r3,12(r16)
 c00737c:	18fbffcc 	andi	r3,r3,61439
 c007380:	80c0030d 	sth	r3,12(r16)
 c007384:	dfc00117 	ldw	ra,4(sp)
 c007388:	dc000017 	ldw	r16,0(sp)
 c00738c:	dec00204 	addi	sp,sp,8
 c007390:	f800283a 	ret

0c007394 <__seofread>:
 c007394:	0005883a 	mov	r2,zero
 c007398:	f800283a 	ret

0c00739c <__swrite>:
 c00739c:	2880030b 	ldhu	r2,12(r5)
 c0073a0:	defffb04 	addi	sp,sp,-20
 c0073a4:	dcc00315 	stw	r19,12(sp)
 c0073a8:	dc800215 	stw	r18,8(sp)
 c0073ac:	dc400115 	stw	r17,4(sp)
 c0073b0:	dc000015 	stw	r16,0(sp)
 c0073b4:	dfc00415 	stw	ra,16(sp)
 c0073b8:	10c0400c 	andi	r3,r2,256
 c0073bc:	2821883a 	mov	r16,r5
 c0073c0:	2023883a 	mov	r17,r4
 c0073c4:	3025883a 	mov	r18,r6
 c0073c8:	3827883a 	mov	r19,r7
 c0073cc:	18000526 	beq	r3,zero,c0073e4 <__swrite+0x48>
 c0073d0:	2940038f 	ldh	r5,14(r5)
 c0073d4:	01c00084 	movi	r7,2
 c0073d8:	000d883a 	mov	r6,zero
 c0073dc:	c0096fc0 	call	c0096fc <_lseek_r>
 c0073e0:	8080030b 	ldhu	r2,12(r16)
 c0073e4:	8140038f 	ldh	r5,14(r16)
 c0073e8:	10bbffcc 	andi	r2,r2,61439
 c0073ec:	980f883a 	mov	r7,r19
 c0073f0:	900d883a 	mov	r6,r18
 c0073f4:	8809883a 	mov	r4,r17
 c0073f8:	8080030d 	sth	r2,12(r16)
 c0073fc:	dfc00417 	ldw	ra,16(sp)
 c007400:	dcc00317 	ldw	r19,12(sp)
 c007404:	dc800217 	ldw	r18,8(sp)
 c007408:	dc400117 	ldw	r17,4(sp)
 c00740c:	dc000017 	ldw	r16,0(sp)
 c007410:	dec00504 	addi	sp,sp,20
 c007414:	c008ce81 	jmpi	c008ce8 <_write_r>

0c007418 <__sseek>:
 c007418:	defffe04 	addi	sp,sp,-8
 c00741c:	dc000015 	stw	r16,0(sp)
 c007420:	2821883a 	mov	r16,r5
 c007424:	2940038f 	ldh	r5,14(r5)
 c007428:	dfc00115 	stw	ra,4(sp)
 c00742c:	c0096fc0 	call	c0096fc <_lseek_r>
 c007430:	00ffffc4 	movi	r3,-1
 c007434:	10c00826 	beq	r2,r3,c007458 <__sseek+0x40>
 c007438:	80c0030b 	ldhu	r3,12(r16)
 c00743c:	80801415 	stw	r2,80(r16)
 c007440:	18c40014 	ori	r3,r3,4096
 c007444:	80c0030d 	sth	r3,12(r16)
 c007448:	dfc00117 	ldw	ra,4(sp)
 c00744c:	dc000017 	ldw	r16,0(sp)
 c007450:	dec00204 	addi	sp,sp,8
 c007454:	f800283a 	ret
 c007458:	80c0030b 	ldhu	r3,12(r16)
 c00745c:	18fbffcc 	andi	r3,r3,61439
 c007460:	80c0030d 	sth	r3,12(r16)
 c007464:	dfc00117 	ldw	ra,4(sp)
 c007468:	dc000017 	ldw	r16,0(sp)
 c00746c:	dec00204 	addi	sp,sp,8
 c007470:	f800283a 	ret

0c007474 <__sclose>:
 c007474:	2940038f 	ldh	r5,14(r5)
 c007478:	c008d481 	jmpi	c008d48 <_close_r>

0c00747c <strcmp>:
 c00747c:	2144b03a 	or	r2,r4,r5
 c007480:	108000cc 	andi	r2,r2,3
 c007484:	1000171e 	bne	r2,zero,c0074e4 <strcmp+0x68>
 c007488:	20800017 	ldw	r2,0(r4)
 c00748c:	28c00017 	ldw	r3,0(r5)
 c007490:	10c0141e 	bne	r2,r3,c0074e4 <strcmp+0x68>
 c007494:	027fbff4 	movhi	r9,65279
 c007498:	4a7fbfc4 	addi	r9,r9,-257
 c00749c:	0086303a 	nor	r3,zero,r2
 c0074a0:	02202074 	movhi	r8,32897
 c0074a4:	1245883a 	add	r2,r2,r9
 c0074a8:	42202004 	addi	r8,r8,-32640
 c0074ac:	10c4703a 	and	r2,r2,r3
 c0074b0:	1204703a 	and	r2,r2,r8
 c0074b4:	10000226 	beq	r2,zero,c0074c0 <strcmp+0x44>
 c0074b8:	00002306 	br	c007548 <strcmp+0xcc>
 c0074bc:	1000221e 	bne	r2,zero,c007548 <strcmp+0xcc>
 c0074c0:	21000104 	addi	r4,r4,4
 c0074c4:	20c00017 	ldw	r3,0(r4)
 c0074c8:	29400104 	addi	r5,r5,4
 c0074cc:	29800017 	ldw	r6,0(r5)
 c0074d0:	1a4f883a 	add	r7,r3,r9
 c0074d4:	00c4303a 	nor	r2,zero,r3
 c0074d8:	3884703a 	and	r2,r7,r2
 c0074dc:	1204703a 	and	r2,r2,r8
 c0074e0:	19bff626 	beq	r3,r6,c0074bc <__alt_data_end+0xfc0074bc>
 c0074e4:	20800003 	ldbu	r2,0(r4)
 c0074e8:	10c03fcc 	andi	r3,r2,255
 c0074ec:	18c0201c 	xori	r3,r3,128
 c0074f0:	18ffe004 	addi	r3,r3,-128
 c0074f4:	18000c26 	beq	r3,zero,c007528 <strcmp+0xac>
 c0074f8:	29800007 	ldb	r6,0(r5)
 c0074fc:	19800326 	beq	r3,r6,c00750c <strcmp+0x90>
 c007500:	00001306 	br	c007550 <strcmp+0xd4>
 c007504:	29800007 	ldb	r6,0(r5)
 c007508:	11800b1e 	bne	r2,r6,c007538 <strcmp+0xbc>
 c00750c:	21000044 	addi	r4,r4,1
 c007510:	20c00003 	ldbu	r3,0(r4)
 c007514:	29400044 	addi	r5,r5,1
 c007518:	18803fcc 	andi	r2,r3,255
 c00751c:	1080201c 	xori	r2,r2,128
 c007520:	10bfe004 	addi	r2,r2,-128
 c007524:	103ff71e 	bne	r2,zero,c007504 <__alt_data_end+0xfc007504>
 c007528:	0007883a 	mov	r3,zero
 c00752c:	28800003 	ldbu	r2,0(r5)
 c007530:	1885c83a 	sub	r2,r3,r2
 c007534:	f800283a 	ret
 c007538:	28800003 	ldbu	r2,0(r5)
 c00753c:	18c03fcc 	andi	r3,r3,255
 c007540:	1885c83a 	sub	r2,r3,r2
 c007544:	f800283a 	ret
 c007548:	0005883a 	mov	r2,zero
 c00754c:	f800283a 	ret
 c007550:	10c03fcc 	andi	r3,r2,255
 c007554:	003ff506 	br	c00752c <__alt_data_end+0xfc00752c>

0c007558 <strlen>:
 c007558:	208000cc 	andi	r2,r4,3
 c00755c:	10002026 	beq	r2,zero,c0075e0 <strlen+0x88>
 c007560:	20800007 	ldb	r2,0(r4)
 c007564:	10002026 	beq	r2,zero,c0075e8 <strlen+0x90>
 c007568:	2005883a 	mov	r2,r4
 c00756c:	00000206 	br	c007578 <strlen+0x20>
 c007570:	10c00007 	ldb	r3,0(r2)
 c007574:	18001826 	beq	r3,zero,c0075d8 <strlen+0x80>
 c007578:	10800044 	addi	r2,r2,1
 c00757c:	10c000cc 	andi	r3,r2,3
 c007580:	183ffb1e 	bne	r3,zero,c007570 <__alt_data_end+0xfc007570>
 c007584:	10c00017 	ldw	r3,0(r2)
 c007588:	01ffbff4 	movhi	r7,65279
 c00758c:	39ffbfc4 	addi	r7,r7,-257
 c007590:	00ca303a 	nor	r5,zero,r3
 c007594:	01a02074 	movhi	r6,32897
 c007598:	19c7883a 	add	r3,r3,r7
 c00759c:	31a02004 	addi	r6,r6,-32640
 c0075a0:	1946703a 	and	r3,r3,r5
 c0075a4:	1986703a 	and	r3,r3,r6
 c0075a8:	1800091e 	bne	r3,zero,c0075d0 <strlen+0x78>
 c0075ac:	10800104 	addi	r2,r2,4
 c0075b0:	10c00017 	ldw	r3,0(r2)
 c0075b4:	19cb883a 	add	r5,r3,r7
 c0075b8:	00c6303a 	nor	r3,zero,r3
 c0075bc:	28c6703a 	and	r3,r5,r3
 c0075c0:	1986703a 	and	r3,r3,r6
 c0075c4:	183ff926 	beq	r3,zero,c0075ac <__alt_data_end+0xfc0075ac>
 c0075c8:	00000106 	br	c0075d0 <strlen+0x78>
 c0075cc:	10800044 	addi	r2,r2,1
 c0075d0:	10c00007 	ldb	r3,0(r2)
 c0075d4:	183ffd1e 	bne	r3,zero,c0075cc <__alt_data_end+0xfc0075cc>
 c0075d8:	1105c83a 	sub	r2,r2,r4
 c0075dc:	f800283a 	ret
 c0075e0:	2005883a 	mov	r2,r4
 c0075e4:	003fe706 	br	c007584 <__alt_data_end+0xfc007584>
 c0075e8:	0005883a 	mov	r2,zero
 c0075ec:	f800283a 	ret

0c0075f0 <__sprint_r.part.0>:
 c0075f0:	28801917 	ldw	r2,100(r5)
 c0075f4:	defff604 	addi	sp,sp,-40
 c0075f8:	dd400515 	stw	r21,20(sp)
 c0075fc:	dfc00915 	stw	ra,36(sp)
 c007600:	df000815 	stw	fp,32(sp)
 c007604:	ddc00715 	stw	r23,28(sp)
 c007608:	dd800615 	stw	r22,24(sp)
 c00760c:	dd000415 	stw	r20,16(sp)
 c007610:	dcc00315 	stw	r19,12(sp)
 c007614:	dc800215 	stw	r18,8(sp)
 c007618:	dc400115 	stw	r17,4(sp)
 c00761c:	dc000015 	stw	r16,0(sp)
 c007620:	1088000c 	andi	r2,r2,8192
 c007624:	302b883a 	mov	r21,r6
 c007628:	10002e26 	beq	r2,zero,c0076e4 <__sprint_r.part.0+0xf4>
 c00762c:	30800217 	ldw	r2,8(r6)
 c007630:	35800017 	ldw	r22,0(r6)
 c007634:	10002926 	beq	r2,zero,c0076dc <__sprint_r.part.0+0xec>
 c007638:	2827883a 	mov	r19,r5
 c00763c:	2029883a 	mov	r20,r4
 c007640:	b5c00104 	addi	r23,r22,4
 c007644:	04bfffc4 	movi	r18,-1
 c007648:	bc400017 	ldw	r17,0(r23)
 c00764c:	b4000017 	ldw	r16,0(r22)
 c007650:	0039883a 	mov	fp,zero
 c007654:	8822d0ba 	srli	r17,r17,2
 c007658:	8800031e 	bne	r17,zero,c007668 <__sprint_r.part.0+0x78>
 c00765c:	00001806 	br	c0076c0 <__sprint_r.part.0+0xd0>
 c007660:	84000104 	addi	r16,r16,4
 c007664:	8f001526 	beq	r17,fp,c0076bc <__sprint_r.part.0+0xcc>
 c007668:	81400017 	ldw	r5,0(r16)
 c00766c:	980d883a 	mov	r6,r19
 c007670:	a009883a 	mov	r4,r20
 c007674:	c0090e00 	call	c0090e0 <_fputwc_r>
 c007678:	e7000044 	addi	fp,fp,1
 c00767c:	14bff81e 	bne	r2,r18,c007660 <__alt_data_end+0xfc007660>
 c007680:	9005883a 	mov	r2,r18
 c007684:	a8000215 	stw	zero,8(r21)
 c007688:	a8000115 	stw	zero,4(r21)
 c00768c:	dfc00917 	ldw	ra,36(sp)
 c007690:	df000817 	ldw	fp,32(sp)
 c007694:	ddc00717 	ldw	r23,28(sp)
 c007698:	dd800617 	ldw	r22,24(sp)
 c00769c:	dd400517 	ldw	r21,20(sp)
 c0076a0:	dd000417 	ldw	r20,16(sp)
 c0076a4:	dcc00317 	ldw	r19,12(sp)
 c0076a8:	dc800217 	ldw	r18,8(sp)
 c0076ac:	dc400117 	ldw	r17,4(sp)
 c0076b0:	dc000017 	ldw	r16,0(sp)
 c0076b4:	dec00a04 	addi	sp,sp,40
 c0076b8:	f800283a 	ret
 c0076bc:	a8800217 	ldw	r2,8(r21)
 c0076c0:	8c63883a 	add	r17,r17,r17
 c0076c4:	8c63883a 	add	r17,r17,r17
 c0076c8:	1445c83a 	sub	r2,r2,r17
 c0076cc:	a8800215 	stw	r2,8(r21)
 c0076d0:	b5800204 	addi	r22,r22,8
 c0076d4:	bdc00204 	addi	r23,r23,8
 c0076d8:	103fdb1e 	bne	r2,zero,c007648 <__alt_data_end+0xfc007648>
 c0076dc:	0005883a 	mov	r2,zero
 c0076e0:	003fe806 	br	c007684 <__alt_data_end+0xfc007684>
 c0076e4:	c0091e00 	call	c0091e0 <__sfvwrite_r>
 c0076e8:	003fe606 	br	c007684 <__alt_data_end+0xfc007684>

0c0076ec <__sprint_r>:
 c0076ec:	30c00217 	ldw	r3,8(r6)
 c0076f0:	18000126 	beq	r3,zero,c0076f8 <__sprint_r+0xc>
 c0076f4:	c0075f01 	jmpi	c0075f0 <__sprint_r.part.0>
 c0076f8:	30000115 	stw	zero,4(r6)
 c0076fc:	0005883a 	mov	r2,zero
 c007700:	f800283a 	ret

0c007704 <___vfiprintf_internal_r>:
 c007704:	deffca04 	addi	sp,sp,-216
 c007708:	dd403115 	stw	r21,196(sp)
 c00770c:	dfc03515 	stw	ra,212(sp)
 c007710:	df003415 	stw	fp,208(sp)
 c007714:	ddc03315 	stw	r23,204(sp)
 c007718:	dd803215 	stw	r22,200(sp)
 c00771c:	dd003015 	stw	r20,192(sp)
 c007720:	dcc02f15 	stw	r19,188(sp)
 c007724:	dc802e15 	stw	r18,184(sp)
 c007728:	dc402d15 	stw	r17,180(sp)
 c00772c:	dc002c15 	stw	r16,176(sp)
 c007730:	d9002115 	stw	r4,132(sp)
 c007734:	d9402015 	stw	r5,128(sp)
 c007738:	d9c02215 	stw	r7,136(sp)
 c00773c:	302b883a 	mov	r21,r6
 c007740:	20000226 	beq	r4,zero,c00774c <___vfiprintf_internal_r+0x48>
 c007744:	20800e17 	ldw	r2,56(r4)
 c007748:	1000cf26 	beq	r2,zero,c007a88 <___vfiprintf_internal_r+0x384>
 c00774c:	d8c02017 	ldw	r3,128(sp)
 c007750:	1880030b 	ldhu	r2,12(r3)
 c007754:	10c8000c 	andi	r3,r2,8192
 c007758:	1800071e 	bne	r3,zero,c007778 <___vfiprintf_internal_r+0x74>
 c00775c:	d9402017 	ldw	r5,128(sp)
 c007760:	00f7ffc4 	movi	r3,-8193
 c007764:	10880014 	ori	r2,r2,8192
 c007768:	29001917 	ldw	r4,100(r5)
 c00776c:	2880030d 	sth	r2,12(r5)
 c007770:	20c6703a 	and	r3,r4,r3
 c007774:	28c01915 	stw	r3,100(r5)
 c007778:	10c0020c 	andi	r3,r2,8
 c00777c:	1800a526 	beq	r3,zero,c007a14 <___vfiprintf_internal_r+0x310>
 c007780:	d9002017 	ldw	r4,128(sp)
 c007784:	20c00417 	ldw	r3,16(r4)
 c007788:	1800a226 	beq	r3,zero,c007a14 <___vfiprintf_internal_r+0x310>
 c00778c:	1080068c 	andi	r2,r2,26
 c007790:	00c00284 	movi	r3,10
 c007794:	10c0a826 	beq	r2,r3,c007a38 <___vfiprintf_internal_r+0x334>
 c007798:	d9001a04 	addi	r4,sp,104
 c00779c:	d94019c4 	addi	r5,sp,103
 c0077a0:	04830074 	movhi	r18,3073
 c0077a4:	2145c83a 	sub	r2,r4,r5
 c0077a8:	9480f104 	addi	r18,r18,964
 c0077ac:	d9001e15 	stw	r4,120(sp)
 c0077b0:	d9401f15 	stw	r5,124(sp)
 c0077b4:	dec01a15 	stw	sp,104(sp)
 c0077b8:	d8001c15 	stw	zero,112(sp)
 c0077bc:	d8001b15 	stw	zero,108(sp)
 c0077c0:	d811883a 	mov	r8,sp
 c0077c4:	d8002615 	stw	zero,152(sp)
 c0077c8:	d8002415 	stw	zero,144(sp)
 c0077cc:	d8802815 	stw	r2,160(sp)
 c0077d0:	a82d883a 	mov	r22,r21
 c0077d4:	b0800007 	ldb	r2,0(r22)
 c0077d8:	10040d26 	beq	r2,zero,c008810 <___vfiprintf_internal_r+0x110c>
 c0077dc:	00c00944 	movi	r3,37
 c0077e0:	b029883a 	mov	r20,r22
 c0077e4:	10c0021e 	bne	r2,r3,c0077f0 <___vfiprintf_internal_r+0xec>
 c0077e8:	00001606 	br	c007844 <___vfiprintf_internal_r+0x140>
 c0077ec:	10c00326 	beq	r2,r3,c0077fc <___vfiprintf_internal_r+0xf8>
 c0077f0:	a5000044 	addi	r20,r20,1
 c0077f4:	a0800007 	ldb	r2,0(r20)
 c0077f8:	103ffc1e 	bne	r2,zero,c0077ec <__alt_data_end+0xfc0077ec>
 c0077fc:	a5a1c83a 	sub	r16,r20,r22
 c007800:	80001026 	beq	r16,zero,c007844 <___vfiprintf_internal_r+0x140>
 c007804:	d8c01c17 	ldw	r3,112(sp)
 c007808:	d8801b17 	ldw	r2,108(sp)
 c00780c:	45800015 	stw	r22,0(r8)
 c007810:	80c7883a 	add	r3,r16,r3
 c007814:	10800044 	addi	r2,r2,1
 c007818:	44000115 	stw	r16,4(r8)
 c00781c:	d8c01c15 	stw	r3,112(sp)
 c007820:	d8801b15 	stw	r2,108(sp)
 c007824:	010001c4 	movi	r4,7
 c007828:	2080750e 	bge	r4,r2,c007a00 <___vfiprintf_internal_r+0x2fc>
 c00782c:	1803951e 	bne	r3,zero,c008684 <___vfiprintf_internal_r+0xf80>
 c007830:	d8c02417 	ldw	r3,144(sp)
 c007834:	d8001b15 	stw	zero,108(sp)
 c007838:	d811883a 	mov	r8,sp
 c00783c:	1c07883a 	add	r3,r3,r16
 c007840:	d8c02415 	stw	r3,144(sp)
 c007844:	a0800007 	ldb	r2,0(r20)
 c007848:	1002e026 	beq	r2,zero,c0083cc <___vfiprintf_internal_r+0xcc8>
 c00784c:	a5800044 	addi	r22,r20,1
 c007850:	a0c00047 	ldb	r3,1(r20)
 c007854:	d8001d85 	stb	zero,118(sp)
 c007858:	0027883a 	mov	r19,zero
 c00785c:	d8002305 	stb	zero,140(sp)
 c007860:	043fffc4 	movi	r16,-1
 c007864:	d8002515 	stw	zero,148(sp)
 c007868:	0023883a 	mov	r17,zero
 c00786c:	05001604 	movi	r20,88
 c007870:	05400244 	movi	r21,9
 c007874:	402f883a 	mov	r23,r8
 c007878:	b5800044 	addi	r22,r22,1
 c00787c:	18bff804 	addi	r2,r3,-32
 c007880:	a0827736 	bltu	r20,r2,c008260 <___vfiprintf_internal_r+0xb5c>
 c007884:	100490ba 	slli	r2,r2,2
 c007888:	01030034 	movhi	r4,3072
 c00788c:	211e2704 	addi	r4,r4,30876
 c007890:	1105883a 	add	r2,r2,r4
 c007894:	10800017 	ldw	r2,0(r2)
 c007898:	1000683a 	jmp	r2
 c00789c:	0c007f60 	cmpeqi	r16,at,509
 c0078a0:	0c008260 	cmpeqi	r16,at,521
 c0078a4:	0c008260 	cmpeqi	r16,at,521
 c0078a8:	0c007f7c 	xorhi	r16,at,509
 c0078ac:	0c008260 	cmpeqi	r16,at,521
 c0078b0:	0c008260 	cmpeqi	r16,at,521
 c0078b4:	0c008260 	cmpeqi	r16,at,521
 c0078b8:	0c008260 	cmpeqi	r16,at,521
 c0078bc:	0c008260 	cmpeqi	r16,at,521
 c0078c0:	0c008260 	cmpeqi	r16,at,521
 c0078c4:	0c008184 	addi	r16,at,518
 c0078c8:	0c0081a8 	cmpgeui	r16,at,518
 c0078cc:	0c008260 	cmpeqi	r16,at,521
 c0078d0:	0c007aa0 	cmpeqi	r16,at,490
 c0078d4:	0c0081bc 	xorhi	r16,at,518
 c0078d8:	0c008260 	cmpeqi	r16,at,521
 c0078dc:	0c007f88 	cmpgei	r16,at,510
 c0078e0:	0c007f94 	ori	r16,at,510
 c0078e4:	0c007f94 	ori	r16,at,510
 c0078e8:	0c007f94 	ori	r16,at,510
 c0078ec:	0c007f94 	ori	r16,at,510
 c0078f0:	0c007f94 	ori	r16,at,510
 c0078f4:	0c007f94 	ori	r16,at,510
 c0078f8:	0c007f94 	ori	r16,at,510
 c0078fc:	0c007f94 	ori	r16,at,510
 c007900:	0c007f94 	ori	r16,at,510
 c007904:	0c008260 	cmpeqi	r16,at,521
 c007908:	0c008260 	cmpeqi	r16,at,521
 c00790c:	0c008260 	cmpeqi	r16,at,521
 c007910:	0c008260 	cmpeqi	r16,at,521
 c007914:	0c008260 	cmpeqi	r16,at,521
 c007918:	0c008260 	cmpeqi	r16,at,521
 c00791c:	0c008260 	cmpeqi	r16,at,521
 c007920:	0c008260 	cmpeqi	r16,at,521
 c007924:	0c008260 	cmpeqi	r16,at,521
 c007928:	0c008260 	cmpeqi	r16,at,521
 c00792c:	0c007fd4 	ori	r16,at,511
 c007930:	0c008260 	cmpeqi	r16,at,521
 c007934:	0c008260 	cmpeqi	r16,at,521
 c007938:	0c008260 	cmpeqi	r16,at,521
 c00793c:	0c008260 	cmpeqi	r16,at,521
 c007940:	0c008260 	cmpeqi	r16,at,521
 c007944:	0c008260 	cmpeqi	r16,at,521
 c007948:	0c008260 	cmpeqi	r16,at,521
 c00794c:	0c008260 	cmpeqi	r16,at,521
 c007950:	0c008260 	cmpeqi	r16,at,521
 c007954:	0c008260 	cmpeqi	r16,at,521
 c007958:	0c008010 	cmplti	r16,at,512
 c00795c:	0c008260 	cmpeqi	r16,at,521
 c007960:	0c008260 	cmpeqi	r16,at,521
 c007964:	0c008260 	cmpeqi	r16,at,521
 c007968:	0c008260 	cmpeqi	r16,at,521
 c00796c:	0c008260 	cmpeqi	r16,at,521
 c007970:	0c00806c 	andhi	r16,at,513
 c007974:	0c008260 	cmpeqi	r16,at,521
 c007978:	0c008260 	cmpeqi	r16,at,521
 c00797c:	0c0080e0 	cmpeqi	r16,at,515
 c007980:	0c008260 	cmpeqi	r16,at,521
 c007984:	0c008260 	cmpeqi	r16,at,521
 c007988:	0c008260 	cmpeqi	r16,at,521
 c00798c:	0c008260 	cmpeqi	r16,at,521
 c007990:	0c008260 	cmpeqi	r16,at,521
 c007994:	0c008260 	cmpeqi	r16,at,521
 c007998:	0c008260 	cmpeqi	r16,at,521
 c00799c:	0c008260 	cmpeqi	r16,at,521
 c0079a0:	0c008260 	cmpeqi	r16,at,521
 c0079a4:	0c008260 	cmpeqi	r16,at,521
 c0079a8:	0c007e88 	cmpgei	r16,at,506
 c0079ac:	0c007eb8 	rdprs	r16,at,506
 c0079b0:	0c008260 	cmpeqi	r16,at,521
 c0079b4:	0c008260 	cmpeqi	r16,at,521
 c0079b8:	0c008260 	cmpeqi	r16,at,521
 c0079bc:	0c008208 	cmpgei	r16,at,520
 c0079c0:	0c007eb8 	rdprs	r16,at,506
 c0079c4:	0c008260 	cmpeqi	r16,at,521
 c0079c8:	0c008260 	cmpeqi	r16,at,521
 c0079cc:	0c007d60 	cmpeqi	r16,at,501
 c0079d0:	0c008260 	cmpeqi	r16,at,521
 c0079d4:	0c007d74 	orhi	r16,at,501
 c0079d8:	0c007dac 	andhi	r16,at,502
 c0079dc:	0c007aac 	andhi	r16,at,490
 c0079e0:	0c007d54 	ori	r16,at,501
 c0079e4:	0c008260 	cmpeqi	r16,at,521
 c0079e8:	0c008120 	cmpeqi	r16,at,516
 c0079ec:	0c008260 	cmpeqi	r16,at,521
 c0079f0:	0c00816c 	andhi	r16,at,517
 c0079f4:	0c008260 	cmpeqi	r16,at,521
 c0079f8:	0c008260 	cmpeqi	r16,at,521
 c0079fc:	0c007e30 	cmpltui	r16,at,504
 c007a00:	42000204 	addi	r8,r8,8
 c007a04:	d8c02417 	ldw	r3,144(sp)
 c007a08:	1c07883a 	add	r3,r3,r16
 c007a0c:	d8c02415 	stw	r3,144(sp)
 c007a10:	003f8c06 	br	c007844 <__alt_data_end+0xfc007844>
 c007a14:	d9402017 	ldw	r5,128(sp)
 c007a18:	d9002117 	ldw	r4,132(sp)
 c007a1c:	c002ef80 	call	c002ef8 <__swsetup_r>
 c007a20:	1003c11e 	bne	r2,zero,c008928 <___vfiprintf_internal_r+0x1224>
 c007a24:	d9402017 	ldw	r5,128(sp)
 c007a28:	00c00284 	movi	r3,10
 c007a2c:	2880030b 	ldhu	r2,12(r5)
 c007a30:	1080068c 	andi	r2,r2,26
 c007a34:	10ff581e 	bne	r2,r3,c007798 <__alt_data_end+0xfc007798>
 c007a38:	d8c02017 	ldw	r3,128(sp)
 c007a3c:	1880038f 	ldh	r2,14(r3)
 c007a40:	103f5516 	blt	r2,zero,c007798 <__alt_data_end+0xfc007798>
 c007a44:	d9c02217 	ldw	r7,136(sp)
 c007a48:	d9002117 	ldw	r4,132(sp)
 c007a4c:	a80d883a 	mov	r6,r21
 c007a50:	180b883a 	mov	r5,r3
 c007a54:	c008c2c0 	call	c008c2c <__sbprintf>
 c007a58:	dfc03517 	ldw	ra,212(sp)
 c007a5c:	df003417 	ldw	fp,208(sp)
 c007a60:	ddc03317 	ldw	r23,204(sp)
 c007a64:	dd803217 	ldw	r22,200(sp)
 c007a68:	dd403117 	ldw	r21,196(sp)
 c007a6c:	dd003017 	ldw	r20,192(sp)
 c007a70:	dcc02f17 	ldw	r19,188(sp)
 c007a74:	dc802e17 	ldw	r18,184(sp)
 c007a78:	dc402d17 	ldw	r17,180(sp)
 c007a7c:	dc002c17 	ldw	r16,176(sp)
 c007a80:	dec03604 	addi	sp,sp,216
 c007a84:	f800283a 	ret
 c007a88:	c004f040 	call	c004f04 <__sinit>
 c007a8c:	003f2f06 	br	c00774c <__alt_data_end+0xfc00774c>
 c007a90:	d8c02517 	ldw	r3,148(sp)
 c007a94:	d8802215 	stw	r2,136(sp)
 c007a98:	00c7c83a 	sub	r3,zero,r3
 c007a9c:	d8c02515 	stw	r3,148(sp)
 c007aa0:	8c400114 	ori	r17,r17,4
 c007aa4:	b0c00007 	ldb	r3,0(r22)
 c007aa8:	003f7306 	br	c007878 <__alt_data_end+0xfc007878>
 c007aac:	00800c04 	movi	r2,48
 c007ab0:	d9402217 	ldw	r5,136(sp)
 c007ab4:	d8801d05 	stb	r2,116(sp)
 c007ab8:	00801e04 	movi	r2,120
 c007abc:	d8801d45 	stb	r2,117(sp)
 c007ac0:	d8001d85 	stb	zero,118(sp)
 c007ac4:	b811883a 	mov	r8,r23
 c007ac8:	28c00104 	addi	r3,r5,4
 c007acc:	2cc00017 	ldw	r19,0(r5)
 c007ad0:	0029883a 	mov	r20,zero
 c007ad4:	88800094 	ori	r2,r17,2
 c007ad8:	80032516 	blt	r16,zero,c008770 <___vfiprintf_internal_r+0x106c>
 c007adc:	00bfdfc4 	movi	r2,-129
 c007ae0:	88a2703a 	and	r17,r17,r2
 c007ae4:	d8c02215 	stw	r3,136(sp)
 c007ae8:	8c400094 	ori	r17,r17,2
 c007aec:	98032a1e 	bne	r19,zero,c008798 <___vfiprintf_internal_r+0x1094>
 c007af0:	00830074 	movhi	r2,3073
 c007af4:	10809004 	addi	r2,r2,576
 c007af8:	d8802615 	stw	r2,152(sp)
 c007afc:	002b883a 	mov	r21,zero
 c007b00:	8001741e 	bne	r16,zero,c0080d4 <___vfiprintf_internal_r+0x9d0>
 c007b04:	0021883a 	mov	r16,zero
 c007b08:	0029883a 	mov	r20,zero
 c007b0c:	ddc01a04 	addi	r23,sp,104
 c007b10:	8027883a 	mov	r19,r16
 c007b14:	8500010e 	bge	r16,r20,c007b1c <___vfiprintf_internal_r+0x418>
 c007b18:	a027883a 	mov	r19,r20
 c007b1c:	ad403fcc 	andi	r21,r21,255
 c007b20:	ad40201c 	xori	r21,r21,128
 c007b24:	ad7fe004 	addi	r21,r21,-128
 c007b28:	a8000126 	beq	r21,zero,c007b30 <___vfiprintf_internal_r+0x42c>
 c007b2c:	9cc00044 	addi	r19,r19,1
 c007b30:	89c0008c 	andi	r7,r17,2
 c007b34:	38000126 	beq	r7,zero,c007b3c <___vfiprintf_internal_r+0x438>
 c007b38:	9cc00084 	addi	r19,r19,2
 c007b3c:	88c0210c 	andi	r3,r17,132
 c007b40:	1801dd1e 	bne	r3,zero,c0082b8 <___vfiprintf_internal_r+0xbb4>
 c007b44:	d9402517 	ldw	r5,148(sp)
 c007b48:	2cebc83a 	sub	r21,r5,r19
 c007b4c:	0541da0e 	bge	zero,r21,c0082b8 <___vfiprintf_internal_r+0xbb4>
 c007b50:	07000404 	movi	fp,16
 c007b54:	d8801c17 	ldw	r2,112(sp)
 c007b58:	e543be0e 	bge	fp,r21,c008a54 <___vfiprintf_internal_r+0x1350>
 c007b5c:	01430074 	movhi	r5,3073
 c007b60:	2940f504 	addi	r5,r5,980
 c007b64:	dc002715 	stw	r16,156(sp)
 c007b68:	d9801b17 	ldw	r6,108(sp)
 c007b6c:	a821883a 	mov	r16,r21
 c007b70:	d9402315 	stw	r5,140(sp)
 c007b74:	028001c4 	movi	r10,7
 c007b78:	d9c02915 	stw	r7,164(sp)
 c007b7c:	182b883a 	mov	r21,r3
 c007b80:	00000506 	br	c007b98 <___vfiprintf_internal_r+0x494>
 c007b84:	31000084 	addi	r4,r6,2
 c007b88:	42000204 	addi	r8,r8,8
 c007b8c:	180d883a 	mov	r6,r3
 c007b90:	843ffc04 	addi	r16,r16,-16
 c007b94:	e4000f0e 	bge	fp,r16,c007bd4 <___vfiprintf_internal_r+0x4d0>
 c007b98:	01030074 	movhi	r4,3073
 c007b9c:	10800404 	addi	r2,r2,16
 c007ba0:	30c00044 	addi	r3,r6,1
 c007ba4:	2100f504 	addi	r4,r4,980
 c007ba8:	41000015 	stw	r4,0(r8)
 c007bac:	47000115 	stw	fp,4(r8)
 c007bb0:	d8801c15 	stw	r2,112(sp)
 c007bb4:	d8c01b15 	stw	r3,108(sp)
 c007bb8:	50fff20e 	bge	r10,r3,c007b84 <__alt_data_end+0xfc007b84>
 c007bbc:	1001b21e 	bne	r2,zero,c008288 <___vfiprintf_internal_r+0xb84>
 c007bc0:	843ffc04 	addi	r16,r16,-16
 c007bc4:	000d883a 	mov	r6,zero
 c007bc8:	01000044 	movi	r4,1
 c007bcc:	d811883a 	mov	r8,sp
 c007bd0:	e43ff116 	blt	fp,r16,c007b98 <__alt_data_end+0xfc007b98>
 c007bd4:	a807883a 	mov	r3,r21
 c007bd8:	d9c02917 	ldw	r7,164(sp)
 c007bdc:	802b883a 	mov	r21,r16
 c007be0:	dc002717 	ldw	r16,156(sp)
 c007be4:	d9402317 	ldw	r5,140(sp)
 c007be8:	a885883a 	add	r2,r21,r2
 c007bec:	45400115 	stw	r21,4(r8)
 c007bf0:	41400015 	stw	r5,0(r8)
 c007bf4:	d8801c15 	stw	r2,112(sp)
 c007bf8:	d9001b15 	stw	r4,108(sp)
 c007bfc:	014001c4 	movi	r5,7
 c007c00:	29026216 	blt	r5,r4,c00858c <___vfiprintf_internal_r+0xe88>
 c007c04:	d9801d87 	ldb	r6,118(sp)
 c007c08:	42000204 	addi	r8,r8,8
 c007c0c:	21400044 	addi	r5,r4,1
 c007c10:	3001ae1e 	bne	r6,zero,c0082cc <___vfiprintf_internal_r+0xbc8>
 c007c14:	3801bb26 	beq	r7,zero,c008304 <___vfiprintf_internal_r+0xc00>
 c007c18:	d9001d04 	addi	r4,sp,116
 c007c1c:	10800084 	addi	r2,r2,2
 c007c20:	41000015 	stw	r4,0(r8)
 c007c24:	01000084 	movi	r4,2
 c007c28:	41000115 	stw	r4,4(r8)
 c007c2c:	d8801c15 	stw	r2,112(sp)
 c007c30:	d9401b15 	stw	r5,108(sp)
 c007c34:	010001c4 	movi	r4,7
 c007c38:	2142680e 	bge	r4,r5,c0085dc <___vfiprintf_internal_r+0xed8>
 c007c3c:	1002b11e 	bne	r2,zero,c008704 <___vfiprintf_internal_r+0x1000>
 c007c40:	01802004 	movi	r6,128
 c007c44:	01400044 	movi	r5,1
 c007c48:	0009883a 	mov	r4,zero
 c007c4c:	d811883a 	mov	r8,sp
 c007c50:	1981ae1e 	bne	r3,r6,c00830c <___vfiprintf_internal_r+0xc08>
 c007c54:	d8c02517 	ldw	r3,148(sp)
 c007c58:	1cf9c83a 	sub	fp,r3,r19
 c007c5c:	0701ab0e 	bge	zero,fp,c00830c <___vfiprintf_internal_r+0xc08>
 c007c60:	05400404 	movi	r21,16
 c007c64:	af03a90e 	bge	r21,fp,c008b0c <___vfiprintf_internal_r+0x1408>
 c007c68:	01430074 	movhi	r5,3073
 c007c6c:	2940f104 	addi	r5,r5,964
 c007c70:	d9402315 	stw	r5,140(sp)
 c007c74:	01c001c4 	movi	r7,7
 c007c78:	00000506 	br	c007c90 <___vfiprintf_internal_r+0x58c>
 c007c7c:	21800084 	addi	r6,r4,2
 c007c80:	42000204 	addi	r8,r8,8
 c007c84:	1809883a 	mov	r4,r3
 c007c88:	e73ffc04 	addi	fp,fp,-16
 c007c8c:	af000d0e 	bge	r21,fp,c007cc4 <___vfiprintf_internal_r+0x5c0>
 c007c90:	10800404 	addi	r2,r2,16
 c007c94:	20c00044 	addi	r3,r4,1
 c007c98:	44800015 	stw	r18,0(r8)
 c007c9c:	45400115 	stw	r21,4(r8)
 c007ca0:	d8801c15 	stw	r2,112(sp)
 c007ca4:	d8c01b15 	stw	r3,108(sp)
 c007ca8:	38fff40e 	bge	r7,r3,c007c7c <__alt_data_end+0xfc007c7c>
 c007cac:	10022b1e 	bne	r2,zero,c00855c <___vfiprintf_internal_r+0xe58>
 c007cb0:	e73ffc04 	addi	fp,fp,-16
 c007cb4:	01800044 	movi	r6,1
 c007cb8:	0009883a 	mov	r4,zero
 c007cbc:	d811883a 	mov	r8,sp
 c007cc0:	af3ff316 	blt	r21,fp,c007c90 <__alt_data_end+0xfc007c90>
 c007cc4:	d8c02317 	ldw	r3,140(sp)
 c007cc8:	1705883a 	add	r2,r2,fp
 c007ccc:	47000115 	stw	fp,4(r8)
 c007cd0:	40c00015 	stw	r3,0(r8)
 c007cd4:	d8801c15 	stw	r2,112(sp)
 c007cd8:	d9801b15 	stw	r6,108(sp)
 c007cdc:	00c001c4 	movi	r3,7
 c007ce0:	19829416 	blt	r3,r6,c008734 <___vfiprintf_internal_r+0x1030>
 c007ce4:	8521c83a 	sub	r16,r16,r20
 c007ce8:	42000204 	addi	r8,r8,8
 c007cec:	31400044 	addi	r5,r6,1
 c007cf0:	3009883a 	mov	r4,r6
 c007cf4:	04018716 	blt	zero,r16,c008314 <___vfiprintf_internal_r+0xc10>
 c007cf8:	a085883a 	add	r2,r20,r2
 c007cfc:	45c00015 	stw	r23,0(r8)
 c007d00:	45000115 	stw	r20,4(r8)
 c007d04:	d8801c15 	stw	r2,112(sp)
 c007d08:	d9401b15 	stw	r5,108(sp)
 c007d0c:	00c001c4 	movi	r3,7
 c007d10:	1941c20e 	bge	r3,r5,c00841c <___vfiprintf_internal_r+0xd18>
 c007d14:	1002531e 	bne	r2,zero,c008664 <___vfiprintf_internal_r+0xf60>
 c007d18:	d8001b15 	stw	zero,108(sp)
 c007d1c:	8c40010c 	andi	r17,r17,4
 c007d20:	88023226 	beq	r17,zero,c0085ec <___vfiprintf_internal_r+0xee8>
 c007d24:	d9002517 	ldw	r4,148(sp)
 c007d28:	24e3c83a 	sub	r17,r4,r19
 c007d2c:	04432916 	blt	zero,r17,c0089d4 <___vfiprintf_internal_r+0x12d0>
 c007d30:	d8802517 	ldw	r2,148(sp)
 c007d34:	14c0010e 	bge	r2,r19,c007d3c <___vfiprintf_internal_r+0x638>
 c007d38:	9805883a 	mov	r2,r19
 c007d3c:	d8c02417 	ldw	r3,144(sp)
 c007d40:	1887883a 	add	r3,r3,r2
 c007d44:	d8c02415 	stw	r3,144(sp)
 c007d48:	d8001b15 	stw	zero,108(sp)
 c007d4c:	d811883a 	mov	r8,sp
 c007d50:	003ea006 	br	c0077d4 <__alt_data_end+0xfc0077d4>
 c007d54:	8c400814 	ori	r17,r17,32
 c007d58:	b0c00007 	ldb	r3,0(r22)
 c007d5c:	003ec606 	br	c007878 <__alt_data_end+0xfc007878>
 c007d60:	b0c00007 	ldb	r3,0(r22)
 c007d64:	00801b04 	movi	r2,108
 c007d68:	18832026 	beq	r3,r2,c0089ec <___vfiprintf_internal_r+0x12e8>
 c007d6c:	8c400414 	ori	r17,r17,16
 c007d70:	003ec106 	br	c007878 <__alt_data_end+0xfc007878>
 c007d74:	9cc03fcc 	andi	r19,r19,255
 c007d78:	b811883a 	mov	r8,r23
 c007d7c:	9803981e 	bne	r19,zero,c008be0 <___vfiprintf_internal_r+0x14dc>
 c007d80:	8880080c 	andi	r2,r17,32
 c007d84:	1002be26 	beq	r2,zero,c008880 <___vfiprintf_internal_r+0x117c>
 c007d88:	d9002217 	ldw	r4,136(sp)
 c007d8c:	d9402417 	ldw	r5,144(sp)
 c007d90:	20800017 	ldw	r2,0(r4)
 c007d94:	2807d7fa 	srai	r3,r5,31
 c007d98:	21000104 	addi	r4,r4,4
 c007d9c:	d9002215 	stw	r4,136(sp)
 c007da0:	11400015 	stw	r5,0(r2)
 c007da4:	10c00115 	stw	r3,4(r2)
 c007da8:	003e8a06 	br	c0077d4 <__alt_data_end+0xfc0077d4>
 c007dac:	9cc03fcc 	andi	r19,r19,255
 c007db0:	b811883a 	mov	r8,r23
 c007db4:	9803871e 	bne	r19,zero,c008bd4 <___vfiprintf_internal_r+0x14d0>
 c007db8:	8880080c 	andi	r2,r17,32
 c007dbc:	10009a26 	beq	r2,zero,c008028 <___vfiprintf_internal_r+0x924>
 c007dc0:	d9002217 	ldw	r4,136(sp)
 c007dc4:	d8001d85 	stb	zero,118(sp)
 c007dc8:	20800204 	addi	r2,r4,8
 c007dcc:	24c00017 	ldw	r19,0(r4)
 c007dd0:	25000117 	ldw	r20,4(r4)
 c007dd4:	8002a416 	blt	r16,zero,c008868 <___vfiprintf_internal_r+0x1164>
 c007dd8:	013fdfc4 	movi	r4,-129
 c007ddc:	9d06b03a 	or	r3,r19,r20
 c007de0:	d8802215 	stw	r2,136(sp)
 c007de4:	8922703a 	and	r17,r17,r4
 c007de8:	18009b26 	beq	r3,zero,c008058 <___vfiprintf_internal_r+0x954>
 c007dec:	002b883a 	mov	r21,zero
 c007df0:	ddc01a04 	addi	r23,sp,104
 c007df4:	9806d0fa 	srli	r3,r19,3
 c007df8:	a008977a 	slli	r4,r20,29
 c007dfc:	a028d0fa 	srli	r20,r20,3
 c007e00:	9cc001cc 	andi	r19,r19,7
 c007e04:	98800c04 	addi	r2,r19,48
 c007e08:	bdffffc4 	addi	r23,r23,-1
 c007e0c:	20e6b03a 	or	r19,r4,r3
 c007e10:	b8800005 	stb	r2,0(r23)
 c007e14:	9d06b03a 	or	r3,r19,r20
 c007e18:	183ff61e 	bne	r3,zero,c007df4 <__alt_data_end+0xfc007df4>
 c007e1c:	88c0004c 	andi	r3,r17,1
 c007e20:	18021f1e 	bne	r3,zero,c0086a0 <___vfiprintf_internal_r+0xf9c>
 c007e24:	d9401e17 	ldw	r5,120(sp)
 c007e28:	2de9c83a 	sub	r20,r5,r23
 c007e2c:	003f3806 	br	c007b10 <__alt_data_end+0xfc007b10>
 c007e30:	9cc03fcc 	andi	r19,r19,255
 c007e34:	b811883a 	mov	r8,r23
 c007e38:	98034f1e 	bne	r19,zero,c008b78 <___vfiprintf_internal_r+0x1474>
 c007e3c:	00830074 	movhi	r2,3073
 c007e40:	10809004 	addi	r2,r2,576
 c007e44:	d8802615 	stw	r2,152(sp)
 c007e48:	8880080c 	andi	r2,r17,32
 c007e4c:	1000ac26 	beq	r2,zero,c008100 <___vfiprintf_internal_r+0x9fc>
 c007e50:	d9002217 	ldw	r4,136(sp)
 c007e54:	24c00017 	ldw	r19,0(r4)
 c007e58:	25000117 	ldw	r20,4(r4)
 c007e5c:	21000204 	addi	r4,r4,8
 c007e60:	d9002215 	stw	r4,136(sp)
 c007e64:	8880004c 	andi	r2,r17,1
 c007e68:	1001e726 	beq	r2,zero,c008608 <___vfiprintf_internal_r+0xf04>
 c007e6c:	9d04b03a 	or	r2,r19,r20
 c007e70:	10025c1e 	bne	r2,zero,c0087e4 <___vfiprintf_internal_r+0x10e0>
 c007e74:	d8001d85 	stb	zero,118(sp)
 c007e78:	80024416 	blt	r16,zero,c00878c <___vfiprintf_internal_r+0x1088>
 c007e7c:	00bfdfc4 	movi	r2,-129
 c007e80:	88a2703a 	and	r17,r17,r2
 c007e84:	003f1d06 	br	c007afc <__alt_data_end+0xfc007afc>
 c007e88:	d8c02217 	ldw	r3,136(sp)
 c007e8c:	04c00044 	movi	r19,1
 c007e90:	b811883a 	mov	r8,r23
 c007e94:	18800017 	ldw	r2,0(r3)
 c007e98:	18c00104 	addi	r3,r3,4
 c007e9c:	d8001d85 	stb	zero,118(sp)
 c007ea0:	d8801005 	stb	r2,64(sp)
 c007ea4:	d8c02215 	stw	r3,136(sp)
 c007ea8:	9829883a 	mov	r20,r19
 c007eac:	ddc01004 	addi	r23,sp,64
 c007eb0:	0021883a 	mov	r16,zero
 c007eb4:	003f1e06 	br	c007b30 <__alt_data_end+0xfc007b30>
 c007eb8:	9cc03fcc 	andi	r19,r19,255
 c007ebc:	b811883a 	mov	r8,r23
 c007ec0:	9803331e 	bne	r19,zero,c008b90 <___vfiprintf_internal_r+0x148c>
 c007ec4:	8880080c 	andi	r2,r17,32
 c007ec8:	10004826 	beq	r2,zero,c007fec <___vfiprintf_internal_r+0x8e8>
 c007ecc:	d9002217 	ldw	r4,136(sp)
 c007ed0:	20800117 	ldw	r2,4(r4)
 c007ed4:	24c00017 	ldw	r19,0(r4)
 c007ed8:	21000204 	addi	r4,r4,8
 c007edc:	d9002215 	stw	r4,136(sp)
 c007ee0:	1029883a 	mov	r20,r2
 c007ee4:	10024c16 	blt	r2,zero,c008818 <___vfiprintf_internal_r+0x1114>
 c007ee8:	dd401d83 	ldbu	r21,118(sp)
 c007eec:	80007116 	blt	r16,zero,c0080b4 <___vfiprintf_internal_r+0x9b0>
 c007ef0:	00ffdfc4 	movi	r3,-129
 c007ef4:	9d04b03a 	or	r2,r19,r20
 c007ef8:	88e2703a 	and	r17,r17,r3
 c007efc:	1000d126 	beq	r2,zero,c008244 <___vfiprintf_internal_r+0xb40>
 c007f00:	a0023526 	beq	r20,zero,c0087d8 <___vfiprintf_internal_r+0x10d4>
 c007f04:	ddc01a04 	addi	r23,sp,104
 c007f08:	4039883a 	mov	fp,r8
 c007f0c:	9809883a 	mov	r4,r19
 c007f10:	a00b883a 	mov	r5,r20
 c007f14:	01800284 	movi	r6,10
 c007f18:	000f883a 	mov	r7,zero
 c007f1c:	c00a7b80 	call	c00a7b8 <__umoddi3>
 c007f20:	10800c04 	addi	r2,r2,48
 c007f24:	bdffffc4 	addi	r23,r23,-1
 c007f28:	9809883a 	mov	r4,r19
 c007f2c:	a00b883a 	mov	r5,r20
 c007f30:	b8800005 	stb	r2,0(r23)
 c007f34:	01800284 	movi	r6,10
 c007f38:	000f883a 	mov	r7,zero
 c007f3c:	c00a1bc0 	call	c00a1bc <__udivdi3>
 c007f40:	1027883a 	mov	r19,r2
 c007f44:	10c4b03a 	or	r2,r2,r3
 c007f48:	1829883a 	mov	r20,r3
 c007f4c:	103fef1e 	bne	r2,zero,c007f0c <__alt_data_end+0xfc007f0c>
 c007f50:	d9001e17 	ldw	r4,120(sp)
 c007f54:	e011883a 	mov	r8,fp
 c007f58:	25e9c83a 	sub	r20,r4,r23
 c007f5c:	003eec06 	br	c007b10 <__alt_data_end+0xfc007b10>
 c007f60:	d8802307 	ldb	r2,140(sp)
 c007f64:	1002361e 	bne	r2,zero,c008840 <___vfiprintf_internal_r+0x113c>
 c007f68:	00c00804 	movi	r3,32
 c007f6c:	d8c02305 	stb	r3,140(sp)
 c007f70:	04c00044 	movi	r19,1
 c007f74:	b0c00007 	ldb	r3,0(r22)
 c007f78:	003e3f06 	br	c007878 <__alt_data_end+0xfc007878>
 c007f7c:	8c400054 	ori	r17,r17,1
 c007f80:	b0c00007 	ldb	r3,0(r22)
 c007f84:	003e3c06 	br	c007878 <__alt_data_end+0xfc007878>
 c007f88:	8c402014 	ori	r17,r17,128
 c007f8c:	b0c00007 	ldb	r3,0(r22)
 c007f90:	003e3906 	br	c007878 <__alt_data_end+0xfc007878>
 c007f94:	dc002715 	stw	r16,156(sp)
 c007f98:	d8002515 	stw	zero,148(sp)
 c007f9c:	1f3ff404 	addi	fp,r3,-48
 c007fa0:	0009883a 	mov	r4,zero
 c007fa4:	b021883a 	mov	r16,r22
 c007fa8:	01400284 	movi	r5,10
 c007fac:	c0009680 	call	c000968 <__mulsi3>
 c007fb0:	80c00007 	ldb	r3,0(r16)
 c007fb4:	e089883a 	add	r4,fp,r2
 c007fb8:	b5800044 	addi	r22,r22,1
 c007fbc:	1f3ff404 	addi	fp,r3,-48
 c007fc0:	b021883a 	mov	r16,r22
 c007fc4:	af3ff82e 	bgeu	r21,fp,c007fa8 <__alt_data_end+0xfc007fa8>
 c007fc8:	d9002515 	stw	r4,148(sp)
 c007fcc:	dc002717 	ldw	r16,156(sp)
 c007fd0:	003e2a06 	br	c00787c <__alt_data_end+0xfc00787c>
 c007fd4:	9cc03fcc 	andi	r19,r19,255
 c007fd8:	b811883a 	mov	r8,r23
 c007fdc:	9802e91e 	bne	r19,zero,c008b84 <___vfiprintf_internal_r+0x1480>
 c007fe0:	8c400414 	ori	r17,r17,16
 c007fe4:	8880080c 	andi	r2,r17,32
 c007fe8:	103fb81e 	bne	r2,zero,c007ecc <__alt_data_end+0xfc007ecc>
 c007fec:	8880040c 	andi	r2,r17,16
 c007ff0:	10022e26 	beq	r2,zero,c0088ac <___vfiprintf_internal_r+0x11a8>
 c007ff4:	d9402217 	ldw	r5,136(sp)
 c007ff8:	2cc00017 	ldw	r19,0(r5)
 c007ffc:	29400104 	addi	r5,r5,4
 c008000:	d9402215 	stw	r5,136(sp)
 c008004:	9829d7fa 	srai	r20,r19,31
 c008008:	a005883a 	mov	r2,r20
 c00800c:	003fb506 	br	c007ee4 <__alt_data_end+0xfc007ee4>
 c008010:	9cc03fcc 	andi	r19,r19,255
 c008014:	b811883a 	mov	r8,r23
 c008018:	9802fa1e 	bne	r19,zero,c008c04 <___vfiprintf_internal_r+0x1500>
 c00801c:	8c400414 	ori	r17,r17,16
 c008020:	8880080c 	andi	r2,r17,32
 c008024:	103f661e 	bne	r2,zero,c007dc0 <__alt_data_end+0xfc007dc0>
 c008028:	8880040c 	andi	r2,r17,16
 c00802c:	10020626 	beq	r2,zero,c008848 <___vfiprintf_internal_r+0x1144>
 c008030:	d9402217 	ldw	r5,136(sp)
 c008034:	d8001d85 	stb	zero,118(sp)
 c008038:	0029883a 	mov	r20,zero
 c00803c:	28800104 	addi	r2,r5,4
 c008040:	2cc00017 	ldw	r19,0(r5)
 c008044:	80020816 	blt	r16,zero,c008868 <___vfiprintf_internal_r+0x1164>
 c008048:	00ffdfc4 	movi	r3,-129
 c00804c:	d8802215 	stw	r2,136(sp)
 c008050:	88e2703a 	and	r17,r17,r3
 c008054:	983f651e 	bne	r19,zero,c007dec <__alt_data_end+0xfc007dec>
 c008058:	002b883a 	mov	r21,zero
 c00805c:	8002cf26 	beq	r16,zero,c008b9c <___vfiprintf_internal_r+0x1498>
 c008060:	0027883a 	mov	r19,zero
 c008064:	0029883a 	mov	r20,zero
 c008068:	003f6106 	br	c007df0 <__alt_data_end+0xfc007df0>
 c00806c:	9cc03fcc 	andi	r19,r19,255
 c008070:	b811883a 	mov	r8,r23
 c008074:	9802e01e 	bne	r19,zero,c008bf8 <___vfiprintf_internal_r+0x14f4>
 c008078:	8c400414 	ori	r17,r17,16
 c00807c:	8880080c 	andi	r2,r17,32
 c008080:	1000641e 	bne	r2,zero,c008214 <___vfiprintf_internal_r+0xb10>
 c008084:	8880040c 	andi	r2,r17,16
 c008088:	1001c81e 	bne	r2,zero,c0087ac <___vfiprintf_internal_r+0x10a8>
 c00808c:	8880100c 	andi	r2,r17,64
 c008090:	d8001d85 	stb	zero,118(sp)
 c008094:	1002281e 	bne	r2,zero,c008938 <___vfiprintf_internal_r+0x1234>
 c008098:	d9002217 	ldw	r4,136(sp)
 c00809c:	0029883a 	mov	r20,zero
 c0080a0:	20800104 	addi	r2,r4,4
 c0080a4:	24c00017 	ldw	r19,0(r4)
 c0080a8:	8001c60e 	bge	r16,zero,c0087c4 <___vfiprintf_internal_r+0x10c0>
 c0080ac:	d8802215 	stw	r2,136(sp)
 c0080b0:	002b883a 	mov	r21,zero
 c0080b4:	9d04b03a 	or	r2,r19,r20
 c0080b8:	103f911e 	bne	r2,zero,c007f00 <__alt_data_end+0xfc007f00>
 c0080bc:	00800044 	movi	r2,1
 c0080c0:	10803fcc 	andi	r2,r2,255
 c0080c4:	00c00044 	movi	r3,1
 c0080c8:	10c05f26 	beq	r2,r3,c008248 <___vfiprintf_internal_r+0xb44>
 c0080cc:	00c00084 	movi	r3,2
 c0080d0:	10ffe31e 	bne	r2,r3,c008060 <__alt_data_end+0xfc008060>
 c0080d4:	0027883a 	mov	r19,zero
 c0080d8:	0029883a 	mov	r20,zero
 c0080dc:	00015106 	br	c008624 <___vfiprintf_internal_r+0xf20>
 c0080e0:	9cc03fcc 	andi	r19,r19,255
 c0080e4:	b811883a 	mov	r8,r23
 c0080e8:	9802c01e 	bne	r19,zero,c008bec <___vfiprintf_internal_r+0x14e8>
 c0080ec:	01430074 	movhi	r5,3073
 c0080f0:	29408b04 	addi	r5,r5,556
 c0080f4:	d9402615 	stw	r5,152(sp)
 c0080f8:	8880080c 	andi	r2,r17,32
 c0080fc:	103f541e 	bne	r2,zero,c007e50 <__alt_data_end+0xfc007e50>
 c008100:	8880040c 	andi	r2,r17,16
 c008104:	1001f226 	beq	r2,zero,c0088d0 <___vfiprintf_internal_r+0x11cc>
 c008108:	d9402217 	ldw	r5,136(sp)
 c00810c:	0029883a 	mov	r20,zero
 c008110:	2cc00017 	ldw	r19,0(r5)
 c008114:	29400104 	addi	r5,r5,4
 c008118:	d9402215 	stw	r5,136(sp)
 c00811c:	003f5106 	br	c007e64 <__alt_data_end+0xfc007e64>
 c008120:	d8c02217 	ldw	r3,136(sp)
 c008124:	b811883a 	mov	r8,r23
 c008128:	d8001d85 	stb	zero,118(sp)
 c00812c:	1dc00017 	ldw	r23,0(r3)
 c008130:	1f000104 	addi	fp,r3,4
 c008134:	b8025926 	beq	r23,zero,c008a9c <___vfiprintf_internal_r+0x1398>
 c008138:	80023316 	blt	r16,zero,c008a08 <___vfiprintf_internal_r+0x1304>
 c00813c:	800d883a 	mov	r6,r16
 c008140:	000b883a 	mov	r5,zero
 c008144:	b809883a 	mov	r4,r23
 c008148:	da002a15 	stw	r8,168(sp)
 c00814c:	c005fb40 	call	c005fb4 <memchr>
 c008150:	da002a17 	ldw	r8,168(sp)
 c008154:	10026826 	beq	r2,zero,c008af8 <___vfiprintf_internal_r+0x13f4>
 c008158:	15e9c83a 	sub	r20,r2,r23
 c00815c:	dd401d83 	ldbu	r21,118(sp)
 c008160:	df002215 	stw	fp,136(sp)
 c008164:	0021883a 	mov	r16,zero
 c008168:	003e6906 	br	c007b10 <__alt_data_end+0xfc007b10>
 c00816c:	9cc03fcc 	andi	r19,r19,255
 c008170:	b811883a 	mov	r8,r23
 c008174:	983fc126 	beq	r19,zero,c00807c <__alt_data_end+0xfc00807c>
 c008178:	d8c02303 	ldbu	r3,140(sp)
 c00817c:	d8c01d85 	stb	r3,118(sp)
 c008180:	003fbe06 	br	c00807c <__alt_data_end+0xfc00807c>
 c008184:	d9002217 	ldw	r4,136(sp)
 c008188:	d9402217 	ldw	r5,136(sp)
 c00818c:	21000017 	ldw	r4,0(r4)
 c008190:	28800104 	addi	r2,r5,4
 c008194:	d9002515 	stw	r4,148(sp)
 c008198:	203e3d16 	blt	r4,zero,c007a90 <__alt_data_end+0xfc007a90>
 c00819c:	d8802215 	stw	r2,136(sp)
 c0081a0:	b0c00007 	ldb	r3,0(r22)
 c0081a4:	003db406 	br	c007878 <__alt_data_end+0xfc007878>
 c0081a8:	00c00ac4 	movi	r3,43
 c0081ac:	d8c02305 	stb	r3,140(sp)
 c0081b0:	04c00044 	movi	r19,1
 c0081b4:	b0c00007 	ldb	r3,0(r22)
 c0081b8:	003daf06 	br	c007878 <__alt_data_end+0xfc007878>
 c0081bc:	b0c00007 	ldb	r3,0(r22)
 c0081c0:	01000a84 	movi	r4,42
 c0081c4:	b4000044 	addi	r16,r22,1
 c0081c8:	19025e26 	beq	r3,r4,c008b44 <___vfiprintf_internal_r+0x1440>
 c0081cc:	1f3ff404 	addi	fp,r3,-48
 c0081d0:	0009883a 	mov	r4,zero
 c0081d4:	af025236 	bltu	r21,fp,c008b20 <___vfiprintf_internal_r+0x141c>
 c0081d8:	01400284 	movi	r5,10
 c0081dc:	c0009680 	call	c000968 <__mulsi3>
 c0081e0:	80c00007 	ldb	r3,0(r16)
 c0081e4:	1709883a 	add	r4,r2,fp
 c0081e8:	85800044 	addi	r22,r16,1
 c0081ec:	1f3ff404 	addi	fp,r3,-48
 c0081f0:	b021883a 	mov	r16,r22
 c0081f4:	af3ff82e 	bgeu	r21,fp,c0081d8 <__alt_data_end+0xfc0081d8>
 c0081f8:	2021883a 	mov	r16,r4
 c0081fc:	203d9f0e 	bge	r4,zero,c00787c <__alt_data_end+0xfc00787c>
 c008200:	043fffc4 	movi	r16,-1
 c008204:	003d9d06 	br	c00787c <__alt_data_end+0xfc00787c>
 c008208:	8c401014 	ori	r17,r17,64
 c00820c:	b0c00007 	ldb	r3,0(r22)
 c008210:	003d9906 	br	c007878 <__alt_data_end+0xfc007878>
 c008214:	d9002217 	ldw	r4,136(sp)
 c008218:	d8001d85 	stb	zero,118(sp)
 c00821c:	20c00204 	addi	r3,r4,8
 c008220:	24c00017 	ldw	r19,0(r4)
 c008224:	25000117 	ldw	r20,4(r4)
 c008228:	8001e716 	blt	r16,zero,c0089c8 <___vfiprintf_internal_r+0x12c4>
 c00822c:	013fdfc4 	movi	r4,-129
 c008230:	9d04b03a 	or	r2,r19,r20
 c008234:	d8c02215 	stw	r3,136(sp)
 c008238:	8922703a 	and	r17,r17,r4
 c00823c:	002b883a 	mov	r21,zero
 c008240:	103f2f1e 	bne	r2,zero,c007f00 <__alt_data_end+0xfc007f00>
 c008244:	803e2f26 	beq	r16,zero,c007b04 <__alt_data_end+0xfc007b04>
 c008248:	0027883a 	mov	r19,zero
 c00824c:	9cc00c04 	addi	r19,r19,48
 c008250:	dcc019c5 	stb	r19,103(sp)
 c008254:	dd002817 	ldw	r20,160(sp)
 c008258:	ddc019c4 	addi	r23,sp,103
 c00825c:	003e2c06 	br	c007b10 <__alt_data_end+0xfc007b10>
 c008260:	9cc03fcc 	andi	r19,r19,255
 c008264:	b811883a 	mov	r8,r23
 c008268:	9802571e 	bne	r19,zero,c008bc8 <___vfiprintf_internal_r+0x14c4>
 c00826c:	18005726 	beq	r3,zero,c0083cc <___vfiprintf_internal_r+0xcc8>
 c008270:	04c00044 	movi	r19,1
 c008274:	d8c01005 	stb	r3,64(sp)
 c008278:	d8001d85 	stb	zero,118(sp)
 c00827c:	9829883a 	mov	r20,r19
 c008280:	ddc01004 	addi	r23,sp,64
 c008284:	003f0a06 	br	c007eb0 <__alt_data_end+0xfc007eb0>
 c008288:	d9402017 	ldw	r5,128(sp)
 c00828c:	d9002117 	ldw	r4,132(sp)
 c008290:	d9801a04 	addi	r6,sp,104
 c008294:	da802a15 	stw	r10,168(sp)
 c008298:	c0075f00 	call	c0075f0 <__sprint_r.part.0>
 c00829c:	da802a17 	ldw	r10,168(sp)
 c0082a0:	1000501e 	bne	r2,zero,c0083e4 <___vfiprintf_internal_r+0xce0>
 c0082a4:	d9801b17 	ldw	r6,108(sp)
 c0082a8:	d8801c17 	ldw	r2,112(sp)
 c0082ac:	d811883a 	mov	r8,sp
 c0082b0:	31000044 	addi	r4,r6,1
 c0082b4:	003e3606 	br	c007b90 <__alt_data_end+0xfc007b90>
 c0082b8:	d9001b17 	ldw	r4,108(sp)
 c0082bc:	d8801c17 	ldw	r2,112(sp)
 c0082c0:	21400044 	addi	r5,r4,1
 c0082c4:	d9801d87 	ldb	r6,118(sp)
 c0082c8:	303e5226 	beq	r6,zero,c007c14 <__alt_data_end+0xfc007c14>
 c0082cc:	01800044 	movi	r6,1
 c0082d0:	d9001d84 	addi	r4,sp,118
 c0082d4:	1185883a 	add	r2,r2,r6
 c0082d8:	41000015 	stw	r4,0(r8)
 c0082dc:	41800115 	stw	r6,4(r8)
 c0082e0:	d8801c15 	stw	r2,112(sp)
 c0082e4:	d9401b15 	stw	r5,108(sp)
 c0082e8:	010001c4 	movi	r4,7
 c0082ec:	2140b00e 	bge	r4,r5,c0085b0 <___vfiprintf_internal_r+0xeac>
 c0082f0:	1000f61e 	bne	r2,zero,c0086cc <___vfiprintf_internal_r+0xfc8>
 c0082f4:	3800b31e 	bne	r7,zero,c0085c4 <___vfiprintf_internal_r+0xec0>
 c0082f8:	0009883a 	mov	r4,zero
 c0082fc:	300b883a 	mov	r5,r6
 c008300:	d811883a 	mov	r8,sp
 c008304:	01802004 	movi	r6,128
 c008308:	19be5226 	beq	r3,r6,c007c54 <__alt_data_end+0xfc007c54>
 c00830c:	8521c83a 	sub	r16,r16,r20
 c008310:	043e790e 	bge	zero,r16,c007cf8 <__alt_data_end+0xfc007cf8>
 c008314:	05400404 	movi	r21,16
 c008318:	ac01b00e 	bge	r21,r16,c0089dc <___vfiprintf_internal_r+0x12d8>
 c00831c:	01430074 	movhi	r5,3073
 c008320:	2940f104 	addi	r5,r5,964
 c008324:	d9402315 	stw	r5,140(sp)
 c008328:	070001c4 	movi	fp,7
 c00832c:	00000506 	br	c008344 <___vfiprintf_internal_r+0xc40>
 c008330:	21400084 	addi	r5,r4,2
 c008334:	42000204 	addi	r8,r8,8
 c008338:	1809883a 	mov	r4,r3
 c00833c:	843ffc04 	addi	r16,r16,-16
 c008340:	ac000d0e 	bge	r21,r16,c008378 <___vfiprintf_internal_r+0xc74>
 c008344:	10800404 	addi	r2,r2,16
 c008348:	20c00044 	addi	r3,r4,1
 c00834c:	44800015 	stw	r18,0(r8)
 c008350:	45400115 	stw	r21,4(r8)
 c008354:	d8801c15 	stw	r2,112(sp)
 c008358:	d8c01b15 	stw	r3,108(sp)
 c00835c:	e0fff40e 	bge	fp,r3,c008330 <__alt_data_end+0xfc008330>
 c008360:	1000101e 	bne	r2,zero,c0083a4 <___vfiprintf_internal_r+0xca0>
 c008364:	843ffc04 	addi	r16,r16,-16
 c008368:	01400044 	movi	r5,1
 c00836c:	0009883a 	mov	r4,zero
 c008370:	d811883a 	mov	r8,sp
 c008374:	ac3ff316 	blt	r21,r16,c008344 <__alt_data_end+0xfc008344>
 c008378:	d8c02317 	ldw	r3,140(sp)
 c00837c:	1405883a 	add	r2,r2,r16
 c008380:	44000115 	stw	r16,4(r8)
 c008384:	40c00015 	stw	r3,0(r8)
 c008388:	d8801c15 	stw	r2,112(sp)
 c00838c:	d9401b15 	stw	r5,108(sp)
 c008390:	00c001c4 	movi	r3,7
 c008394:	19401916 	blt	r3,r5,c0083fc <___vfiprintf_internal_r+0xcf8>
 c008398:	42000204 	addi	r8,r8,8
 c00839c:	29400044 	addi	r5,r5,1
 c0083a0:	003e5506 	br	c007cf8 <__alt_data_end+0xfc007cf8>
 c0083a4:	d9402017 	ldw	r5,128(sp)
 c0083a8:	d9002117 	ldw	r4,132(sp)
 c0083ac:	d9801a04 	addi	r6,sp,104
 c0083b0:	c0075f00 	call	c0075f0 <__sprint_r.part.0>
 c0083b4:	10000b1e 	bne	r2,zero,c0083e4 <___vfiprintf_internal_r+0xce0>
 c0083b8:	d9001b17 	ldw	r4,108(sp)
 c0083bc:	d8801c17 	ldw	r2,112(sp)
 c0083c0:	d811883a 	mov	r8,sp
 c0083c4:	21400044 	addi	r5,r4,1
 c0083c8:	003fdc06 	br	c00833c <__alt_data_end+0xfc00833c>
 c0083cc:	d8801c17 	ldw	r2,112(sp)
 c0083d0:	10000426 	beq	r2,zero,c0083e4 <___vfiprintf_internal_r+0xce0>
 c0083d4:	d9402017 	ldw	r5,128(sp)
 c0083d8:	d9002117 	ldw	r4,132(sp)
 c0083dc:	d9801a04 	addi	r6,sp,104
 c0083e0:	c0075f00 	call	c0075f0 <__sprint_r.part.0>
 c0083e4:	d9402017 	ldw	r5,128(sp)
 c0083e8:	2880030b 	ldhu	r2,12(r5)
 c0083ec:	1080100c 	andi	r2,r2,64
 c0083f0:	10014d1e 	bne	r2,zero,c008928 <___vfiprintf_internal_r+0x1224>
 c0083f4:	d8802417 	ldw	r2,144(sp)
 c0083f8:	003d9706 	br	c007a58 <__alt_data_end+0xfc007a58>
 c0083fc:	1000d21e 	bne	r2,zero,c008748 <___vfiprintf_internal_r+0x1044>
 c008400:	00c00044 	movi	r3,1
 c008404:	a005883a 	mov	r2,r20
 c008408:	ddc00015 	stw	r23,0(sp)
 c00840c:	dd000115 	stw	r20,4(sp)
 c008410:	dd001c15 	stw	r20,112(sp)
 c008414:	d8c01b15 	stw	r3,108(sp)
 c008418:	d811883a 	mov	r8,sp
 c00841c:	42000204 	addi	r8,r8,8
 c008420:	8c40010c 	andi	r17,r17,4
 c008424:	88004026 	beq	r17,zero,c008528 <___vfiprintf_internal_r+0xe24>
 c008428:	d9002517 	ldw	r4,148(sp)
 c00842c:	24e3c83a 	sub	r17,r4,r19
 c008430:	04403d0e 	bge	zero,r17,c008528 <___vfiprintf_internal_r+0xe24>
 c008434:	04000404 	movi	r16,16
 c008438:	8441a90e 	bge	r16,r17,c008ae0 <___vfiprintf_internal_r+0x13dc>
 c00843c:	00c30074 	movhi	r3,3073
 c008440:	18c0f504 	addi	r3,r3,980
 c008444:	d9001b17 	ldw	r4,108(sp)
 c008448:	d8c02315 	stw	r3,140(sp)
 c00844c:	050001c4 	movi	r20,7
 c008450:	dd402117 	ldw	r21,132(sp)
 c008454:	ddc02017 	ldw	r23,128(sp)
 c008458:	00000506 	br	c008470 <___vfiprintf_internal_r+0xd6c>
 c00845c:	21400084 	addi	r5,r4,2
 c008460:	42000204 	addi	r8,r8,8
 c008464:	1809883a 	mov	r4,r3
 c008468:	8c7ffc04 	addi	r17,r17,-16
 c00846c:	84400f0e 	bge	r16,r17,c0084ac <___vfiprintf_internal_r+0xda8>
 c008470:	01430074 	movhi	r5,3073
 c008474:	10800404 	addi	r2,r2,16
 c008478:	20c00044 	addi	r3,r4,1
 c00847c:	2940f504 	addi	r5,r5,980
 c008480:	41400015 	stw	r5,0(r8)
 c008484:	44000115 	stw	r16,4(r8)
 c008488:	d8801c15 	stw	r2,112(sp)
 c00848c:	d8c01b15 	stw	r3,108(sp)
 c008490:	a0fff20e 	bge	r20,r3,c00845c <__alt_data_end+0xfc00845c>
 c008494:	1000141e 	bne	r2,zero,c0084e8 <___vfiprintf_internal_r+0xde4>
 c008498:	8c7ffc04 	addi	r17,r17,-16
 c00849c:	01400044 	movi	r5,1
 c0084a0:	0009883a 	mov	r4,zero
 c0084a4:	d811883a 	mov	r8,sp
 c0084a8:	847ff116 	blt	r16,r17,c008470 <__alt_data_end+0xfc008470>
 c0084ac:	d8c02317 	ldw	r3,140(sp)
 c0084b0:	1445883a 	add	r2,r2,r17
 c0084b4:	44400115 	stw	r17,4(r8)
 c0084b8:	40c00015 	stw	r3,0(r8)
 c0084bc:	d8801c15 	stw	r2,112(sp)
 c0084c0:	d9401b15 	stw	r5,108(sp)
 c0084c4:	00c001c4 	movi	r3,7
 c0084c8:	1940170e 	bge	r3,r5,c008528 <___vfiprintf_internal_r+0xe24>
 c0084cc:	1000101e 	bne	r2,zero,c008510 <___vfiprintf_internal_r+0xe0c>
 c0084d0:	d8802517 	ldw	r2,148(sp)
 c0084d4:	14c11616 	blt	r2,r19,c008930 <___vfiprintf_internal_r+0x122c>
 c0084d8:	d9002417 	ldw	r4,144(sp)
 c0084dc:	2089883a 	add	r4,r4,r2
 c0084e0:	d9002415 	stw	r4,144(sp)
 c0084e4:	003e1806 	br	c007d48 <__alt_data_end+0xfc007d48>
 c0084e8:	d9801a04 	addi	r6,sp,104
 c0084ec:	b80b883a 	mov	r5,r23
 c0084f0:	a809883a 	mov	r4,r21
 c0084f4:	c0075f00 	call	c0075f0 <__sprint_r.part.0>
 c0084f8:	103fba1e 	bne	r2,zero,c0083e4 <__alt_data_end+0xfc0083e4>
 c0084fc:	d9001b17 	ldw	r4,108(sp)
 c008500:	d8801c17 	ldw	r2,112(sp)
 c008504:	d811883a 	mov	r8,sp
 c008508:	21400044 	addi	r5,r4,1
 c00850c:	003fd606 	br	c008468 <__alt_data_end+0xfc008468>
 c008510:	d9402017 	ldw	r5,128(sp)
 c008514:	d9002117 	ldw	r4,132(sp)
 c008518:	d9801a04 	addi	r6,sp,104
 c00851c:	c0075f00 	call	c0075f0 <__sprint_r.part.0>
 c008520:	103fb01e 	bne	r2,zero,c0083e4 <__alt_data_end+0xfc0083e4>
 c008524:	d8801c17 	ldw	r2,112(sp)
 c008528:	d8c02517 	ldw	r3,148(sp)
 c00852c:	1cc0010e 	bge	r3,r19,c008534 <___vfiprintf_internal_r+0xe30>
 c008530:	9807883a 	mov	r3,r19
 c008534:	d9002417 	ldw	r4,144(sp)
 c008538:	20c9883a 	add	r4,r4,r3
 c00853c:	d9002415 	stw	r4,144(sp)
 c008540:	103e0126 	beq	r2,zero,c007d48 <__alt_data_end+0xfc007d48>
 c008544:	d9402017 	ldw	r5,128(sp)
 c008548:	d9002117 	ldw	r4,132(sp)
 c00854c:	d9801a04 	addi	r6,sp,104
 c008550:	c0075f00 	call	c0075f0 <__sprint_r.part.0>
 c008554:	103dfc26 	beq	r2,zero,c007d48 <__alt_data_end+0xfc007d48>
 c008558:	003fa206 	br	c0083e4 <__alt_data_end+0xfc0083e4>
 c00855c:	d9402017 	ldw	r5,128(sp)
 c008560:	d9002117 	ldw	r4,132(sp)
 c008564:	d9801a04 	addi	r6,sp,104
 c008568:	d9c02b15 	stw	r7,172(sp)
 c00856c:	c0075f00 	call	c0075f0 <__sprint_r.part.0>
 c008570:	d9c02b17 	ldw	r7,172(sp)
 c008574:	103f9b1e 	bne	r2,zero,c0083e4 <__alt_data_end+0xfc0083e4>
 c008578:	d9001b17 	ldw	r4,108(sp)
 c00857c:	d8801c17 	ldw	r2,112(sp)
 c008580:	d811883a 	mov	r8,sp
 c008584:	21800044 	addi	r6,r4,1
 c008588:	003dbf06 	br	c007c88 <__alt_data_end+0xfc007c88>
 c00858c:	1000d81e 	bne	r2,zero,c0088f0 <___vfiprintf_internal_r+0x11ec>
 c008590:	d9001d87 	ldb	r4,118(sp)
 c008594:	20000a26 	beq	r4,zero,c0085c0 <___vfiprintf_internal_r+0xebc>
 c008598:	00800044 	movi	r2,1
 c00859c:	d9001d84 	addi	r4,sp,118
 c0085a0:	100b883a 	mov	r5,r2
 c0085a4:	d9000015 	stw	r4,0(sp)
 c0085a8:	d8800115 	stw	r2,4(sp)
 c0085ac:	d811883a 	mov	r8,sp
 c0085b0:	2809883a 	mov	r4,r5
 c0085b4:	42000204 	addi	r8,r8,8
 c0085b8:	29400044 	addi	r5,r5,1
 c0085bc:	003d9506 	br	c007c14 <__alt_data_end+0xfc007c14>
 c0085c0:	3800fd26 	beq	r7,zero,c0089b8 <___vfiprintf_internal_r+0x12b4>
 c0085c4:	00800084 	movi	r2,2
 c0085c8:	d9001d04 	addi	r4,sp,116
 c0085cc:	d9000015 	stw	r4,0(sp)
 c0085d0:	d8800115 	stw	r2,4(sp)
 c0085d4:	01400044 	movi	r5,1
 c0085d8:	d811883a 	mov	r8,sp
 c0085dc:	2809883a 	mov	r4,r5
 c0085e0:	42000204 	addi	r8,r8,8
 c0085e4:	29400044 	addi	r5,r5,1
 c0085e8:	003f4606 	br	c008304 <__alt_data_end+0xfc008304>
 c0085ec:	d8802517 	ldw	r2,148(sp)
 c0085f0:	14c0010e 	bge	r2,r19,c0085f8 <___vfiprintf_internal_r+0xef4>
 c0085f4:	9805883a 	mov	r2,r19
 c0085f8:	d9402417 	ldw	r5,144(sp)
 c0085fc:	288b883a 	add	r5,r5,r2
 c008600:	d9402415 	stw	r5,144(sp)
 c008604:	003dd006 	br	c007d48 <__alt_data_end+0xfc007d48>
 c008608:	d8001d85 	stb	zero,118(sp)
 c00860c:	80005d16 	blt	r16,zero,c008784 <___vfiprintf_internal_r+0x1080>
 c008610:	00ffdfc4 	movi	r3,-129
 c008614:	9d04b03a 	or	r2,r19,r20
 c008618:	88e2703a 	and	r17,r17,r3
 c00861c:	103d3726 	beq	r2,zero,c007afc <__alt_data_end+0xfc007afc>
 c008620:	002b883a 	mov	r21,zero
 c008624:	d9002617 	ldw	r4,152(sp)
 c008628:	ddc01a04 	addi	r23,sp,104
 c00862c:	988003cc 	andi	r2,r19,15
 c008630:	a006973a 	slli	r3,r20,28
 c008634:	2085883a 	add	r2,r4,r2
 c008638:	9826d13a 	srli	r19,r19,4
 c00863c:	10800003 	ldbu	r2,0(r2)
 c008640:	a028d13a 	srli	r20,r20,4
 c008644:	bdffffc4 	addi	r23,r23,-1
 c008648:	1ce6b03a 	or	r19,r3,r19
 c00864c:	b8800005 	stb	r2,0(r23)
 c008650:	9d04b03a 	or	r2,r19,r20
 c008654:	103ff51e 	bne	r2,zero,c00862c <__alt_data_end+0xfc00862c>
 c008658:	d8801e17 	ldw	r2,120(sp)
 c00865c:	15e9c83a 	sub	r20,r2,r23
 c008660:	003d2b06 	br	c007b10 <__alt_data_end+0xfc007b10>
 c008664:	d9402017 	ldw	r5,128(sp)
 c008668:	d9002117 	ldw	r4,132(sp)
 c00866c:	d9801a04 	addi	r6,sp,104
 c008670:	c0075f00 	call	c0075f0 <__sprint_r.part.0>
 c008674:	103f5b1e 	bne	r2,zero,c0083e4 <__alt_data_end+0xfc0083e4>
 c008678:	d8801c17 	ldw	r2,112(sp)
 c00867c:	d811883a 	mov	r8,sp
 c008680:	003f6706 	br	c008420 <__alt_data_end+0xfc008420>
 c008684:	d9402017 	ldw	r5,128(sp)
 c008688:	d9002117 	ldw	r4,132(sp)
 c00868c:	d9801a04 	addi	r6,sp,104
 c008690:	c0075f00 	call	c0075f0 <__sprint_r.part.0>
 c008694:	103f531e 	bne	r2,zero,c0083e4 <__alt_data_end+0xfc0083e4>
 c008698:	d811883a 	mov	r8,sp
 c00869c:	003cd906 	br	c007a04 <__alt_data_end+0xfc007a04>
 c0086a0:	10803fcc 	andi	r2,r2,255
 c0086a4:	1080201c 	xori	r2,r2,128
 c0086a8:	10bfe004 	addi	r2,r2,-128
 c0086ac:	00c00c04 	movi	r3,48
 c0086b0:	10ffe926 	beq	r2,r3,c008658 <__alt_data_end+0xfc008658>
 c0086b4:	b8ffffc5 	stb	r3,-1(r23)
 c0086b8:	d8c01e17 	ldw	r3,120(sp)
 c0086bc:	b8bfffc4 	addi	r2,r23,-1
 c0086c0:	102f883a 	mov	r23,r2
 c0086c4:	18a9c83a 	sub	r20,r3,r2
 c0086c8:	003d1106 	br	c007b10 <__alt_data_end+0xfc007b10>
 c0086cc:	d9402017 	ldw	r5,128(sp)
 c0086d0:	d9002117 	ldw	r4,132(sp)
 c0086d4:	d9801a04 	addi	r6,sp,104
 c0086d8:	d8c02a15 	stw	r3,168(sp)
 c0086dc:	d9c02b15 	stw	r7,172(sp)
 c0086e0:	c0075f00 	call	c0075f0 <__sprint_r.part.0>
 c0086e4:	d8c02a17 	ldw	r3,168(sp)
 c0086e8:	d9c02b17 	ldw	r7,172(sp)
 c0086ec:	103f3d1e 	bne	r2,zero,c0083e4 <__alt_data_end+0xfc0083e4>
 c0086f0:	d9001b17 	ldw	r4,108(sp)
 c0086f4:	d8801c17 	ldw	r2,112(sp)
 c0086f8:	d811883a 	mov	r8,sp
 c0086fc:	21400044 	addi	r5,r4,1
 c008700:	003d4406 	br	c007c14 <__alt_data_end+0xfc007c14>
 c008704:	d9402017 	ldw	r5,128(sp)
 c008708:	d9002117 	ldw	r4,132(sp)
 c00870c:	d9801a04 	addi	r6,sp,104
 c008710:	d8c02a15 	stw	r3,168(sp)
 c008714:	c0075f00 	call	c0075f0 <__sprint_r.part.0>
 c008718:	d8c02a17 	ldw	r3,168(sp)
 c00871c:	103f311e 	bne	r2,zero,c0083e4 <__alt_data_end+0xfc0083e4>
 c008720:	d9001b17 	ldw	r4,108(sp)
 c008724:	d8801c17 	ldw	r2,112(sp)
 c008728:	d811883a 	mov	r8,sp
 c00872c:	21400044 	addi	r5,r4,1
 c008730:	003ef406 	br	c008304 <__alt_data_end+0xfc008304>
 c008734:	1000bd1e 	bne	r2,zero,c008a2c <___vfiprintf_internal_r+0x1328>
 c008738:	01400044 	movi	r5,1
 c00873c:	0009883a 	mov	r4,zero
 c008740:	d811883a 	mov	r8,sp
 c008744:	003ef106 	br	c00830c <__alt_data_end+0xfc00830c>
 c008748:	d9402017 	ldw	r5,128(sp)
 c00874c:	d9002117 	ldw	r4,132(sp)
 c008750:	d9801a04 	addi	r6,sp,104
 c008754:	c0075f00 	call	c0075f0 <__sprint_r.part.0>
 c008758:	103f221e 	bne	r2,zero,c0083e4 <__alt_data_end+0xfc0083e4>
 c00875c:	d9401b17 	ldw	r5,108(sp)
 c008760:	d8801c17 	ldw	r2,112(sp)
 c008764:	d811883a 	mov	r8,sp
 c008768:	29400044 	addi	r5,r5,1
 c00876c:	003d6206 	br	c007cf8 <__alt_data_end+0xfc007cf8>
 c008770:	01430074 	movhi	r5,3073
 c008774:	29409004 	addi	r5,r5,576
 c008778:	d9402615 	stw	r5,152(sp)
 c00877c:	d8c02215 	stw	r3,136(sp)
 c008780:	1023883a 	mov	r17,r2
 c008784:	9d04b03a 	or	r2,r19,r20
 c008788:	103fa51e 	bne	r2,zero,c008620 <__alt_data_end+0xfc008620>
 c00878c:	002b883a 	mov	r21,zero
 c008790:	00800084 	movi	r2,2
 c008794:	003e4a06 	br	c0080c0 <__alt_data_end+0xfc0080c0>
 c008798:	01430074 	movhi	r5,3073
 c00879c:	29409004 	addi	r5,r5,576
 c0087a0:	002b883a 	mov	r21,zero
 c0087a4:	d9402615 	stw	r5,152(sp)
 c0087a8:	003f9e06 	br	c008624 <__alt_data_end+0xfc008624>
 c0087ac:	d9402217 	ldw	r5,136(sp)
 c0087b0:	d8001d85 	stb	zero,118(sp)
 c0087b4:	0029883a 	mov	r20,zero
 c0087b8:	28800104 	addi	r2,r5,4
 c0087bc:	2cc00017 	ldw	r19,0(r5)
 c0087c0:	803e3a16 	blt	r16,zero,c0080ac <__alt_data_end+0xfc0080ac>
 c0087c4:	00ffdfc4 	movi	r3,-129
 c0087c8:	d8802215 	stw	r2,136(sp)
 c0087cc:	88e2703a 	and	r17,r17,r3
 c0087d0:	002b883a 	mov	r21,zero
 c0087d4:	983e9b26 	beq	r19,zero,c008244 <__alt_data_end+0xfc008244>
 c0087d8:	00800244 	movi	r2,9
 c0087dc:	14fdc936 	bltu	r2,r19,c007f04 <__alt_data_end+0xfc007f04>
 c0087e0:	003e9a06 	br	c00824c <__alt_data_end+0xfc00824c>
 c0087e4:	00800c04 	movi	r2,48
 c0087e8:	d8c01d45 	stb	r3,117(sp)
 c0087ec:	d8801d05 	stb	r2,116(sp)
 c0087f0:	d8001d85 	stb	zero,118(sp)
 c0087f4:	88c00094 	ori	r3,r17,2
 c0087f8:	80009c16 	blt	r16,zero,c008a6c <___vfiprintf_internal_r+0x1368>
 c0087fc:	00bfdfc4 	movi	r2,-129
 c008800:	88a2703a 	and	r17,r17,r2
 c008804:	8c400094 	ori	r17,r17,2
 c008808:	002b883a 	mov	r21,zero
 c00880c:	003f8506 	br	c008624 <__alt_data_end+0xfc008624>
 c008810:	b029883a 	mov	r20,r22
 c008814:	003c0b06 	br	c007844 <__alt_data_end+0xfc007844>
 c008818:	04e7c83a 	sub	r19,zero,r19
 c00881c:	05400b44 	movi	r21,45
 c008820:	9804c03a 	cmpne	r2,r19,zero
 c008824:	0529c83a 	sub	r20,zero,r20
 c008828:	dd401d85 	stb	r21,118(sp)
 c00882c:	a0a9c83a 	sub	r20,r20,r2
 c008830:	80009716 	blt	r16,zero,c008a90 <___vfiprintf_internal_r+0x138c>
 c008834:	00bfdfc4 	movi	r2,-129
 c008838:	88a2703a 	and	r17,r17,r2
 c00883c:	003db006 	br	c007f00 <__alt_data_end+0xfc007f00>
 c008840:	b0c00007 	ldb	r3,0(r22)
 c008844:	003c0c06 	br	c007878 <__alt_data_end+0xfc007878>
 c008848:	8880100c 	andi	r2,r17,64
 c00884c:	d8001d85 	stb	zero,118(sp)
 c008850:	1000461e 	bne	r2,zero,c00896c <___vfiprintf_internal_r+0x1268>
 c008854:	d9002217 	ldw	r4,136(sp)
 c008858:	0029883a 	mov	r20,zero
 c00885c:	20800104 	addi	r2,r4,4
 c008860:	24c00017 	ldw	r19,0(r4)
 c008864:	803df80e 	bge	r16,zero,c008048 <__alt_data_end+0xfc008048>
 c008868:	9d06b03a 	or	r3,r19,r20
 c00886c:	d8802215 	stw	r2,136(sp)
 c008870:	183d5e1e 	bne	r3,zero,c007dec <__alt_data_end+0xfc007dec>
 c008874:	002b883a 	mov	r21,zero
 c008878:	0005883a 	mov	r2,zero
 c00887c:	003e1006 	br	c0080c0 <__alt_data_end+0xfc0080c0>
 c008880:	8880040c 	andi	r2,r17,16
 c008884:	1000321e 	bne	r2,zero,c008950 <___vfiprintf_internal_r+0x124c>
 c008888:	8c40100c 	andi	r17,r17,64
 c00888c:	88008d26 	beq	r17,zero,c008ac4 <___vfiprintf_internal_r+0x13c0>
 c008890:	d9402217 	ldw	r5,136(sp)
 c008894:	d8c02417 	ldw	r3,144(sp)
 c008898:	28800017 	ldw	r2,0(r5)
 c00889c:	29400104 	addi	r5,r5,4
 c0088a0:	d9402215 	stw	r5,136(sp)
 c0088a4:	10c0000d 	sth	r3,0(r2)
 c0088a8:	003bca06 	br	c0077d4 <__alt_data_end+0xfc0077d4>
 c0088ac:	8880100c 	andi	r2,r17,64
 c0088b0:	10003a26 	beq	r2,zero,c00899c <___vfiprintf_internal_r+0x1298>
 c0088b4:	d8802217 	ldw	r2,136(sp)
 c0088b8:	14c0000f 	ldh	r19,0(r2)
 c0088bc:	10800104 	addi	r2,r2,4
 c0088c0:	d8802215 	stw	r2,136(sp)
 c0088c4:	9829d7fa 	srai	r20,r19,31
 c0088c8:	a005883a 	mov	r2,r20
 c0088cc:	003d8506 	br	c007ee4 <__alt_data_end+0xfc007ee4>
 c0088d0:	8880100c 	andi	r2,r17,64
 c0088d4:	10002b26 	beq	r2,zero,c008984 <___vfiprintf_internal_r+0x1280>
 c0088d8:	d8802217 	ldw	r2,136(sp)
 c0088dc:	0029883a 	mov	r20,zero
 c0088e0:	14c0000b 	ldhu	r19,0(r2)
 c0088e4:	10800104 	addi	r2,r2,4
 c0088e8:	d8802215 	stw	r2,136(sp)
 c0088ec:	003d5d06 	br	c007e64 <__alt_data_end+0xfc007e64>
 c0088f0:	d9402017 	ldw	r5,128(sp)
 c0088f4:	d9002117 	ldw	r4,132(sp)
 c0088f8:	d9801a04 	addi	r6,sp,104
 c0088fc:	d8c02a15 	stw	r3,168(sp)
 c008900:	d9c02b15 	stw	r7,172(sp)
 c008904:	c0075f00 	call	c0075f0 <__sprint_r.part.0>
 c008908:	d8c02a17 	ldw	r3,168(sp)
 c00890c:	d9c02b17 	ldw	r7,172(sp)
 c008910:	103eb41e 	bne	r2,zero,c0083e4 <__alt_data_end+0xfc0083e4>
 c008914:	d9001b17 	ldw	r4,108(sp)
 c008918:	d8801c17 	ldw	r2,112(sp)
 c00891c:	d811883a 	mov	r8,sp
 c008920:	21400044 	addi	r5,r4,1
 c008924:	003e6706 	br	c0082c4 <__alt_data_end+0xfc0082c4>
 c008928:	00bfffc4 	movi	r2,-1
 c00892c:	003c4a06 	br	c007a58 <__alt_data_end+0xfc007a58>
 c008930:	9805883a 	mov	r2,r19
 c008934:	003ee806 	br	c0084d8 <__alt_data_end+0xfc0084d8>
 c008938:	d8c02217 	ldw	r3,136(sp)
 c00893c:	0029883a 	mov	r20,zero
 c008940:	18800104 	addi	r2,r3,4
 c008944:	1cc0000b 	ldhu	r19,0(r3)
 c008948:	803f9e0e 	bge	r16,zero,c0087c4 <__alt_data_end+0xfc0087c4>
 c00894c:	003dd706 	br	c0080ac <__alt_data_end+0xfc0080ac>
 c008950:	d8c02217 	ldw	r3,136(sp)
 c008954:	d9002417 	ldw	r4,144(sp)
 c008958:	18800017 	ldw	r2,0(r3)
 c00895c:	18c00104 	addi	r3,r3,4
 c008960:	d8c02215 	stw	r3,136(sp)
 c008964:	11000015 	stw	r4,0(r2)
 c008968:	003b9a06 	br	c0077d4 <__alt_data_end+0xfc0077d4>
 c00896c:	d8c02217 	ldw	r3,136(sp)
 c008970:	0029883a 	mov	r20,zero
 c008974:	18800104 	addi	r2,r3,4
 c008978:	1cc0000b 	ldhu	r19,0(r3)
 c00897c:	803db20e 	bge	r16,zero,c008048 <__alt_data_end+0xfc008048>
 c008980:	003fb906 	br	c008868 <__alt_data_end+0xfc008868>
 c008984:	d9002217 	ldw	r4,136(sp)
 c008988:	0029883a 	mov	r20,zero
 c00898c:	24c00017 	ldw	r19,0(r4)
 c008990:	21000104 	addi	r4,r4,4
 c008994:	d9002215 	stw	r4,136(sp)
 c008998:	003d3206 	br	c007e64 <__alt_data_end+0xfc007e64>
 c00899c:	d8c02217 	ldw	r3,136(sp)
 c0089a0:	1cc00017 	ldw	r19,0(r3)
 c0089a4:	18c00104 	addi	r3,r3,4
 c0089a8:	d8c02215 	stw	r3,136(sp)
 c0089ac:	9829d7fa 	srai	r20,r19,31
 c0089b0:	a005883a 	mov	r2,r20
 c0089b4:	003d4b06 	br	c007ee4 <__alt_data_end+0xfc007ee4>
 c0089b8:	0009883a 	mov	r4,zero
 c0089bc:	01400044 	movi	r5,1
 c0089c0:	d811883a 	mov	r8,sp
 c0089c4:	003e4f06 	br	c008304 <__alt_data_end+0xfc008304>
 c0089c8:	d8c02215 	stw	r3,136(sp)
 c0089cc:	002b883a 	mov	r21,zero
 c0089d0:	003db806 	br	c0080b4 <__alt_data_end+0xfc0080b4>
 c0089d4:	d811883a 	mov	r8,sp
 c0089d8:	003e9606 	br	c008434 <__alt_data_end+0xfc008434>
 c0089dc:	01030074 	movhi	r4,3073
 c0089e0:	2100f104 	addi	r4,r4,964
 c0089e4:	d9002315 	stw	r4,140(sp)
 c0089e8:	003e6306 	br	c008378 <__alt_data_end+0xfc008378>
 c0089ec:	b0c00043 	ldbu	r3,1(r22)
 c0089f0:	8c400814 	ori	r17,r17,32
 c0089f4:	b5800044 	addi	r22,r22,1
 c0089f8:	18c03fcc 	andi	r3,r3,255
 c0089fc:	18c0201c 	xori	r3,r3,128
 c008a00:	18ffe004 	addi	r3,r3,-128
 c008a04:	003b9c06 	br	c007878 <__alt_data_end+0xfc007878>
 c008a08:	b809883a 	mov	r4,r23
 c008a0c:	da002a15 	stw	r8,168(sp)
 c008a10:	c0075580 	call	c007558 <strlen>
 c008a14:	1029883a 	mov	r20,r2
 c008a18:	dd401d83 	ldbu	r21,118(sp)
 c008a1c:	df002215 	stw	fp,136(sp)
 c008a20:	0021883a 	mov	r16,zero
 c008a24:	da002a17 	ldw	r8,168(sp)
 c008a28:	003c3906 	br	c007b10 <__alt_data_end+0xfc007b10>
 c008a2c:	d9402017 	ldw	r5,128(sp)
 c008a30:	d9002117 	ldw	r4,132(sp)
 c008a34:	d9801a04 	addi	r6,sp,104
 c008a38:	c0075f00 	call	c0075f0 <__sprint_r.part.0>
 c008a3c:	103e691e 	bne	r2,zero,c0083e4 <__alt_data_end+0xfc0083e4>
 c008a40:	d9001b17 	ldw	r4,108(sp)
 c008a44:	d8801c17 	ldw	r2,112(sp)
 c008a48:	d811883a 	mov	r8,sp
 c008a4c:	21400044 	addi	r5,r4,1
 c008a50:	003e2e06 	br	c00830c <__alt_data_end+0xfc00830c>
 c008a54:	01030074 	movhi	r4,3073
 c008a58:	2100f504 	addi	r4,r4,980
 c008a5c:	d9002315 	stw	r4,140(sp)
 c008a60:	d9001b17 	ldw	r4,108(sp)
 c008a64:	21000044 	addi	r4,r4,1
 c008a68:	003c5e06 	br	c007be4 <__alt_data_end+0xfc007be4>
 c008a6c:	002b883a 	mov	r21,zero
 c008a70:	00800084 	movi	r2,2
 c008a74:	10803fcc 	andi	r2,r2,255
 c008a78:	01000044 	movi	r4,1
 c008a7c:	11002b26 	beq	r2,r4,c008b2c <___vfiprintf_internal_r+0x1428>
 c008a80:	01000084 	movi	r4,2
 c008a84:	11002b1e 	bne	r2,r4,c008b34 <___vfiprintf_internal_r+0x1430>
 c008a88:	1823883a 	mov	r17,r3
 c008a8c:	003ee506 	br	c008624 <__alt_data_end+0xfc008624>
 c008a90:	8807883a 	mov	r3,r17
 c008a94:	00800044 	movi	r2,1
 c008a98:	003ff606 	br	c008a74 <__alt_data_end+0xfc008a74>
 c008a9c:	00800184 	movi	r2,6
 c008aa0:	1400012e 	bgeu	r2,r16,c008aa8 <___vfiprintf_internal_r+0x13a4>
 c008aa4:	1021883a 	mov	r16,r2
 c008aa8:	8029883a 	mov	r20,r16
 c008aac:	8027883a 	mov	r19,r16
 c008ab0:	80002216 	blt	r16,zero,c008b3c <___vfiprintf_internal_r+0x1438>
 c008ab4:	05c30074 	movhi	r23,3073
 c008ab8:	df002215 	stw	fp,136(sp)
 c008abc:	bdc09504 	addi	r23,r23,596
 c008ac0:	003cfb06 	br	c007eb0 <__alt_data_end+0xfc007eb0>
 c008ac4:	d9002217 	ldw	r4,136(sp)
 c008ac8:	d9402417 	ldw	r5,144(sp)
 c008acc:	20800017 	ldw	r2,0(r4)
 c008ad0:	21000104 	addi	r4,r4,4
 c008ad4:	d9002215 	stw	r4,136(sp)
 c008ad8:	11400015 	stw	r5,0(r2)
 c008adc:	003b3d06 	br	c0077d4 <__alt_data_end+0xfc0077d4>
 c008ae0:	01430074 	movhi	r5,3073
 c008ae4:	2940f504 	addi	r5,r5,980
 c008ae8:	d9402315 	stw	r5,140(sp)
 c008aec:	d9401b17 	ldw	r5,108(sp)
 c008af0:	29400044 	addi	r5,r5,1
 c008af4:	003e6d06 	br	c0084ac <__alt_data_end+0xfc0084ac>
 c008af8:	8029883a 	mov	r20,r16
 c008afc:	dd401d83 	ldbu	r21,118(sp)
 c008b00:	df002215 	stw	fp,136(sp)
 c008b04:	0021883a 	mov	r16,zero
 c008b08:	003c0106 	br	c007b10 <__alt_data_end+0xfc007b10>
 c008b0c:	00c30074 	movhi	r3,3073
 c008b10:	18c0f104 	addi	r3,r3,964
 c008b14:	d8c02315 	stw	r3,140(sp)
 c008b18:	280d883a 	mov	r6,r5
 c008b1c:	003c6906 	br	c007cc4 <__alt_data_end+0xfc007cc4>
 c008b20:	802d883a 	mov	r22,r16
 c008b24:	0021883a 	mov	r16,zero
 c008b28:	003b5406 	br	c00787c <__alt_data_end+0xfc00787c>
 c008b2c:	1823883a 	mov	r17,r3
 c008b30:	003cf306 	br	c007f00 <__alt_data_end+0xfc007f00>
 c008b34:	1823883a 	mov	r17,r3
 c008b38:	003cad06 	br	c007df0 <__alt_data_end+0xfc007df0>
 c008b3c:	0027883a 	mov	r19,zero
 c008b40:	003fdc06 	br	c008ab4 <__alt_data_end+0xfc008ab4>
 c008b44:	d9402217 	ldw	r5,136(sp)
 c008b48:	8005883a 	mov	r2,r16
 c008b4c:	b0c00043 	ldbu	r3,1(r22)
 c008b50:	2c000017 	ldw	r16,0(r5)
 c008b54:	29000104 	addi	r4,r5,4
 c008b58:	d9002215 	stw	r4,136(sp)
 c008b5c:	102d883a 	mov	r22,r2
 c008b60:	803fa50e 	bge	r16,zero,c0089f8 <__alt_data_end+0xfc0089f8>
 c008b64:	18c03fcc 	andi	r3,r3,255
 c008b68:	18c0201c 	xori	r3,r3,128
 c008b6c:	043fffc4 	movi	r16,-1
 c008b70:	18ffe004 	addi	r3,r3,-128
 c008b74:	003b4006 	br	c007878 <__alt_data_end+0xfc007878>
 c008b78:	d9402303 	ldbu	r5,140(sp)
 c008b7c:	d9401d85 	stb	r5,118(sp)
 c008b80:	003cae06 	br	c007e3c <__alt_data_end+0xfc007e3c>
 c008b84:	d8c02303 	ldbu	r3,140(sp)
 c008b88:	d8c01d85 	stb	r3,118(sp)
 c008b8c:	003d1406 	br	c007fe0 <__alt_data_end+0xfc007fe0>
 c008b90:	d8c02303 	ldbu	r3,140(sp)
 c008b94:	d8c01d85 	stb	r3,118(sp)
 c008b98:	003cca06 	br	c007ec4 <__alt_data_end+0xfc007ec4>
 c008b9c:	8880004c 	andi	r2,r17,1
 c008ba0:	002b883a 	mov	r21,zero
 c008ba4:	10000526 	beq	r2,zero,c008bbc <___vfiprintf_internal_r+0x14b8>
 c008ba8:	00800c04 	movi	r2,48
 c008bac:	d88019c5 	stb	r2,103(sp)
 c008bb0:	dd002817 	ldw	r20,160(sp)
 c008bb4:	ddc019c4 	addi	r23,sp,103
 c008bb8:	003bd506 	br	c007b10 <__alt_data_end+0xfc007b10>
 c008bbc:	0029883a 	mov	r20,zero
 c008bc0:	ddc01a04 	addi	r23,sp,104
 c008bc4:	003bd206 	br	c007b10 <__alt_data_end+0xfc007b10>
 c008bc8:	d9002303 	ldbu	r4,140(sp)
 c008bcc:	d9001d85 	stb	r4,118(sp)
 c008bd0:	003da606 	br	c00826c <__alt_data_end+0xfc00826c>
 c008bd4:	d8c02303 	ldbu	r3,140(sp)
 c008bd8:	d8c01d85 	stb	r3,118(sp)
 c008bdc:	003c7606 	br	c007db8 <__alt_data_end+0xfc007db8>
 c008be0:	d8c02303 	ldbu	r3,140(sp)
 c008be4:	d8c01d85 	stb	r3,118(sp)
 c008be8:	003c6506 	br	c007d80 <__alt_data_end+0xfc007d80>
 c008bec:	d9002303 	ldbu	r4,140(sp)
 c008bf0:	d9001d85 	stb	r4,118(sp)
 c008bf4:	003d3d06 	br	c0080ec <__alt_data_end+0xfc0080ec>
 c008bf8:	d8c02303 	ldbu	r3,140(sp)
 c008bfc:	d8c01d85 	stb	r3,118(sp)
 c008c00:	003d1d06 	br	c008078 <__alt_data_end+0xfc008078>
 c008c04:	d8c02303 	ldbu	r3,140(sp)
 c008c08:	d8c01d85 	stb	r3,118(sp)
 c008c0c:	003d0306 	br	c00801c <__alt_data_end+0xfc00801c>

0c008c10 <__vfiprintf_internal>:
 c008c10:	00830074 	movhi	r2,3073
 c008c14:	1087f404 	addi	r2,r2,8144
 c008c18:	300f883a 	mov	r7,r6
 c008c1c:	280d883a 	mov	r6,r5
 c008c20:	200b883a 	mov	r5,r4
 c008c24:	11000017 	ldw	r4,0(r2)
 c008c28:	c0077041 	jmpi	c007704 <___vfiprintf_internal_r>

0c008c2c <__sbprintf>:
 c008c2c:	2880030b 	ldhu	r2,12(r5)
 c008c30:	2ac01917 	ldw	r11,100(r5)
 c008c34:	2a80038b 	ldhu	r10,14(r5)
 c008c38:	2a400717 	ldw	r9,28(r5)
 c008c3c:	2a000917 	ldw	r8,36(r5)
 c008c40:	defee204 	addi	sp,sp,-1144
 c008c44:	00c10004 	movi	r3,1024
 c008c48:	dc011a15 	stw	r16,1128(sp)
 c008c4c:	10bfff4c 	andi	r2,r2,65533
 c008c50:	2821883a 	mov	r16,r5
 c008c54:	d8cb883a 	add	r5,sp,r3
 c008c58:	dc811c15 	stw	r18,1136(sp)
 c008c5c:	dc411b15 	stw	r17,1132(sp)
 c008c60:	dfc11d15 	stw	ra,1140(sp)
 c008c64:	2025883a 	mov	r18,r4
 c008c68:	d881030d 	sth	r2,1036(sp)
 c008c6c:	dac11915 	stw	r11,1124(sp)
 c008c70:	da81038d 	sth	r10,1038(sp)
 c008c74:	da410715 	stw	r9,1052(sp)
 c008c78:	da010915 	stw	r8,1060(sp)
 c008c7c:	dec10015 	stw	sp,1024(sp)
 c008c80:	dec10415 	stw	sp,1040(sp)
 c008c84:	d8c10215 	stw	r3,1032(sp)
 c008c88:	d8c10515 	stw	r3,1044(sp)
 c008c8c:	d8010615 	stw	zero,1048(sp)
 c008c90:	c0077040 	call	c007704 <___vfiprintf_internal_r>
 c008c94:	1023883a 	mov	r17,r2
 c008c98:	10000416 	blt	r2,zero,c008cac <__sbprintf+0x80>
 c008c9c:	d9410004 	addi	r5,sp,1024
 c008ca0:	9009883a 	mov	r4,r18
 c008ca4:	c004b180 	call	c004b18 <_fflush_r>
 c008ca8:	10000d1e 	bne	r2,zero,c008ce0 <__sbprintf+0xb4>
 c008cac:	d881030b 	ldhu	r2,1036(sp)
 c008cb0:	1080100c 	andi	r2,r2,64
 c008cb4:	10000326 	beq	r2,zero,c008cc4 <__sbprintf+0x98>
 c008cb8:	8080030b 	ldhu	r2,12(r16)
 c008cbc:	10801014 	ori	r2,r2,64
 c008cc0:	8080030d 	sth	r2,12(r16)
 c008cc4:	8805883a 	mov	r2,r17
 c008cc8:	dfc11d17 	ldw	ra,1140(sp)
 c008ccc:	dc811c17 	ldw	r18,1136(sp)
 c008cd0:	dc411b17 	ldw	r17,1132(sp)
 c008cd4:	dc011a17 	ldw	r16,1128(sp)
 c008cd8:	dec11e04 	addi	sp,sp,1144
 c008cdc:	f800283a 	ret
 c008ce0:	047fffc4 	movi	r17,-1
 c008ce4:	003ff106 	br	c008cac <__alt_data_end+0xfc008cac>

0c008ce8 <_write_r>:
 c008ce8:	defffd04 	addi	sp,sp,-12
 c008cec:	2805883a 	mov	r2,r5
 c008cf0:	dc000015 	stw	r16,0(sp)
 c008cf4:	04030074 	movhi	r16,3073
 c008cf8:	dc400115 	stw	r17,4(sp)
 c008cfc:	300b883a 	mov	r5,r6
 c008d00:	840ec604 	addi	r16,r16,15128
 c008d04:	2023883a 	mov	r17,r4
 c008d08:	380d883a 	mov	r6,r7
 c008d0c:	1009883a 	mov	r4,r2
 c008d10:	dfc00215 	stw	ra,8(sp)
 c008d14:	80000015 	stw	zero,0(r16)
 c008d18:	c00e0980 	call	c00e098 <write>
 c008d1c:	00ffffc4 	movi	r3,-1
 c008d20:	10c00526 	beq	r2,r3,c008d38 <_write_r+0x50>
 c008d24:	dfc00217 	ldw	ra,8(sp)
 c008d28:	dc400117 	ldw	r17,4(sp)
 c008d2c:	dc000017 	ldw	r16,0(sp)
 c008d30:	dec00304 	addi	sp,sp,12
 c008d34:	f800283a 	ret
 c008d38:	80c00017 	ldw	r3,0(r16)
 c008d3c:	183ff926 	beq	r3,zero,c008d24 <__alt_data_end+0xfc008d24>
 c008d40:	88c00015 	stw	r3,0(r17)
 c008d44:	003ff706 	br	c008d24 <__alt_data_end+0xfc008d24>

0c008d48 <_close_r>:
 c008d48:	defffd04 	addi	sp,sp,-12
 c008d4c:	dc000015 	stw	r16,0(sp)
 c008d50:	04030074 	movhi	r16,3073
 c008d54:	dc400115 	stw	r17,4(sp)
 c008d58:	840ec604 	addi	r16,r16,15128
 c008d5c:	2023883a 	mov	r17,r4
 c008d60:	2809883a 	mov	r4,r5
 c008d64:	dfc00215 	stw	ra,8(sp)
 c008d68:	80000015 	stw	zero,0(r16)
 c008d6c:	c00d8100 	call	c00d810 <close>
 c008d70:	00ffffc4 	movi	r3,-1
 c008d74:	10c00526 	beq	r2,r3,c008d8c <_close_r+0x44>
 c008d78:	dfc00217 	ldw	ra,8(sp)
 c008d7c:	dc400117 	ldw	r17,4(sp)
 c008d80:	dc000017 	ldw	r16,0(sp)
 c008d84:	dec00304 	addi	sp,sp,12
 c008d88:	f800283a 	ret
 c008d8c:	80c00017 	ldw	r3,0(r16)
 c008d90:	183ff926 	beq	r3,zero,c008d78 <__alt_data_end+0xfc008d78>
 c008d94:	88c00015 	stw	r3,0(r17)
 c008d98:	003ff706 	br	c008d78 <__alt_data_end+0xfc008d78>

0c008d9c <_calloc_r>:
 c008d9c:	defffe04 	addi	sp,sp,-8
 c008da0:	2805883a 	mov	r2,r5
 c008da4:	dc000015 	stw	r16,0(sp)
 c008da8:	300b883a 	mov	r5,r6
 c008dac:	2021883a 	mov	r16,r4
 c008db0:	1009883a 	mov	r4,r2
 c008db4:	dfc00115 	stw	ra,4(sp)
 c008db8:	c0009680 	call	c000968 <__mulsi3>
 c008dbc:	100b883a 	mov	r5,r2
 c008dc0:	8009883a 	mov	r4,r16
 c008dc4:	c0057a80 	call	c0057a8 <_malloc_r>
 c008dc8:	10002926 	beq	r2,zero,c008e70 <_calloc_r+0xd4>
 c008dcc:	11bfff17 	ldw	r6,-4(r2)
 c008dd0:	1021883a 	mov	r16,r2
 c008dd4:	00bfff04 	movi	r2,-4
 c008dd8:	308c703a 	and	r6,r6,r2
 c008ddc:	00c00904 	movi	r3,36
 c008de0:	308d883a 	add	r6,r6,r2
 c008de4:	19801636 	bltu	r3,r6,c008e40 <_calloc_r+0xa4>
 c008de8:	008004c4 	movi	r2,19
 c008dec:	11800b2e 	bgeu	r2,r6,c008e1c <_calloc_r+0x80>
 c008df0:	80000015 	stw	zero,0(r16)
 c008df4:	80000115 	stw	zero,4(r16)
 c008df8:	008006c4 	movi	r2,27
 c008dfc:	11801a2e 	bgeu	r2,r6,c008e68 <_calloc_r+0xcc>
 c008e00:	80000215 	stw	zero,8(r16)
 c008e04:	80000315 	stw	zero,12(r16)
 c008e08:	30c0151e 	bne	r6,r3,c008e60 <_calloc_r+0xc4>
 c008e0c:	80000415 	stw	zero,16(r16)
 c008e10:	80800604 	addi	r2,r16,24
 c008e14:	80000515 	stw	zero,20(r16)
 c008e18:	00000106 	br	c008e20 <_calloc_r+0x84>
 c008e1c:	8005883a 	mov	r2,r16
 c008e20:	10000015 	stw	zero,0(r2)
 c008e24:	10000115 	stw	zero,4(r2)
 c008e28:	10000215 	stw	zero,8(r2)
 c008e2c:	8005883a 	mov	r2,r16
 c008e30:	dfc00117 	ldw	ra,4(sp)
 c008e34:	dc000017 	ldw	r16,0(sp)
 c008e38:	dec00204 	addi	sp,sp,8
 c008e3c:	f800283a 	ret
 c008e40:	000b883a 	mov	r5,zero
 c008e44:	8009883a 	mov	r4,r16
 c008e48:	c0060980 	call	c006098 <memset>
 c008e4c:	8005883a 	mov	r2,r16
 c008e50:	dfc00117 	ldw	ra,4(sp)
 c008e54:	dc000017 	ldw	r16,0(sp)
 c008e58:	dec00204 	addi	sp,sp,8
 c008e5c:	f800283a 	ret
 c008e60:	80800404 	addi	r2,r16,16
 c008e64:	003fee06 	br	c008e20 <__alt_data_end+0xfc008e20>
 c008e68:	80800204 	addi	r2,r16,8
 c008e6c:	003fec06 	br	c008e20 <__alt_data_end+0xfc008e20>
 c008e70:	0005883a 	mov	r2,zero
 c008e74:	003fee06 	br	c008e30 <__alt_data_end+0xfc008e30>

0c008e78 <_fclose_r>:
 c008e78:	28003926 	beq	r5,zero,c008f60 <_fclose_r+0xe8>
 c008e7c:	defffc04 	addi	sp,sp,-16
 c008e80:	dc400115 	stw	r17,4(sp)
 c008e84:	dc000015 	stw	r16,0(sp)
 c008e88:	dfc00315 	stw	ra,12(sp)
 c008e8c:	dc800215 	stw	r18,8(sp)
 c008e90:	2023883a 	mov	r17,r4
 c008e94:	2821883a 	mov	r16,r5
 c008e98:	20000226 	beq	r4,zero,c008ea4 <_fclose_r+0x2c>
 c008e9c:	20800e17 	ldw	r2,56(r4)
 c008ea0:	10002726 	beq	r2,zero,c008f40 <_fclose_r+0xc8>
 c008ea4:	8080030f 	ldh	r2,12(r16)
 c008ea8:	1000071e 	bne	r2,zero,c008ec8 <_fclose_r+0x50>
 c008eac:	0005883a 	mov	r2,zero
 c008eb0:	dfc00317 	ldw	ra,12(sp)
 c008eb4:	dc800217 	ldw	r18,8(sp)
 c008eb8:	dc400117 	ldw	r17,4(sp)
 c008ebc:	dc000017 	ldw	r16,0(sp)
 c008ec0:	dec00404 	addi	sp,sp,16
 c008ec4:	f800283a 	ret
 c008ec8:	800b883a 	mov	r5,r16
 c008ecc:	8809883a 	mov	r4,r17
 c008ed0:	c0048fc0 	call	c0048fc <__sflush_r>
 c008ed4:	1025883a 	mov	r18,r2
 c008ed8:	80800b17 	ldw	r2,44(r16)
 c008edc:	10000426 	beq	r2,zero,c008ef0 <_fclose_r+0x78>
 c008ee0:	81400717 	ldw	r5,28(r16)
 c008ee4:	8809883a 	mov	r4,r17
 c008ee8:	103ee83a 	callr	r2
 c008eec:	10001616 	blt	r2,zero,c008f48 <_fclose_r+0xd0>
 c008ef0:	8080030b 	ldhu	r2,12(r16)
 c008ef4:	1080200c 	andi	r2,r2,128
 c008ef8:	1000151e 	bne	r2,zero,c008f50 <_fclose_r+0xd8>
 c008efc:	81400c17 	ldw	r5,48(r16)
 c008f00:	28000526 	beq	r5,zero,c008f18 <_fclose_r+0xa0>
 c008f04:	80801004 	addi	r2,r16,64
 c008f08:	28800226 	beq	r5,r2,c008f14 <_fclose_r+0x9c>
 c008f0c:	8809883a 	mov	r4,r17
 c008f10:	c0050780 	call	c005078 <_free_r>
 c008f14:	80000c15 	stw	zero,48(r16)
 c008f18:	81401117 	ldw	r5,68(r16)
 c008f1c:	28000326 	beq	r5,zero,c008f2c <_fclose_r+0xb4>
 c008f20:	8809883a 	mov	r4,r17
 c008f24:	c0050780 	call	c005078 <_free_r>
 c008f28:	80001115 	stw	zero,68(r16)
 c008f2c:	c004f140 	call	c004f14 <__sfp_lock_acquire>
 c008f30:	8000030d 	sth	zero,12(r16)
 c008f34:	c004f180 	call	c004f18 <__sfp_lock_release>
 c008f38:	9005883a 	mov	r2,r18
 c008f3c:	003fdc06 	br	c008eb0 <__alt_data_end+0xfc008eb0>
 c008f40:	c004f040 	call	c004f04 <__sinit>
 c008f44:	003fd706 	br	c008ea4 <__alt_data_end+0xfc008ea4>
 c008f48:	04bfffc4 	movi	r18,-1
 c008f4c:	003fe806 	br	c008ef0 <__alt_data_end+0xfc008ef0>
 c008f50:	81400417 	ldw	r5,16(r16)
 c008f54:	8809883a 	mov	r4,r17
 c008f58:	c0050780 	call	c005078 <_free_r>
 c008f5c:	003fe706 	br	c008efc <__alt_data_end+0xfc008efc>
 c008f60:	0005883a 	mov	r2,zero
 c008f64:	f800283a 	ret

0c008f68 <fclose>:
 c008f68:	00830074 	movhi	r2,3073
 c008f6c:	1087f404 	addi	r2,r2,8144
 c008f70:	200b883a 	mov	r5,r4
 c008f74:	11000017 	ldw	r4,0(r2)
 c008f78:	c008e781 	jmpi	c008e78 <_fclose_r>

0c008f7c <__fputwc>:
 c008f7c:	defff804 	addi	sp,sp,-32
 c008f80:	dcc00415 	stw	r19,16(sp)
 c008f84:	dc800315 	stw	r18,12(sp)
 c008f88:	dc000115 	stw	r16,4(sp)
 c008f8c:	dfc00715 	stw	ra,28(sp)
 c008f90:	dd400615 	stw	r21,24(sp)
 c008f94:	dd000515 	stw	r20,20(sp)
 c008f98:	dc400215 	stw	r17,8(sp)
 c008f9c:	2027883a 	mov	r19,r4
 c008fa0:	2825883a 	mov	r18,r5
 c008fa4:	3021883a 	mov	r16,r6
 c008fa8:	c0055980 	call	c005598 <__locale_mb_cur_max>
 c008fac:	00c00044 	movi	r3,1
 c008fb0:	10c03e26 	beq	r2,r3,c0090ac <__fputwc+0x130>
 c008fb4:	81c01704 	addi	r7,r16,92
 c008fb8:	900d883a 	mov	r6,r18
 c008fbc:	d80b883a 	mov	r5,sp
 c008fc0:	9809883a 	mov	r4,r19
 c008fc4:	c009fd40 	call	c009fd4 <_wcrtomb_r>
 c008fc8:	1029883a 	mov	r20,r2
 c008fcc:	00bfffc4 	movi	r2,-1
 c008fd0:	a0802026 	beq	r20,r2,c009054 <__fputwc+0xd8>
 c008fd4:	d9400003 	ldbu	r5,0(sp)
 c008fd8:	a0001c26 	beq	r20,zero,c00904c <__fputwc+0xd0>
 c008fdc:	0023883a 	mov	r17,zero
 c008fe0:	05400284 	movi	r21,10
 c008fe4:	00000906 	br	c00900c <__fputwc+0x90>
 c008fe8:	80800017 	ldw	r2,0(r16)
 c008fec:	11400005 	stb	r5,0(r2)
 c008ff0:	80c00017 	ldw	r3,0(r16)
 c008ff4:	18c00044 	addi	r3,r3,1
 c008ff8:	80c00015 	stw	r3,0(r16)
 c008ffc:	8c400044 	addi	r17,r17,1
 c009000:	dc45883a 	add	r2,sp,r17
 c009004:	8d00112e 	bgeu	r17,r20,c00904c <__fputwc+0xd0>
 c009008:	11400003 	ldbu	r5,0(r2)
 c00900c:	80c00217 	ldw	r3,8(r16)
 c009010:	18ffffc4 	addi	r3,r3,-1
 c009014:	80c00215 	stw	r3,8(r16)
 c009018:	183ff30e 	bge	r3,zero,c008fe8 <__alt_data_end+0xfc008fe8>
 c00901c:	80800617 	ldw	r2,24(r16)
 c009020:	18801916 	blt	r3,r2,c009088 <__fputwc+0x10c>
 c009024:	80800017 	ldw	r2,0(r16)
 c009028:	11400005 	stb	r5,0(r2)
 c00902c:	80800017 	ldw	r2,0(r16)
 c009030:	10c00003 	ldbu	r3,0(r2)
 c009034:	10800044 	addi	r2,r2,1
 c009038:	1d402326 	beq	r3,r21,c0090c8 <__fputwc+0x14c>
 c00903c:	80800015 	stw	r2,0(r16)
 c009040:	8c400044 	addi	r17,r17,1
 c009044:	dc45883a 	add	r2,sp,r17
 c009048:	8d3fef36 	bltu	r17,r20,c009008 <__alt_data_end+0xfc009008>
 c00904c:	9005883a 	mov	r2,r18
 c009050:	00000406 	br	c009064 <__fputwc+0xe8>
 c009054:	80c0030b 	ldhu	r3,12(r16)
 c009058:	a005883a 	mov	r2,r20
 c00905c:	18c01014 	ori	r3,r3,64
 c009060:	80c0030d 	sth	r3,12(r16)
 c009064:	dfc00717 	ldw	ra,28(sp)
 c009068:	dd400617 	ldw	r21,24(sp)
 c00906c:	dd000517 	ldw	r20,20(sp)
 c009070:	dcc00417 	ldw	r19,16(sp)
 c009074:	dc800317 	ldw	r18,12(sp)
 c009078:	dc400217 	ldw	r17,8(sp)
 c00907c:	dc000117 	ldw	r16,4(sp)
 c009080:	dec00804 	addi	sp,sp,32
 c009084:	f800283a 	ret
 c009088:	800d883a 	mov	r6,r16
 c00908c:	29403fcc 	andi	r5,r5,255
 c009090:	9809883a 	mov	r4,r19
 c009094:	c009e7c0 	call	c009e7c <__swbuf_r>
 c009098:	10bfffe0 	cmpeqi	r2,r2,-1
 c00909c:	10803fcc 	andi	r2,r2,255
 c0090a0:	103fd626 	beq	r2,zero,c008ffc <__alt_data_end+0xfc008ffc>
 c0090a4:	00bfffc4 	movi	r2,-1
 c0090a8:	003fee06 	br	c009064 <__alt_data_end+0xfc009064>
 c0090ac:	90ffffc4 	addi	r3,r18,-1
 c0090b0:	01003f84 	movi	r4,254
 c0090b4:	20ffbf36 	bltu	r4,r3,c008fb4 <__alt_data_end+0xfc008fb4>
 c0090b8:	900b883a 	mov	r5,r18
 c0090bc:	dc800005 	stb	r18,0(sp)
 c0090c0:	1029883a 	mov	r20,r2
 c0090c4:	003fc506 	br	c008fdc <__alt_data_end+0xfc008fdc>
 c0090c8:	800d883a 	mov	r6,r16
 c0090cc:	a80b883a 	mov	r5,r21
 c0090d0:	9809883a 	mov	r4,r19
 c0090d4:	c009e7c0 	call	c009e7c <__swbuf_r>
 c0090d8:	10bfffe0 	cmpeqi	r2,r2,-1
 c0090dc:	003fef06 	br	c00909c <__alt_data_end+0xfc00909c>

0c0090e0 <_fputwc_r>:
 c0090e0:	3080030b 	ldhu	r2,12(r6)
 c0090e4:	10c8000c 	andi	r3,r2,8192
 c0090e8:	1800051e 	bne	r3,zero,c009100 <_fputwc_r+0x20>
 c0090ec:	30c01917 	ldw	r3,100(r6)
 c0090f0:	10880014 	ori	r2,r2,8192
 c0090f4:	3080030d 	sth	r2,12(r6)
 c0090f8:	18880014 	ori	r2,r3,8192
 c0090fc:	30801915 	stw	r2,100(r6)
 c009100:	c008f7c1 	jmpi	c008f7c <__fputwc>

0c009104 <fputwc>:
 c009104:	00830074 	movhi	r2,3073
 c009108:	defffc04 	addi	sp,sp,-16
 c00910c:	1087f404 	addi	r2,r2,8144
 c009110:	dc000115 	stw	r16,4(sp)
 c009114:	14000017 	ldw	r16,0(r2)
 c009118:	dc400215 	stw	r17,8(sp)
 c00911c:	dfc00315 	stw	ra,12(sp)
 c009120:	2023883a 	mov	r17,r4
 c009124:	80000226 	beq	r16,zero,c009130 <fputwc+0x2c>
 c009128:	80800e17 	ldw	r2,56(r16)
 c00912c:	10001026 	beq	r2,zero,c009170 <fputwc+0x6c>
 c009130:	2880030b 	ldhu	r2,12(r5)
 c009134:	10c8000c 	andi	r3,r2,8192
 c009138:	1800051e 	bne	r3,zero,c009150 <fputwc+0x4c>
 c00913c:	28c01917 	ldw	r3,100(r5)
 c009140:	10880014 	ori	r2,r2,8192
 c009144:	2880030d 	sth	r2,12(r5)
 c009148:	18880014 	ori	r2,r3,8192
 c00914c:	28801915 	stw	r2,100(r5)
 c009150:	280d883a 	mov	r6,r5
 c009154:	8009883a 	mov	r4,r16
 c009158:	880b883a 	mov	r5,r17
 c00915c:	dfc00317 	ldw	ra,12(sp)
 c009160:	dc400217 	ldw	r17,8(sp)
 c009164:	dc000117 	ldw	r16,4(sp)
 c009168:	dec00404 	addi	sp,sp,16
 c00916c:	c008f7c1 	jmpi	c008f7c <__fputwc>
 c009170:	8009883a 	mov	r4,r16
 c009174:	d9400015 	stw	r5,0(sp)
 c009178:	c004f040 	call	c004f04 <__sinit>
 c00917c:	d9400017 	ldw	r5,0(sp)
 c009180:	003feb06 	br	c009130 <__alt_data_end+0xfc009130>

0c009184 <_fstat_r>:
 c009184:	defffd04 	addi	sp,sp,-12
 c009188:	2805883a 	mov	r2,r5
 c00918c:	dc000015 	stw	r16,0(sp)
 c009190:	04030074 	movhi	r16,3073
 c009194:	dc400115 	stw	r17,4(sp)
 c009198:	840ec604 	addi	r16,r16,15128
 c00919c:	2023883a 	mov	r17,r4
 c0091a0:	300b883a 	mov	r5,r6
 c0091a4:	1009883a 	mov	r4,r2
 c0091a8:	dfc00215 	stw	ra,8(sp)
 c0091ac:	80000015 	stw	zero,0(r16)
 c0091b0:	c00d9500 	call	c00d950 <fstat>
 c0091b4:	00ffffc4 	movi	r3,-1
 c0091b8:	10c00526 	beq	r2,r3,c0091d0 <_fstat_r+0x4c>
 c0091bc:	dfc00217 	ldw	ra,8(sp)
 c0091c0:	dc400117 	ldw	r17,4(sp)
 c0091c4:	dc000017 	ldw	r16,0(sp)
 c0091c8:	dec00304 	addi	sp,sp,12
 c0091cc:	f800283a 	ret
 c0091d0:	80c00017 	ldw	r3,0(r16)
 c0091d4:	183ff926 	beq	r3,zero,c0091bc <__alt_data_end+0xfc0091bc>
 c0091d8:	88c00015 	stw	r3,0(r17)
 c0091dc:	003ff706 	br	c0091bc <__alt_data_end+0xfc0091bc>

0c0091e0 <__sfvwrite_r>:
 c0091e0:	30800217 	ldw	r2,8(r6)
 c0091e4:	10006726 	beq	r2,zero,c009384 <__sfvwrite_r+0x1a4>
 c0091e8:	28c0030b 	ldhu	r3,12(r5)
 c0091ec:	defff404 	addi	sp,sp,-48
 c0091f0:	dd400715 	stw	r21,28(sp)
 c0091f4:	dd000615 	stw	r20,24(sp)
 c0091f8:	dc000215 	stw	r16,8(sp)
 c0091fc:	dfc00b15 	stw	ra,44(sp)
 c009200:	df000a15 	stw	fp,40(sp)
 c009204:	ddc00915 	stw	r23,36(sp)
 c009208:	dd800815 	stw	r22,32(sp)
 c00920c:	dcc00515 	stw	r19,20(sp)
 c009210:	dc800415 	stw	r18,16(sp)
 c009214:	dc400315 	stw	r17,12(sp)
 c009218:	1880020c 	andi	r2,r3,8
 c00921c:	2821883a 	mov	r16,r5
 c009220:	202b883a 	mov	r21,r4
 c009224:	3029883a 	mov	r20,r6
 c009228:	10002726 	beq	r2,zero,c0092c8 <__sfvwrite_r+0xe8>
 c00922c:	28800417 	ldw	r2,16(r5)
 c009230:	10002526 	beq	r2,zero,c0092c8 <__sfvwrite_r+0xe8>
 c009234:	1880008c 	andi	r2,r3,2
 c009238:	a4400017 	ldw	r17,0(r20)
 c00923c:	10002a26 	beq	r2,zero,c0092e8 <__sfvwrite_r+0x108>
 c009240:	05a00034 	movhi	r22,32768
 c009244:	0027883a 	mov	r19,zero
 c009248:	0025883a 	mov	r18,zero
 c00924c:	b5bf0004 	addi	r22,r22,-1024
 c009250:	980d883a 	mov	r6,r19
 c009254:	a809883a 	mov	r4,r21
 c009258:	90004626 	beq	r18,zero,c009374 <__sfvwrite_r+0x194>
 c00925c:	900f883a 	mov	r7,r18
 c009260:	b480022e 	bgeu	r22,r18,c00926c <__sfvwrite_r+0x8c>
 c009264:	01e00034 	movhi	r7,32768
 c009268:	39ff0004 	addi	r7,r7,-1024
 c00926c:	80800917 	ldw	r2,36(r16)
 c009270:	81400717 	ldw	r5,28(r16)
 c009274:	103ee83a 	callr	r2
 c009278:	00805a0e 	bge	zero,r2,c0093e4 <__sfvwrite_r+0x204>
 c00927c:	a0c00217 	ldw	r3,8(r20)
 c009280:	98a7883a 	add	r19,r19,r2
 c009284:	90a5c83a 	sub	r18,r18,r2
 c009288:	1885c83a 	sub	r2,r3,r2
 c00928c:	a0800215 	stw	r2,8(r20)
 c009290:	103fef1e 	bne	r2,zero,c009250 <__alt_data_end+0xfc009250>
 c009294:	0005883a 	mov	r2,zero
 c009298:	dfc00b17 	ldw	ra,44(sp)
 c00929c:	df000a17 	ldw	fp,40(sp)
 c0092a0:	ddc00917 	ldw	r23,36(sp)
 c0092a4:	dd800817 	ldw	r22,32(sp)
 c0092a8:	dd400717 	ldw	r21,28(sp)
 c0092ac:	dd000617 	ldw	r20,24(sp)
 c0092b0:	dcc00517 	ldw	r19,20(sp)
 c0092b4:	dc800417 	ldw	r18,16(sp)
 c0092b8:	dc400317 	ldw	r17,12(sp)
 c0092bc:	dc000217 	ldw	r16,8(sp)
 c0092c0:	dec00c04 	addi	sp,sp,48
 c0092c4:	f800283a 	ret
 c0092c8:	800b883a 	mov	r5,r16
 c0092cc:	a809883a 	mov	r4,r21
 c0092d0:	c002ef80 	call	c002ef8 <__swsetup_r>
 c0092d4:	1000ee1e 	bne	r2,zero,c009690 <__sfvwrite_r+0x4b0>
 c0092d8:	80c0030b 	ldhu	r3,12(r16)
 c0092dc:	a4400017 	ldw	r17,0(r20)
 c0092e0:	1880008c 	andi	r2,r3,2
 c0092e4:	103fd61e 	bne	r2,zero,c009240 <__alt_data_end+0xfc009240>
 c0092e8:	1880004c 	andi	r2,r3,1
 c0092ec:	1000421e 	bne	r2,zero,c0093f8 <__sfvwrite_r+0x218>
 c0092f0:	0039883a 	mov	fp,zero
 c0092f4:	0025883a 	mov	r18,zero
 c0092f8:	90001a26 	beq	r18,zero,c009364 <__sfvwrite_r+0x184>
 c0092fc:	1880800c 	andi	r2,r3,512
 c009300:	84c00217 	ldw	r19,8(r16)
 c009304:	10002126 	beq	r2,zero,c00938c <__sfvwrite_r+0x1ac>
 c009308:	982f883a 	mov	r23,r19
 c00930c:	94c09636 	bltu	r18,r19,c009568 <__sfvwrite_r+0x388>
 c009310:	1881200c 	andi	r2,r3,1152
 c009314:	1000a11e 	bne	r2,zero,c00959c <__sfvwrite_r+0x3bc>
 c009318:	81000017 	ldw	r4,0(r16)
 c00931c:	b80d883a 	mov	r6,r23
 c009320:	e00b883a 	mov	r5,fp
 c009324:	c00975c0 	call	c00975c <memmove>
 c009328:	80c00217 	ldw	r3,8(r16)
 c00932c:	81000017 	ldw	r4,0(r16)
 c009330:	9005883a 	mov	r2,r18
 c009334:	1ce7c83a 	sub	r19,r3,r19
 c009338:	25cf883a 	add	r7,r4,r23
 c00933c:	84c00215 	stw	r19,8(r16)
 c009340:	81c00015 	stw	r7,0(r16)
 c009344:	a0c00217 	ldw	r3,8(r20)
 c009348:	e0b9883a 	add	fp,fp,r2
 c00934c:	90a5c83a 	sub	r18,r18,r2
 c009350:	18a7c83a 	sub	r19,r3,r2
 c009354:	a4c00215 	stw	r19,8(r20)
 c009358:	983fce26 	beq	r19,zero,c009294 <__alt_data_end+0xfc009294>
 c00935c:	80c0030b 	ldhu	r3,12(r16)
 c009360:	903fe61e 	bne	r18,zero,c0092fc <__alt_data_end+0xfc0092fc>
 c009364:	8f000017 	ldw	fp,0(r17)
 c009368:	8c800117 	ldw	r18,4(r17)
 c00936c:	8c400204 	addi	r17,r17,8
 c009370:	003fe106 	br	c0092f8 <__alt_data_end+0xfc0092f8>
 c009374:	8cc00017 	ldw	r19,0(r17)
 c009378:	8c800117 	ldw	r18,4(r17)
 c00937c:	8c400204 	addi	r17,r17,8
 c009380:	003fb306 	br	c009250 <__alt_data_end+0xfc009250>
 c009384:	0005883a 	mov	r2,zero
 c009388:	f800283a 	ret
 c00938c:	81000017 	ldw	r4,0(r16)
 c009390:	80800417 	ldw	r2,16(r16)
 c009394:	11005a36 	bltu	r2,r4,c009500 <__sfvwrite_r+0x320>
 c009398:	85c00517 	ldw	r23,20(r16)
 c00939c:	95c05836 	bltu	r18,r23,c009500 <__sfvwrite_r+0x320>
 c0093a0:	00a00034 	movhi	r2,32768
 c0093a4:	10bfffc4 	addi	r2,r2,-1
 c0093a8:	9009883a 	mov	r4,r18
 c0093ac:	1480012e 	bgeu	r2,r18,c0093b4 <__sfvwrite_r+0x1d4>
 c0093b0:	1009883a 	mov	r4,r2
 c0093b4:	b80b883a 	mov	r5,r23
 c0093b8:	c00ad7c0 	call	c00ad7c <__divsi3>
 c0093bc:	b80b883a 	mov	r5,r23
 c0093c0:	1009883a 	mov	r4,r2
 c0093c4:	c0009680 	call	c000968 <__mulsi3>
 c0093c8:	81400717 	ldw	r5,28(r16)
 c0093cc:	80c00917 	ldw	r3,36(r16)
 c0093d0:	100f883a 	mov	r7,r2
 c0093d4:	e00d883a 	mov	r6,fp
 c0093d8:	a809883a 	mov	r4,r21
 c0093dc:	183ee83a 	callr	r3
 c0093e0:	00bfd816 	blt	zero,r2,c009344 <__alt_data_end+0xfc009344>
 c0093e4:	8080030b 	ldhu	r2,12(r16)
 c0093e8:	10801014 	ori	r2,r2,64
 c0093ec:	8080030d 	sth	r2,12(r16)
 c0093f0:	00bfffc4 	movi	r2,-1
 c0093f4:	003fa806 	br	c009298 <__alt_data_end+0xfc009298>
 c0093f8:	0027883a 	mov	r19,zero
 c0093fc:	0011883a 	mov	r8,zero
 c009400:	0039883a 	mov	fp,zero
 c009404:	0025883a 	mov	r18,zero
 c009408:	90001f26 	beq	r18,zero,c009488 <__sfvwrite_r+0x2a8>
 c00940c:	40005a26 	beq	r8,zero,c009578 <__sfvwrite_r+0x398>
 c009410:	982d883a 	mov	r22,r19
 c009414:	94c0012e 	bgeu	r18,r19,c00941c <__sfvwrite_r+0x23c>
 c009418:	902d883a 	mov	r22,r18
 c00941c:	81000017 	ldw	r4,0(r16)
 c009420:	80800417 	ldw	r2,16(r16)
 c009424:	b02f883a 	mov	r23,r22
 c009428:	81c00517 	ldw	r7,20(r16)
 c00942c:	1100032e 	bgeu	r2,r4,c00943c <__sfvwrite_r+0x25c>
 c009430:	80c00217 	ldw	r3,8(r16)
 c009434:	38c7883a 	add	r3,r7,r3
 c009438:	1d801816 	blt	r3,r22,c00949c <__sfvwrite_r+0x2bc>
 c00943c:	b1c03e16 	blt	r22,r7,c009538 <__sfvwrite_r+0x358>
 c009440:	80800917 	ldw	r2,36(r16)
 c009444:	81400717 	ldw	r5,28(r16)
 c009448:	e00d883a 	mov	r6,fp
 c00944c:	da000115 	stw	r8,4(sp)
 c009450:	a809883a 	mov	r4,r21
 c009454:	103ee83a 	callr	r2
 c009458:	102f883a 	mov	r23,r2
 c00945c:	da000117 	ldw	r8,4(sp)
 c009460:	00bfe00e 	bge	zero,r2,c0093e4 <__alt_data_end+0xfc0093e4>
 c009464:	9de7c83a 	sub	r19,r19,r23
 c009468:	98001f26 	beq	r19,zero,c0094e8 <__sfvwrite_r+0x308>
 c00946c:	a0800217 	ldw	r2,8(r20)
 c009470:	e5f9883a 	add	fp,fp,r23
 c009474:	95e5c83a 	sub	r18,r18,r23
 c009478:	15efc83a 	sub	r23,r2,r23
 c00947c:	a5c00215 	stw	r23,8(r20)
 c009480:	b83f8426 	beq	r23,zero,c009294 <__alt_data_end+0xfc009294>
 c009484:	903fe11e 	bne	r18,zero,c00940c <__alt_data_end+0xfc00940c>
 c009488:	8f000017 	ldw	fp,0(r17)
 c00948c:	8c800117 	ldw	r18,4(r17)
 c009490:	0011883a 	mov	r8,zero
 c009494:	8c400204 	addi	r17,r17,8
 c009498:	003fdb06 	br	c009408 <__alt_data_end+0xfc009408>
 c00949c:	180d883a 	mov	r6,r3
 c0094a0:	e00b883a 	mov	r5,fp
 c0094a4:	da000115 	stw	r8,4(sp)
 c0094a8:	d8c00015 	stw	r3,0(sp)
 c0094ac:	c00975c0 	call	c00975c <memmove>
 c0094b0:	d8c00017 	ldw	r3,0(sp)
 c0094b4:	80800017 	ldw	r2,0(r16)
 c0094b8:	800b883a 	mov	r5,r16
 c0094bc:	a809883a 	mov	r4,r21
 c0094c0:	10c5883a 	add	r2,r2,r3
 c0094c4:	80800015 	stw	r2,0(r16)
 c0094c8:	d8c00015 	stw	r3,0(sp)
 c0094cc:	c004b180 	call	c004b18 <_fflush_r>
 c0094d0:	d8c00017 	ldw	r3,0(sp)
 c0094d4:	da000117 	ldw	r8,4(sp)
 c0094d8:	103fc21e 	bne	r2,zero,c0093e4 <__alt_data_end+0xfc0093e4>
 c0094dc:	182f883a 	mov	r23,r3
 c0094e0:	9de7c83a 	sub	r19,r19,r23
 c0094e4:	983fe11e 	bne	r19,zero,c00946c <__alt_data_end+0xfc00946c>
 c0094e8:	800b883a 	mov	r5,r16
 c0094ec:	a809883a 	mov	r4,r21
 c0094f0:	c004b180 	call	c004b18 <_fflush_r>
 c0094f4:	103fbb1e 	bne	r2,zero,c0093e4 <__alt_data_end+0xfc0093e4>
 c0094f8:	0011883a 	mov	r8,zero
 c0094fc:	003fdb06 	br	c00946c <__alt_data_end+0xfc00946c>
 c009500:	94c0012e 	bgeu	r18,r19,c009508 <__sfvwrite_r+0x328>
 c009504:	9027883a 	mov	r19,r18
 c009508:	980d883a 	mov	r6,r19
 c00950c:	e00b883a 	mov	r5,fp
 c009510:	c00975c0 	call	c00975c <memmove>
 c009514:	80800217 	ldw	r2,8(r16)
 c009518:	80c00017 	ldw	r3,0(r16)
 c00951c:	14c5c83a 	sub	r2,r2,r19
 c009520:	1cc7883a 	add	r3,r3,r19
 c009524:	80800215 	stw	r2,8(r16)
 c009528:	80c00015 	stw	r3,0(r16)
 c00952c:	10004326 	beq	r2,zero,c00963c <__sfvwrite_r+0x45c>
 c009530:	9805883a 	mov	r2,r19
 c009534:	003f8306 	br	c009344 <__alt_data_end+0xfc009344>
 c009538:	b00d883a 	mov	r6,r22
 c00953c:	e00b883a 	mov	r5,fp
 c009540:	da000115 	stw	r8,4(sp)
 c009544:	c00975c0 	call	c00975c <memmove>
 c009548:	80800217 	ldw	r2,8(r16)
 c00954c:	80c00017 	ldw	r3,0(r16)
 c009550:	da000117 	ldw	r8,4(sp)
 c009554:	1585c83a 	sub	r2,r2,r22
 c009558:	1dad883a 	add	r22,r3,r22
 c00955c:	80800215 	stw	r2,8(r16)
 c009560:	85800015 	stw	r22,0(r16)
 c009564:	003fbf06 	br	c009464 <__alt_data_end+0xfc009464>
 c009568:	81000017 	ldw	r4,0(r16)
 c00956c:	9027883a 	mov	r19,r18
 c009570:	902f883a 	mov	r23,r18
 c009574:	003f6906 	br	c00931c <__alt_data_end+0xfc00931c>
 c009578:	900d883a 	mov	r6,r18
 c00957c:	01400284 	movi	r5,10
 c009580:	e009883a 	mov	r4,fp
 c009584:	c005fb40 	call	c005fb4 <memchr>
 c009588:	10003e26 	beq	r2,zero,c009684 <__sfvwrite_r+0x4a4>
 c00958c:	10800044 	addi	r2,r2,1
 c009590:	1727c83a 	sub	r19,r2,fp
 c009594:	02000044 	movi	r8,1
 c009598:	003f9d06 	br	c009410 <__alt_data_end+0xfc009410>
 c00959c:	80800517 	ldw	r2,20(r16)
 c0095a0:	81400417 	ldw	r5,16(r16)
 c0095a4:	81c00017 	ldw	r7,0(r16)
 c0095a8:	10a7883a 	add	r19,r2,r2
 c0095ac:	9885883a 	add	r2,r19,r2
 c0095b0:	1026d7fa 	srli	r19,r2,31
 c0095b4:	396dc83a 	sub	r22,r7,r5
 c0095b8:	b1000044 	addi	r4,r22,1
 c0095bc:	9885883a 	add	r2,r19,r2
 c0095c0:	1027d07a 	srai	r19,r2,1
 c0095c4:	2485883a 	add	r2,r4,r18
 c0095c8:	980d883a 	mov	r6,r19
 c0095cc:	9880022e 	bgeu	r19,r2,c0095d8 <__sfvwrite_r+0x3f8>
 c0095d0:	1027883a 	mov	r19,r2
 c0095d4:	100d883a 	mov	r6,r2
 c0095d8:	18c1000c 	andi	r3,r3,1024
 c0095dc:	18001c26 	beq	r3,zero,c009650 <__sfvwrite_r+0x470>
 c0095e0:	300b883a 	mov	r5,r6
 c0095e4:	a809883a 	mov	r4,r21
 c0095e8:	c0057a80 	call	c0057a8 <_malloc_r>
 c0095ec:	102f883a 	mov	r23,r2
 c0095f0:	10002926 	beq	r2,zero,c009698 <__sfvwrite_r+0x4b8>
 c0095f4:	81400417 	ldw	r5,16(r16)
 c0095f8:	b00d883a 	mov	r6,r22
 c0095fc:	1009883a 	mov	r4,r2
 c009600:	c0009900 	call	c000990 <memcpy>
 c009604:	8080030b 	ldhu	r2,12(r16)
 c009608:	00fedfc4 	movi	r3,-1153
 c00960c:	10c4703a 	and	r2,r2,r3
 c009610:	10802014 	ori	r2,r2,128
 c009614:	8080030d 	sth	r2,12(r16)
 c009618:	bd89883a 	add	r4,r23,r22
 c00961c:	9d8fc83a 	sub	r7,r19,r22
 c009620:	85c00415 	stw	r23,16(r16)
 c009624:	84c00515 	stw	r19,20(r16)
 c009628:	81000015 	stw	r4,0(r16)
 c00962c:	9027883a 	mov	r19,r18
 c009630:	81c00215 	stw	r7,8(r16)
 c009634:	902f883a 	mov	r23,r18
 c009638:	003f3806 	br	c00931c <__alt_data_end+0xfc00931c>
 c00963c:	800b883a 	mov	r5,r16
 c009640:	a809883a 	mov	r4,r21
 c009644:	c004b180 	call	c004b18 <_fflush_r>
 c009648:	103fb926 	beq	r2,zero,c009530 <__alt_data_end+0xfc009530>
 c00964c:	003f6506 	br	c0093e4 <__alt_data_end+0xfc0093e4>
 c009650:	a809883a 	mov	r4,r21
 c009654:	c0099180 	call	c009918 <_realloc_r>
 c009658:	102f883a 	mov	r23,r2
 c00965c:	103fee1e 	bne	r2,zero,c009618 <__alt_data_end+0xfc009618>
 c009660:	81400417 	ldw	r5,16(r16)
 c009664:	a809883a 	mov	r4,r21
 c009668:	c0050780 	call	c005078 <_free_r>
 c00966c:	8080030b 	ldhu	r2,12(r16)
 c009670:	00ffdfc4 	movi	r3,-129
 c009674:	1884703a 	and	r2,r3,r2
 c009678:	00c00304 	movi	r3,12
 c00967c:	a8c00015 	stw	r3,0(r21)
 c009680:	003f5906 	br	c0093e8 <__alt_data_end+0xfc0093e8>
 c009684:	94c00044 	addi	r19,r18,1
 c009688:	02000044 	movi	r8,1
 c00968c:	003f6006 	br	c009410 <__alt_data_end+0xfc009410>
 c009690:	00bfffc4 	movi	r2,-1
 c009694:	003f0006 	br	c009298 <__alt_data_end+0xfc009298>
 c009698:	00800304 	movi	r2,12
 c00969c:	a8800015 	stw	r2,0(r21)
 c0096a0:	8080030b 	ldhu	r2,12(r16)
 c0096a4:	003f5006 	br	c0093e8 <__alt_data_end+0xfc0093e8>

0c0096a8 <_isatty_r>:
 c0096a8:	defffd04 	addi	sp,sp,-12
 c0096ac:	dc000015 	stw	r16,0(sp)
 c0096b0:	04030074 	movhi	r16,3073
 c0096b4:	dc400115 	stw	r17,4(sp)
 c0096b8:	840ec604 	addi	r16,r16,15128
 c0096bc:	2023883a 	mov	r17,r4
 c0096c0:	2809883a 	mov	r4,r5
 c0096c4:	dfc00215 	stw	ra,8(sp)
 c0096c8:	80000015 	stw	zero,0(r16)
 c0096cc:	c00da440 	call	c00da44 <isatty>
 c0096d0:	00ffffc4 	movi	r3,-1
 c0096d4:	10c00526 	beq	r2,r3,c0096ec <_isatty_r+0x44>
 c0096d8:	dfc00217 	ldw	ra,8(sp)
 c0096dc:	dc400117 	ldw	r17,4(sp)
 c0096e0:	dc000017 	ldw	r16,0(sp)
 c0096e4:	dec00304 	addi	sp,sp,12
 c0096e8:	f800283a 	ret
 c0096ec:	80c00017 	ldw	r3,0(r16)
 c0096f0:	183ff926 	beq	r3,zero,c0096d8 <__alt_data_end+0xfc0096d8>
 c0096f4:	88c00015 	stw	r3,0(r17)
 c0096f8:	003ff706 	br	c0096d8 <__alt_data_end+0xfc0096d8>

0c0096fc <_lseek_r>:
 c0096fc:	defffd04 	addi	sp,sp,-12
 c009700:	2805883a 	mov	r2,r5
 c009704:	dc000015 	stw	r16,0(sp)
 c009708:	04030074 	movhi	r16,3073
 c00970c:	dc400115 	stw	r17,4(sp)
 c009710:	300b883a 	mov	r5,r6
 c009714:	840ec604 	addi	r16,r16,15128
 c009718:	2023883a 	mov	r17,r4
 c00971c:	380d883a 	mov	r6,r7
 c009720:	1009883a 	mov	r4,r2
 c009724:	dfc00215 	stw	ra,8(sp)
 c009728:	80000015 	stw	zero,0(r16)
 c00972c:	c00dc180 	call	c00dc18 <lseek>
 c009730:	00ffffc4 	movi	r3,-1
 c009734:	10c00526 	beq	r2,r3,c00974c <_lseek_r+0x50>
 c009738:	dfc00217 	ldw	ra,8(sp)
 c00973c:	dc400117 	ldw	r17,4(sp)
 c009740:	dc000017 	ldw	r16,0(sp)
 c009744:	dec00304 	addi	sp,sp,12
 c009748:	f800283a 	ret
 c00974c:	80c00017 	ldw	r3,0(r16)
 c009750:	183ff926 	beq	r3,zero,c009738 <__alt_data_end+0xfc009738>
 c009754:	88c00015 	stw	r3,0(r17)
 c009758:	003ff706 	br	c009738 <__alt_data_end+0xfc009738>

0c00975c <memmove>:
 c00975c:	2005883a 	mov	r2,r4
 c009760:	29000b2e 	bgeu	r5,r4,c009790 <memmove+0x34>
 c009764:	298f883a 	add	r7,r5,r6
 c009768:	21c0092e 	bgeu	r4,r7,c009790 <memmove+0x34>
 c00976c:	2187883a 	add	r3,r4,r6
 c009770:	198bc83a 	sub	r5,r3,r6
 c009774:	30004826 	beq	r6,zero,c009898 <memmove+0x13c>
 c009778:	39ffffc4 	addi	r7,r7,-1
 c00977c:	39000003 	ldbu	r4,0(r7)
 c009780:	18ffffc4 	addi	r3,r3,-1
 c009784:	19000005 	stb	r4,0(r3)
 c009788:	28fffb1e 	bne	r5,r3,c009778 <__alt_data_end+0xfc009778>
 c00978c:	f800283a 	ret
 c009790:	00c003c4 	movi	r3,15
 c009794:	1980412e 	bgeu	r3,r6,c00989c <memmove+0x140>
 c009798:	2886b03a 	or	r3,r5,r2
 c00979c:	18c000cc 	andi	r3,r3,3
 c0097a0:	1800401e 	bne	r3,zero,c0098a4 <memmove+0x148>
 c0097a4:	33fffc04 	addi	r15,r6,-16
 c0097a8:	781ed13a 	srli	r15,r15,4
 c0097ac:	28c00104 	addi	r3,r5,4
 c0097b0:	13400104 	addi	r13,r2,4
 c0097b4:	781c913a 	slli	r14,r15,4
 c0097b8:	2b000204 	addi	r12,r5,8
 c0097bc:	12c00204 	addi	r11,r2,8
 c0097c0:	73800504 	addi	r14,r14,20
 c0097c4:	2a800304 	addi	r10,r5,12
 c0097c8:	12400304 	addi	r9,r2,12
 c0097cc:	2b9d883a 	add	r14,r5,r14
 c0097d0:	2811883a 	mov	r8,r5
 c0097d4:	100f883a 	mov	r7,r2
 c0097d8:	41000017 	ldw	r4,0(r8)
 c0097dc:	39c00404 	addi	r7,r7,16
 c0097e0:	18c00404 	addi	r3,r3,16
 c0097e4:	393ffc15 	stw	r4,-16(r7)
 c0097e8:	193ffc17 	ldw	r4,-16(r3)
 c0097ec:	6b400404 	addi	r13,r13,16
 c0097f0:	5ac00404 	addi	r11,r11,16
 c0097f4:	693ffc15 	stw	r4,-16(r13)
 c0097f8:	61000017 	ldw	r4,0(r12)
 c0097fc:	4a400404 	addi	r9,r9,16
 c009800:	42000404 	addi	r8,r8,16
 c009804:	593ffc15 	stw	r4,-16(r11)
 c009808:	51000017 	ldw	r4,0(r10)
 c00980c:	63000404 	addi	r12,r12,16
 c009810:	52800404 	addi	r10,r10,16
 c009814:	493ffc15 	stw	r4,-16(r9)
 c009818:	1bbfef1e 	bne	r3,r14,c0097d8 <__alt_data_end+0xfc0097d8>
 c00981c:	79000044 	addi	r4,r15,1
 c009820:	2008913a 	slli	r4,r4,4
 c009824:	328003cc 	andi	r10,r6,15
 c009828:	02c000c4 	movi	r11,3
 c00982c:	1107883a 	add	r3,r2,r4
 c009830:	290b883a 	add	r5,r5,r4
 c009834:	5a801e2e 	bgeu	r11,r10,c0098b0 <memmove+0x154>
 c009838:	1813883a 	mov	r9,r3
 c00983c:	2811883a 	mov	r8,r5
 c009840:	500f883a 	mov	r7,r10
 c009844:	41000017 	ldw	r4,0(r8)
 c009848:	4a400104 	addi	r9,r9,4
 c00984c:	39ffff04 	addi	r7,r7,-4
 c009850:	493fff15 	stw	r4,-4(r9)
 c009854:	42000104 	addi	r8,r8,4
 c009858:	59fffa36 	bltu	r11,r7,c009844 <__alt_data_end+0xfc009844>
 c00985c:	513fff04 	addi	r4,r10,-4
 c009860:	2008d0ba 	srli	r4,r4,2
 c009864:	318000cc 	andi	r6,r6,3
 c009868:	21000044 	addi	r4,r4,1
 c00986c:	2109883a 	add	r4,r4,r4
 c009870:	2109883a 	add	r4,r4,r4
 c009874:	1907883a 	add	r3,r3,r4
 c009878:	290b883a 	add	r5,r5,r4
 c00987c:	30000b26 	beq	r6,zero,c0098ac <memmove+0x150>
 c009880:	198d883a 	add	r6,r3,r6
 c009884:	29c00003 	ldbu	r7,0(r5)
 c009888:	18c00044 	addi	r3,r3,1
 c00988c:	29400044 	addi	r5,r5,1
 c009890:	19ffffc5 	stb	r7,-1(r3)
 c009894:	19bffb1e 	bne	r3,r6,c009884 <__alt_data_end+0xfc009884>
 c009898:	f800283a 	ret
 c00989c:	1007883a 	mov	r3,r2
 c0098a0:	003ff606 	br	c00987c <__alt_data_end+0xfc00987c>
 c0098a4:	1007883a 	mov	r3,r2
 c0098a8:	003ff506 	br	c009880 <__alt_data_end+0xfc009880>
 c0098ac:	f800283a 	ret
 c0098b0:	500d883a 	mov	r6,r10
 c0098b4:	003ff106 	br	c00987c <__alt_data_end+0xfc00987c>

0c0098b8 <_read_r>:
 c0098b8:	defffd04 	addi	sp,sp,-12
 c0098bc:	2805883a 	mov	r2,r5
 c0098c0:	dc000015 	stw	r16,0(sp)
 c0098c4:	04030074 	movhi	r16,3073
 c0098c8:	dc400115 	stw	r17,4(sp)
 c0098cc:	300b883a 	mov	r5,r6
 c0098d0:	840ec604 	addi	r16,r16,15128
 c0098d4:	2023883a 	mov	r17,r4
 c0098d8:	380d883a 	mov	r6,r7
 c0098dc:	1009883a 	mov	r4,r2
 c0098e0:	dfc00215 	stw	ra,8(sp)
 c0098e4:	80000015 	stw	zero,0(r16)
 c0098e8:	c00ddf40 	call	c00ddf4 <read>
 c0098ec:	00ffffc4 	movi	r3,-1
 c0098f0:	10c00526 	beq	r2,r3,c009908 <_read_r+0x50>
 c0098f4:	dfc00217 	ldw	ra,8(sp)
 c0098f8:	dc400117 	ldw	r17,4(sp)
 c0098fc:	dc000017 	ldw	r16,0(sp)
 c009900:	dec00304 	addi	sp,sp,12
 c009904:	f800283a 	ret
 c009908:	80c00017 	ldw	r3,0(r16)
 c00990c:	183ff926 	beq	r3,zero,c0098f4 <__alt_data_end+0xfc0098f4>
 c009910:	88c00015 	stw	r3,0(r17)
 c009914:	003ff706 	br	c0098f4 <__alt_data_end+0xfc0098f4>

0c009918 <_realloc_r>:
 c009918:	defff604 	addi	sp,sp,-40
 c00991c:	dc800215 	stw	r18,8(sp)
 c009920:	dfc00915 	stw	ra,36(sp)
 c009924:	df000815 	stw	fp,32(sp)
 c009928:	ddc00715 	stw	r23,28(sp)
 c00992c:	dd800615 	stw	r22,24(sp)
 c009930:	dd400515 	stw	r21,20(sp)
 c009934:	dd000415 	stw	r20,16(sp)
 c009938:	dcc00315 	stw	r19,12(sp)
 c00993c:	dc400115 	stw	r17,4(sp)
 c009940:	dc000015 	stw	r16,0(sp)
 c009944:	3025883a 	mov	r18,r6
 c009948:	2800b726 	beq	r5,zero,c009c28 <_realloc_r+0x310>
 c00994c:	282b883a 	mov	r21,r5
 c009950:	2029883a 	mov	r20,r4
 c009954:	c00dd700 	call	c00dd70 <__malloc_lock>
 c009958:	a8bfff17 	ldw	r2,-4(r21)
 c00995c:	043fff04 	movi	r16,-4
 c009960:	90c002c4 	addi	r3,r18,11
 c009964:	01000584 	movi	r4,22
 c009968:	acfffe04 	addi	r19,r21,-8
 c00996c:	1420703a 	and	r16,r2,r16
 c009970:	20c0332e 	bgeu	r4,r3,c009a40 <_realloc_r+0x128>
 c009974:	047ffe04 	movi	r17,-8
 c009978:	1c62703a 	and	r17,r3,r17
 c00997c:	8807883a 	mov	r3,r17
 c009980:	88005816 	blt	r17,zero,c009ae4 <_realloc_r+0x1cc>
 c009984:	8c805736 	bltu	r17,r18,c009ae4 <_realloc_r+0x1cc>
 c009988:	80c0300e 	bge	r16,r3,c009a4c <_realloc_r+0x134>
 c00998c:	07030074 	movhi	fp,3073
 c009990:	e7026d04 	addi	fp,fp,2484
 c009994:	e1c00217 	ldw	r7,8(fp)
 c009998:	9c09883a 	add	r4,r19,r16
 c00999c:	22000117 	ldw	r8,4(r4)
 c0099a0:	21c06326 	beq	r4,r7,c009b30 <_realloc_r+0x218>
 c0099a4:	017fff84 	movi	r5,-2
 c0099a8:	414a703a 	and	r5,r8,r5
 c0099ac:	214b883a 	add	r5,r4,r5
 c0099b0:	29800117 	ldw	r6,4(r5)
 c0099b4:	3180004c 	andi	r6,r6,1
 c0099b8:	30003f26 	beq	r6,zero,c009ab8 <_realloc_r+0x1a0>
 c0099bc:	1080004c 	andi	r2,r2,1
 c0099c0:	10008326 	beq	r2,zero,c009bd0 <_realloc_r+0x2b8>
 c0099c4:	900b883a 	mov	r5,r18
 c0099c8:	a009883a 	mov	r4,r20
 c0099cc:	c0057a80 	call	c0057a8 <_malloc_r>
 c0099d0:	1025883a 	mov	r18,r2
 c0099d4:	10011e26 	beq	r2,zero,c009e50 <_realloc_r+0x538>
 c0099d8:	a93fff17 	ldw	r4,-4(r21)
 c0099dc:	10fffe04 	addi	r3,r2,-8
 c0099e0:	00bfff84 	movi	r2,-2
 c0099e4:	2084703a 	and	r2,r4,r2
 c0099e8:	9885883a 	add	r2,r19,r2
 c0099ec:	1880ee26 	beq	r3,r2,c009da8 <_realloc_r+0x490>
 c0099f0:	81bfff04 	addi	r6,r16,-4
 c0099f4:	00800904 	movi	r2,36
 c0099f8:	1180b836 	bltu	r2,r6,c009cdc <_realloc_r+0x3c4>
 c0099fc:	00c004c4 	movi	r3,19
 c009a00:	19809636 	bltu	r3,r6,c009c5c <_realloc_r+0x344>
 c009a04:	9005883a 	mov	r2,r18
 c009a08:	a807883a 	mov	r3,r21
 c009a0c:	19000017 	ldw	r4,0(r3)
 c009a10:	11000015 	stw	r4,0(r2)
 c009a14:	19000117 	ldw	r4,4(r3)
 c009a18:	11000115 	stw	r4,4(r2)
 c009a1c:	18c00217 	ldw	r3,8(r3)
 c009a20:	10c00215 	stw	r3,8(r2)
 c009a24:	a80b883a 	mov	r5,r21
 c009a28:	a009883a 	mov	r4,r20
 c009a2c:	c0050780 	call	c005078 <_free_r>
 c009a30:	a009883a 	mov	r4,r20
 c009a34:	c00dd940 	call	c00dd94 <__malloc_unlock>
 c009a38:	9005883a 	mov	r2,r18
 c009a3c:	00001206 	br	c009a88 <_realloc_r+0x170>
 c009a40:	00c00404 	movi	r3,16
 c009a44:	1823883a 	mov	r17,r3
 c009a48:	003fce06 	br	c009984 <__alt_data_end+0xfc009984>
 c009a4c:	a825883a 	mov	r18,r21
 c009a50:	8445c83a 	sub	r2,r16,r17
 c009a54:	00c003c4 	movi	r3,15
 c009a58:	18802636 	bltu	r3,r2,c009af4 <_realloc_r+0x1dc>
 c009a5c:	99800117 	ldw	r6,4(r19)
 c009a60:	9c07883a 	add	r3,r19,r16
 c009a64:	3180004c 	andi	r6,r6,1
 c009a68:	3420b03a 	or	r16,r6,r16
 c009a6c:	9c000115 	stw	r16,4(r19)
 c009a70:	18800117 	ldw	r2,4(r3)
 c009a74:	10800054 	ori	r2,r2,1
 c009a78:	18800115 	stw	r2,4(r3)
 c009a7c:	a009883a 	mov	r4,r20
 c009a80:	c00dd940 	call	c00dd94 <__malloc_unlock>
 c009a84:	9005883a 	mov	r2,r18
 c009a88:	dfc00917 	ldw	ra,36(sp)
 c009a8c:	df000817 	ldw	fp,32(sp)
 c009a90:	ddc00717 	ldw	r23,28(sp)
 c009a94:	dd800617 	ldw	r22,24(sp)
 c009a98:	dd400517 	ldw	r21,20(sp)
 c009a9c:	dd000417 	ldw	r20,16(sp)
 c009aa0:	dcc00317 	ldw	r19,12(sp)
 c009aa4:	dc800217 	ldw	r18,8(sp)
 c009aa8:	dc400117 	ldw	r17,4(sp)
 c009aac:	dc000017 	ldw	r16,0(sp)
 c009ab0:	dec00a04 	addi	sp,sp,40
 c009ab4:	f800283a 	ret
 c009ab8:	017fff04 	movi	r5,-4
 c009abc:	414a703a 	and	r5,r8,r5
 c009ac0:	814d883a 	add	r6,r16,r5
 c009ac4:	30c01f16 	blt	r6,r3,c009b44 <_realloc_r+0x22c>
 c009ac8:	20800317 	ldw	r2,12(r4)
 c009acc:	20c00217 	ldw	r3,8(r4)
 c009ad0:	a825883a 	mov	r18,r21
 c009ad4:	3021883a 	mov	r16,r6
 c009ad8:	18800315 	stw	r2,12(r3)
 c009adc:	10c00215 	stw	r3,8(r2)
 c009ae0:	003fdb06 	br	c009a50 <__alt_data_end+0xfc009a50>
 c009ae4:	00800304 	movi	r2,12
 c009ae8:	a0800015 	stw	r2,0(r20)
 c009aec:	0005883a 	mov	r2,zero
 c009af0:	003fe506 	br	c009a88 <__alt_data_end+0xfc009a88>
 c009af4:	98c00117 	ldw	r3,4(r19)
 c009af8:	9c4b883a 	add	r5,r19,r17
 c009afc:	11000054 	ori	r4,r2,1
 c009b00:	18c0004c 	andi	r3,r3,1
 c009b04:	1c62b03a 	or	r17,r3,r17
 c009b08:	9c400115 	stw	r17,4(r19)
 c009b0c:	29000115 	stw	r4,4(r5)
 c009b10:	2885883a 	add	r2,r5,r2
 c009b14:	10c00117 	ldw	r3,4(r2)
 c009b18:	29400204 	addi	r5,r5,8
 c009b1c:	a009883a 	mov	r4,r20
 c009b20:	18c00054 	ori	r3,r3,1
 c009b24:	10c00115 	stw	r3,4(r2)
 c009b28:	c0050780 	call	c005078 <_free_r>
 c009b2c:	003fd306 	br	c009a7c <__alt_data_end+0xfc009a7c>
 c009b30:	017fff04 	movi	r5,-4
 c009b34:	414a703a 	and	r5,r8,r5
 c009b38:	89800404 	addi	r6,r17,16
 c009b3c:	8151883a 	add	r8,r16,r5
 c009b40:	4180590e 	bge	r8,r6,c009ca8 <_realloc_r+0x390>
 c009b44:	1080004c 	andi	r2,r2,1
 c009b48:	103f9e1e 	bne	r2,zero,c0099c4 <__alt_data_end+0xfc0099c4>
 c009b4c:	adbffe17 	ldw	r22,-8(r21)
 c009b50:	00bfff04 	movi	r2,-4
 c009b54:	9dadc83a 	sub	r22,r19,r22
 c009b58:	b1800117 	ldw	r6,4(r22)
 c009b5c:	3084703a 	and	r2,r6,r2
 c009b60:	20002026 	beq	r4,zero,c009be4 <_realloc_r+0x2cc>
 c009b64:	80af883a 	add	r23,r16,r2
 c009b68:	b96f883a 	add	r23,r23,r5
 c009b6c:	21c05f26 	beq	r4,r7,c009cec <_realloc_r+0x3d4>
 c009b70:	b8c01c16 	blt	r23,r3,c009be4 <_realloc_r+0x2cc>
 c009b74:	20800317 	ldw	r2,12(r4)
 c009b78:	20c00217 	ldw	r3,8(r4)
 c009b7c:	81bfff04 	addi	r6,r16,-4
 c009b80:	01000904 	movi	r4,36
 c009b84:	18800315 	stw	r2,12(r3)
 c009b88:	10c00215 	stw	r3,8(r2)
 c009b8c:	b0c00217 	ldw	r3,8(r22)
 c009b90:	b0800317 	ldw	r2,12(r22)
 c009b94:	b4800204 	addi	r18,r22,8
 c009b98:	18800315 	stw	r2,12(r3)
 c009b9c:	10c00215 	stw	r3,8(r2)
 c009ba0:	21801b36 	bltu	r4,r6,c009c10 <_realloc_r+0x2f8>
 c009ba4:	008004c4 	movi	r2,19
 c009ba8:	1180352e 	bgeu	r2,r6,c009c80 <_realloc_r+0x368>
 c009bac:	a8800017 	ldw	r2,0(r21)
 c009bb0:	b0800215 	stw	r2,8(r22)
 c009bb4:	a8800117 	ldw	r2,4(r21)
 c009bb8:	b0800315 	stw	r2,12(r22)
 c009bbc:	008006c4 	movi	r2,27
 c009bc0:	11807f36 	bltu	r2,r6,c009dc0 <_realloc_r+0x4a8>
 c009bc4:	b0800404 	addi	r2,r22,16
 c009bc8:	ad400204 	addi	r21,r21,8
 c009bcc:	00002d06 	br	c009c84 <_realloc_r+0x36c>
 c009bd0:	adbffe17 	ldw	r22,-8(r21)
 c009bd4:	00bfff04 	movi	r2,-4
 c009bd8:	9dadc83a 	sub	r22,r19,r22
 c009bdc:	b1000117 	ldw	r4,4(r22)
 c009be0:	2084703a 	and	r2,r4,r2
 c009be4:	b03f7726 	beq	r22,zero,c0099c4 <__alt_data_end+0xfc0099c4>
 c009be8:	80af883a 	add	r23,r16,r2
 c009bec:	b8ff7516 	blt	r23,r3,c0099c4 <__alt_data_end+0xfc0099c4>
 c009bf0:	b0800317 	ldw	r2,12(r22)
 c009bf4:	b0c00217 	ldw	r3,8(r22)
 c009bf8:	81bfff04 	addi	r6,r16,-4
 c009bfc:	01000904 	movi	r4,36
 c009c00:	18800315 	stw	r2,12(r3)
 c009c04:	10c00215 	stw	r3,8(r2)
 c009c08:	b4800204 	addi	r18,r22,8
 c009c0c:	21bfe52e 	bgeu	r4,r6,c009ba4 <__alt_data_end+0xfc009ba4>
 c009c10:	a80b883a 	mov	r5,r21
 c009c14:	9009883a 	mov	r4,r18
 c009c18:	c00975c0 	call	c00975c <memmove>
 c009c1c:	b821883a 	mov	r16,r23
 c009c20:	b027883a 	mov	r19,r22
 c009c24:	003f8a06 	br	c009a50 <__alt_data_end+0xfc009a50>
 c009c28:	300b883a 	mov	r5,r6
 c009c2c:	dfc00917 	ldw	ra,36(sp)
 c009c30:	df000817 	ldw	fp,32(sp)
 c009c34:	ddc00717 	ldw	r23,28(sp)
 c009c38:	dd800617 	ldw	r22,24(sp)
 c009c3c:	dd400517 	ldw	r21,20(sp)
 c009c40:	dd000417 	ldw	r20,16(sp)
 c009c44:	dcc00317 	ldw	r19,12(sp)
 c009c48:	dc800217 	ldw	r18,8(sp)
 c009c4c:	dc400117 	ldw	r17,4(sp)
 c009c50:	dc000017 	ldw	r16,0(sp)
 c009c54:	dec00a04 	addi	sp,sp,40
 c009c58:	c0057a81 	jmpi	c0057a8 <_malloc_r>
 c009c5c:	a8c00017 	ldw	r3,0(r21)
 c009c60:	90c00015 	stw	r3,0(r18)
 c009c64:	a8c00117 	ldw	r3,4(r21)
 c009c68:	90c00115 	stw	r3,4(r18)
 c009c6c:	00c006c4 	movi	r3,27
 c009c70:	19804536 	bltu	r3,r6,c009d88 <_realloc_r+0x470>
 c009c74:	90800204 	addi	r2,r18,8
 c009c78:	a8c00204 	addi	r3,r21,8
 c009c7c:	003f6306 	br	c009a0c <__alt_data_end+0xfc009a0c>
 c009c80:	9005883a 	mov	r2,r18
 c009c84:	a8c00017 	ldw	r3,0(r21)
 c009c88:	b821883a 	mov	r16,r23
 c009c8c:	b027883a 	mov	r19,r22
 c009c90:	10c00015 	stw	r3,0(r2)
 c009c94:	a8c00117 	ldw	r3,4(r21)
 c009c98:	10c00115 	stw	r3,4(r2)
 c009c9c:	a8c00217 	ldw	r3,8(r21)
 c009ca0:	10c00215 	stw	r3,8(r2)
 c009ca4:	003f6a06 	br	c009a50 <__alt_data_end+0xfc009a50>
 c009ca8:	9c67883a 	add	r19,r19,r17
 c009cac:	4445c83a 	sub	r2,r8,r17
 c009cb0:	e4c00215 	stw	r19,8(fp)
 c009cb4:	10800054 	ori	r2,r2,1
 c009cb8:	98800115 	stw	r2,4(r19)
 c009cbc:	a8bfff17 	ldw	r2,-4(r21)
 c009cc0:	a009883a 	mov	r4,r20
 c009cc4:	1080004c 	andi	r2,r2,1
 c009cc8:	1462b03a 	or	r17,r2,r17
 c009ccc:	ac7fff15 	stw	r17,-4(r21)
 c009cd0:	c00dd940 	call	c00dd94 <__malloc_unlock>
 c009cd4:	a805883a 	mov	r2,r21
 c009cd8:	003f6b06 	br	c009a88 <__alt_data_end+0xfc009a88>
 c009cdc:	a80b883a 	mov	r5,r21
 c009ce0:	9009883a 	mov	r4,r18
 c009ce4:	c00975c0 	call	c00975c <memmove>
 c009ce8:	003f4e06 	br	c009a24 <__alt_data_end+0xfc009a24>
 c009cec:	89000404 	addi	r4,r17,16
 c009cf0:	b93fbc16 	blt	r23,r4,c009be4 <__alt_data_end+0xfc009be4>
 c009cf4:	b0800317 	ldw	r2,12(r22)
 c009cf8:	b0c00217 	ldw	r3,8(r22)
 c009cfc:	81bfff04 	addi	r6,r16,-4
 c009d00:	01000904 	movi	r4,36
 c009d04:	18800315 	stw	r2,12(r3)
 c009d08:	10c00215 	stw	r3,8(r2)
 c009d0c:	b4800204 	addi	r18,r22,8
 c009d10:	21804336 	bltu	r4,r6,c009e20 <_realloc_r+0x508>
 c009d14:	008004c4 	movi	r2,19
 c009d18:	11803f2e 	bgeu	r2,r6,c009e18 <_realloc_r+0x500>
 c009d1c:	a8800017 	ldw	r2,0(r21)
 c009d20:	b0800215 	stw	r2,8(r22)
 c009d24:	a8800117 	ldw	r2,4(r21)
 c009d28:	b0800315 	stw	r2,12(r22)
 c009d2c:	008006c4 	movi	r2,27
 c009d30:	11803f36 	bltu	r2,r6,c009e30 <_realloc_r+0x518>
 c009d34:	b0800404 	addi	r2,r22,16
 c009d38:	ad400204 	addi	r21,r21,8
 c009d3c:	a8c00017 	ldw	r3,0(r21)
 c009d40:	10c00015 	stw	r3,0(r2)
 c009d44:	a8c00117 	ldw	r3,4(r21)
 c009d48:	10c00115 	stw	r3,4(r2)
 c009d4c:	a8c00217 	ldw	r3,8(r21)
 c009d50:	10c00215 	stw	r3,8(r2)
 c009d54:	b447883a 	add	r3,r22,r17
 c009d58:	bc45c83a 	sub	r2,r23,r17
 c009d5c:	e0c00215 	stw	r3,8(fp)
 c009d60:	10800054 	ori	r2,r2,1
 c009d64:	18800115 	stw	r2,4(r3)
 c009d68:	b0800117 	ldw	r2,4(r22)
 c009d6c:	a009883a 	mov	r4,r20
 c009d70:	1080004c 	andi	r2,r2,1
 c009d74:	1462b03a 	or	r17,r2,r17
 c009d78:	b4400115 	stw	r17,4(r22)
 c009d7c:	c00dd940 	call	c00dd94 <__malloc_unlock>
 c009d80:	9005883a 	mov	r2,r18
 c009d84:	003f4006 	br	c009a88 <__alt_data_end+0xfc009a88>
 c009d88:	a8c00217 	ldw	r3,8(r21)
 c009d8c:	90c00215 	stw	r3,8(r18)
 c009d90:	a8c00317 	ldw	r3,12(r21)
 c009d94:	90c00315 	stw	r3,12(r18)
 c009d98:	30801126 	beq	r6,r2,c009de0 <_realloc_r+0x4c8>
 c009d9c:	90800404 	addi	r2,r18,16
 c009da0:	a8c00404 	addi	r3,r21,16
 c009da4:	003f1906 	br	c009a0c <__alt_data_end+0xfc009a0c>
 c009da8:	90ffff17 	ldw	r3,-4(r18)
 c009dac:	00bfff04 	movi	r2,-4
 c009db0:	a825883a 	mov	r18,r21
 c009db4:	1884703a 	and	r2,r3,r2
 c009db8:	80a1883a 	add	r16,r16,r2
 c009dbc:	003f2406 	br	c009a50 <__alt_data_end+0xfc009a50>
 c009dc0:	a8800217 	ldw	r2,8(r21)
 c009dc4:	b0800415 	stw	r2,16(r22)
 c009dc8:	a8800317 	ldw	r2,12(r21)
 c009dcc:	b0800515 	stw	r2,20(r22)
 c009dd0:	31000a26 	beq	r6,r4,c009dfc <_realloc_r+0x4e4>
 c009dd4:	b0800604 	addi	r2,r22,24
 c009dd8:	ad400404 	addi	r21,r21,16
 c009ddc:	003fa906 	br	c009c84 <__alt_data_end+0xfc009c84>
 c009de0:	a9000417 	ldw	r4,16(r21)
 c009de4:	90800604 	addi	r2,r18,24
 c009de8:	a8c00604 	addi	r3,r21,24
 c009dec:	91000415 	stw	r4,16(r18)
 c009df0:	a9000517 	ldw	r4,20(r21)
 c009df4:	91000515 	stw	r4,20(r18)
 c009df8:	003f0406 	br	c009a0c <__alt_data_end+0xfc009a0c>
 c009dfc:	a8c00417 	ldw	r3,16(r21)
 c009e00:	ad400604 	addi	r21,r21,24
 c009e04:	b0800804 	addi	r2,r22,32
 c009e08:	b0c00615 	stw	r3,24(r22)
 c009e0c:	a8ffff17 	ldw	r3,-4(r21)
 c009e10:	b0c00715 	stw	r3,28(r22)
 c009e14:	003f9b06 	br	c009c84 <__alt_data_end+0xfc009c84>
 c009e18:	9005883a 	mov	r2,r18
 c009e1c:	003fc706 	br	c009d3c <__alt_data_end+0xfc009d3c>
 c009e20:	a80b883a 	mov	r5,r21
 c009e24:	9009883a 	mov	r4,r18
 c009e28:	c00975c0 	call	c00975c <memmove>
 c009e2c:	003fc906 	br	c009d54 <__alt_data_end+0xfc009d54>
 c009e30:	a8800217 	ldw	r2,8(r21)
 c009e34:	b0800415 	stw	r2,16(r22)
 c009e38:	a8800317 	ldw	r2,12(r21)
 c009e3c:	b0800515 	stw	r2,20(r22)
 c009e40:	31000726 	beq	r6,r4,c009e60 <_realloc_r+0x548>
 c009e44:	b0800604 	addi	r2,r22,24
 c009e48:	ad400404 	addi	r21,r21,16
 c009e4c:	003fbb06 	br	c009d3c <__alt_data_end+0xfc009d3c>
 c009e50:	a009883a 	mov	r4,r20
 c009e54:	c00dd940 	call	c00dd94 <__malloc_unlock>
 c009e58:	0005883a 	mov	r2,zero
 c009e5c:	003f0a06 	br	c009a88 <__alt_data_end+0xfc009a88>
 c009e60:	a8c00417 	ldw	r3,16(r21)
 c009e64:	ad400604 	addi	r21,r21,24
 c009e68:	b0800804 	addi	r2,r22,32
 c009e6c:	b0c00615 	stw	r3,24(r22)
 c009e70:	a8ffff17 	ldw	r3,-4(r21)
 c009e74:	b0c00715 	stw	r3,28(r22)
 c009e78:	003fb006 	br	c009d3c <__alt_data_end+0xfc009d3c>

0c009e7c <__swbuf_r>:
 c009e7c:	defffb04 	addi	sp,sp,-20
 c009e80:	dcc00315 	stw	r19,12(sp)
 c009e84:	dc800215 	stw	r18,8(sp)
 c009e88:	dc000015 	stw	r16,0(sp)
 c009e8c:	dfc00415 	stw	ra,16(sp)
 c009e90:	dc400115 	stw	r17,4(sp)
 c009e94:	2025883a 	mov	r18,r4
 c009e98:	2827883a 	mov	r19,r5
 c009e9c:	3021883a 	mov	r16,r6
 c009ea0:	20000226 	beq	r4,zero,c009eac <__swbuf_r+0x30>
 c009ea4:	20800e17 	ldw	r2,56(r4)
 c009ea8:	10004226 	beq	r2,zero,c009fb4 <__swbuf_r+0x138>
 c009eac:	80800617 	ldw	r2,24(r16)
 c009eb0:	8100030b 	ldhu	r4,12(r16)
 c009eb4:	80800215 	stw	r2,8(r16)
 c009eb8:	2080020c 	andi	r2,r4,8
 c009ebc:	10003626 	beq	r2,zero,c009f98 <__swbuf_r+0x11c>
 c009ec0:	80c00417 	ldw	r3,16(r16)
 c009ec4:	18003426 	beq	r3,zero,c009f98 <__swbuf_r+0x11c>
 c009ec8:	2088000c 	andi	r2,r4,8192
 c009ecc:	9c403fcc 	andi	r17,r19,255
 c009ed0:	10001a26 	beq	r2,zero,c009f3c <__swbuf_r+0xc0>
 c009ed4:	80800017 	ldw	r2,0(r16)
 c009ed8:	81000517 	ldw	r4,20(r16)
 c009edc:	10c7c83a 	sub	r3,r2,r3
 c009ee0:	1900200e 	bge	r3,r4,c009f64 <__swbuf_r+0xe8>
 c009ee4:	18c00044 	addi	r3,r3,1
 c009ee8:	81000217 	ldw	r4,8(r16)
 c009eec:	11400044 	addi	r5,r2,1
 c009ef0:	81400015 	stw	r5,0(r16)
 c009ef4:	213fffc4 	addi	r4,r4,-1
 c009ef8:	81000215 	stw	r4,8(r16)
 c009efc:	14c00005 	stb	r19,0(r2)
 c009f00:	80800517 	ldw	r2,20(r16)
 c009f04:	10c01e26 	beq	r2,r3,c009f80 <__swbuf_r+0x104>
 c009f08:	8080030b 	ldhu	r2,12(r16)
 c009f0c:	1080004c 	andi	r2,r2,1
 c009f10:	10000226 	beq	r2,zero,c009f1c <__swbuf_r+0xa0>
 c009f14:	00800284 	movi	r2,10
 c009f18:	88801926 	beq	r17,r2,c009f80 <__swbuf_r+0x104>
 c009f1c:	8805883a 	mov	r2,r17
 c009f20:	dfc00417 	ldw	ra,16(sp)
 c009f24:	dcc00317 	ldw	r19,12(sp)
 c009f28:	dc800217 	ldw	r18,8(sp)
 c009f2c:	dc400117 	ldw	r17,4(sp)
 c009f30:	dc000017 	ldw	r16,0(sp)
 c009f34:	dec00504 	addi	sp,sp,20
 c009f38:	f800283a 	ret
 c009f3c:	81401917 	ldw	r5,100(r16)
 c009f40:	00b7ffc4 	movi	r2,-8193
 c009f44:	21080014 	ori	r4,r4,8192
 c009f48:	2884703a 	and	r2,r5,r2
 c009f4c:	80801915 	stw	r2,100(r16)
 c009f50:	80800017 	ldw	r2,0(r16)
 c009f54:	8100030d 	sth	r4,12(r16)
 c009f58:	81000517 	ldw	r4,20(r16)
 c009f5c:	10c7c83a 	sub	r3,r2,r3
 c009f60:	193fe016 	blt	r3,r4,c009ee4 <__alt_data_end+0xfc009ee4>
 c009f64:	800b883a 	mov	r5,r16
 c009f68:	9009883a 	mov	r4,r18
 c009f6c:	c004b180 	call	c004b18 <_fflush_r>
 c009f70:	1000071e 	bne	r2,zero,c009f90 <__swbuf_r+0x114>
 c009f74:	80800017 	ldw	r2,0(r16)
 c009f78:	00c00044 	movi	r3,1
 c009f7c:	003fda06 	br	c009ee8 <__alt_data_end+0xfc009ee8>
 c009f80:	800b883a 	mov	r5,r16
 c009f84:	9009883a 	mov	r4,r18
 c009f88:	c004b180 	call	c004b18 <_fflush_r>
 c009f8c:	103fe326 	beq	r2,zero,c009f1c <__alt_data_end+0xfc009f1c>
 c009f90:	00bfffc4 	movi	r2,-1
 c009f94:	003fe206 	br	c009f20 <__alt_data_end+0xfc009f20>
 c009f98:	800b883a 	mov	r5,r16
 c009f9c:	9009883a 	mov	r4,r18
 c009fa0:	c002ef80 	call	c002ef8 <__swsetup_r>
 c009fa4:	103ffa1e 	bne	r2,zero,c009f90 <__alt_data_end+0xfc009f90>
 c009fa8:	8100030b 	ldhu	r4,12(r16)
 c009fac:	80c00417 	ldw	r3,16(r16)
 c009fb0:	003fc506 	br	c009ec8 <__alt_data_end+0xfc009ec8>
 c009fb4:	c004f040 	call	c004f04 <__sinit>
 c009fb8:	003fbc06 	br	c009eac <__alt_data_end+0xfc009eac>

0c009fbc <__swbuf>:
 c009fbc:	00830074 	movhi	r2,3073
 c009fc0:	1087f404 	addi	r2,r2,8144
 c009fc4:	280d883a 	mov	r6,r5
 c009fc8:	200b883a 	mov	r5,r4
 c009fcc:	11000017 	ldw	r4,0(r2)
 c009fd0:	c009e7c1 	jmpi	c009e7c <__swbuf_r>

0c009fd4 <_wcrtomb_r>:
 c009fd4:	defff604 	addi	sp,sp,-40
 c009fd8:	00830074 	movhi	r2,3073
 c009fdc:	dc800815 	stw	r18,32(sp)
 c009fe0:	dc400715 	stw	r17,28(sp)
 c009fe4:	dc000615 	stw	r16,24(sp)
 c009fe8:	1087f804 	addi	r2,r2,8160
 c009fec:	dfc00915 	stw	ra,36(sp)
 c009ff0:	2021883a 	mov	r16,r4
 c009ff4:	3823883a 	mov	r17,r7
 c009ff8:	14800017 	ldw	r18,0(r2)
 c009ffc:	28001426 	beq	r5,zero,c00a050 <_wcrtomb_r+0x7c>
 c00a000:	d9400415 	stw	r5,16(sp)
 c00a004:	d9800515 	stw	r6,20(sp)
 c00a008:	c00558c0 	call	c00558c <__locale_charset>
 c00a00c:	d9800517 	ldw	r6,20(sp)
 c00a010:	d9400417 	ldw	r5,16(sp)
 c00a014:	100f883a 	mov	r7,r2
 c00a018:	dc400015 	stw	r17,0(sp)
 c00a01c:	8009883a 	mov	r4,r16
 c00a020:	903ee83a 	callr	r18
 c00a024:	00ffffc4 	movi	r3,-1
 c00a028:	10c0031e 	bne	r2,r3,c00a038 <_wcrtomb_r+0x64>
 c00a02c:	88000015 	stw	zero,0(r17)
 c00a030:	00c02284 	movi	r3,138
 c00a034:	80c00015 	stw	r3,0(r16)
 c00a038:	dfc00917 	ldw	ra,36(sp)
 c00a03c:	dc800817 	ldw	r18,32(sp)
 c00a040:	dc400717 	ldw	r17,28(sp)
 c00a044:	dc000617 	ldw	r16,24(sp)
 c00a048:	dec00a04 	addi	sp,sp,40
 c00a04c:	f800283a 	ret
 c00a050:	c00558c0 	call	c00558c <__locale_charset>
 c00a054:	100f883a 	mov	r7,r2
 c00a058:	dc400015 	stw	r17,0(sp)
 c00a05c:	000d883a 	mov	r6,zero
 c00a060:	d9400104 	addi	r5,sp,4
 c00a064:	8009883a 	mov	r4,r16
 c00a068:	903ee83a 	callr	r18
 c00a06c:	003fed06 	br	c00a024 <__alt_data_end+0xfc00a024>

0c00a070 <wcrtomb>:
 c00a070:	defff604 	addi	sp,sp,-40
 c00a074:	00830074 	movhi	r2,3073
 c00a078:	dc800615 	stw	r18,24(sp)
 c00a07c:	dc400515 	stw	r17,20(sp)
 c00a080:	1087f404 	addi	r2,r2,8144
 c00a084:	dfc00915 	stw	ra,36(sp)
 c00a088:	dd000815 	stw	r20,32(sp)
 c00a08c:	dcc00715 	stw	r19,28(sp)
 c00a090:	dc000415 	stw	r16,16(sp)
 c00a094:	3025883a 	mov	r18,r6
 c00a098:	14400017 	ldw	r17,0(r2)
 c00a09c:	20001926 	beq	r4,zero,c00a104 <wcrtomb+0x94>
 c00a0a0:	00830074 	movhi	r2,3073
 c00a0a4:	1087f804 	addi	r2,r2,8160
 c00a0a8:	15000017 	ldw	r20,0(r2)
 c00a0ac:	2021883a 	mov	r16,r4
 c00a0b0:	2827883a 	mov	r19,r5
 c00a0b4:	c00558c0 	call	c00558c <__locale_charset>
 c00a0b8:	100f883a 	mov	r7,r2
 c00a0bc:	dc800015 	stw	r18,0(sp)
 c00a0c0:	980d883a 	mov	r6,r19
 c00a0c4:	800b883a 	mov	r5,r16
 c00a0c8:	8809883a 	mov	r4,r17
 c00a0cc:	a03ee83a 	callr	r20
 c00a0d0:	00ffffc4 	movi	r3,-1
 c00a0d4:	10c0031e 	bne	r2,r3,c00a0e4 <wcrtomb+0x74>
 c00a0d8:	90000015 	stw	zero,0(r18)
 c00a0dc:	00c02284 	movi	r3,138
 c00a0e0:	88c00015 	stw	r3,0(r17)
 c00a0e4:	dfc00917 	ldw	ra,36(sp)
 c00a0e8:	dd000817 	ldw	r20,32(sp)
 c00a0ec:	dcc00717 	ldw	r19,28(sp)
 c00a0f0:	dc800617 	ldw	r18,24(sp)
 c00a0f4:	dc400517 	ldw	r17,20(sp)
 c00a0f8:	dc000417 	ldw	r16,16(sp)
 c00a0fc:	dec00a04 	addi	sp,sp,40
 c00a100:	f800283a 	ret
 c00a104:	00830074 	movhi	r2,3073
 c00a108:	1087f804 	addi	r2,r2,8160
 c00a10c:	14000017 	ldw	r16,0(r2)
 c00a110:	c00558c0 	call	c00558c <__locale_charset>
 c00a114:	100f883a 	mov	r7,r2
 c00a118:	dc800015 	stw	r18,0(sp)
 c00a11c:	000d883a 	mov	r6,zero
 c00a120:	d9400104 	addi	r5,sp,4
 c00a124:	8809883a 	mov	r4,r17
 c00a128:	803ee83a 	callr	r16
 c00a12c:	003fe806 	br	c00a0d0 <__alt_data_end+0xfc00a0d0>

0c00a130 <__ascii_wctomb>:
 c00a130:	28000526 	beq	r5,zero,c00a148 <__ascii_wctomb+0x18>
 c00a134:	00803fc4 	movi	r2,255
 c00a138:	11800536 	bltu	r2,r6,c00a150 <__ascii_wctomb+0x20>
 c00a13c:	29800005 	stb	r6,0(r5)
 c00a140:	00800044 	movi	r2,1
 c00a144:	f800283a 	ret
 c00a148:	0005883a 	mov	r2,zero
 c00a14c:	f800283a 	ret
 c00a150:	00802284 	movi	r2,138
 c00a154:	20800015 	stw	r2,0(r4)
 c00a158:	00bfffc4 	movi	r2,-1
 c00a15c:	f800283a 	ret

0c00a160 <_wctomb_r>:
 c00a160:	00830074 	movhi	r2,3073
 c00a164:	defff904 	addi	sp,sp,-28
 c00a168:	1087f804 	addi	r2,r2,8160
 c00a16c:	dfc00615 	stw	ra,24(sp)
 c00a170:	dc400515 	stw	r17,20(sp)
 c00a174:	dc000415 	stw	r16,16(sp)
 c00a178:	3823883a 	mov	r17,r7
 c00a17c:	14000017 	ldw	r16,0(r2)
 c00a180:	d9000115 	stw	r4,4(sp)
 c00a184:	d9400215 	stw	r5,8(sp)
 c00a188:	d9800315 	stw	r6,12(sp)
 c00a18c:	c00558c0 	call	c00558c <__locale_charset>
 c00a190:	d9800317 	ldw	r6,12(sp)
 c00a194:	d9400217 	ldw	r5,8(sp)
 c00a198:	d9000117 	ldw	r4,4(sp)
 c00a19c:	100f883a 	mov	r7,r2
 c00a1a0:	dc400015 	stw	r17,0(sp)
 c00a1a4:	803ee83a 	callr	r16
 c00a1a8:	dfc00617 	ldw	ra,24(sp)
 c00a1ac:	dc400517 	ldw	r17,20(sp)
 c00a1b0:	dc000417 	ldw	r16,16(sp)
 c00a1b4:	dec00704 	addi	sp,sp,28
 c00a1b8:	f800283a 	ret

0c00a1bc <__udivdi3>:
 c00a1bc:	defff404 	addi	sp,sp,-48
 c00a1c0:	dcc00515 	stw	r19,20(sp)
 c00a1c4:	dc000215 	stw	r16,8(sp)
 c00a1c8:	dfc00b15 	stw	ra,44(sp)
 c00a1cc:	df000a15 	stw	fp,40(sp)
 c00a1d0:	ddc00915 	stw	r23,36(sp)
 c00a1d4:	dd800815 	stw	r22,32(sp)
 c00a1d8:	dd400715 	stw	r21,28(sp)
 c00a1dc:	dd000615 	stw	r20,24(sp)
 c00a1e0:	dc800415 	stw	r18,16(sp)
 c00a1e4:	dc400315 	stw	r17,12(sp)
 c00a1e8:	2027883a 	mov	r19,r4
 c00a1ec:	2821883a 	mov	r16,r5
 c00a1f0:	3800461e 	bne	r7,zero,c00a30c <__udivdi3+0x150>
 c00a1f4:	3023883a 	mov	r17,r6
 c00a1f8:	2025883a 	mov	r18,r4
 c00a1fc:	2980572e 	bgeu	r5,r6,c00a35c <__udivdi3+0x1a0>
 c00a200:	00bfffd4 	movui	r2,65535
 c00a204:	282d883a 	mov	r22,r5
 c00a208:	1180b236 	bltu	r2,r6,c00a4d4 <__udivdi3+0x318>
 c00a20c:	00803fc4 	movi	r2,255
 c00a210:	1185803a 	cmpltu	r2,r2,r6
 c00a214:	100490fa 	slli	r2,r2,3
 c00a218:	3086d83a 	srl	r3,r6,r2
 c00a21c:	01030074 	movhi	r4,3073
 c00a220:	2100f904 	addi	r4,r4,996
 c00a224:	20c7883a 	add	r3,r4,r3
 c00a228:	18c00003 	ldbu	r3,0(r3)
 c00a22c:	1885883a 	add	r2,r3,r2
 c00a230:	00c00804 	movi	r3,32
 c00a234:	1887c83a 	sub	r3,r3,r2
 c00a238:	18000526 	beq	r3,zero,c00a250 <__udivdi3+0x94>
 c00a23c:	80e0983a 	sll	r16,r16,r3
 c00a240:	9884d83a 	srl	r2,r19,r2
 c00a244:	30e2983a 	sll	r17,r6,r3
 c00a248:	98e4983a 	sll	r18,r19,r3
 c00a24c:	142cb03a 	or	r22,r2,r16
 c00a250:	882ad43a 	srli	r21,r17,16
 c00a254:	b009883a 	mov	r4,r22
 c00a258:	8d3fffcc 	andi	r20,r17,65535
 c00a25c:	a80b883a 	mov	r5,r21
 c00a260:	c00aed80 	call	c00aed8 <__umodsi3>
 c00a264:	b009883a 	mov	r4,r22
 c00a268:	a80b883a 	mov	r5,r21
 c00a26c:	1027883a 	mov	r19,r2
 c00a270:	c00ae740 	call	c00ae74 <__udivsi3>
 c00a274:	100b883a 	mov	r5,r2
 c00a278:	a009883a 	mov	r4,r20
 c00a27c:	102d883a 	mov	r22,r2
 c00a280:	c0009680 	call	c000968 <__mulsi3>
 c00a284:	9826943a 	slli	r19,r19,16
 c00a288:	9006d43a 	srli	r3,r18,16
 c00a28c:	1cc6b03a 	or	r3,r3,r19
 c00a290:	1880052e 	bgeu	r3,r2,c00a2a8 <__udivdi3+0xec>
 c00a294:	1c47883a 	add	r3,r3,r17
 c00a298:	b13fffc4 	addi	r4,r22,-1
 c00a29c:	1c400136 	bltu	r3,r17,c00a2a4 <__udivdi3+0xe8>
 c00a2a0:	18814236 	bltu	r3,r2,c00a7ac <__udivdi3+0x5f0>
 c00a2a4:	202d883a 	mov	r22,r4
 c00a2a8:	18a1c83a 	sub	r16,r3,r2
 c00a2ac:	8009883a 	mov	r4,r16
 c00a2b0:	a80b883a 	mov	r5,r21
 c00a2b4:	c00aed80 	call	c00aed8 <__umodsi3>
 c00a2b8:	1027883a 	mov	r19,r2
 c00a2bc:	8009883a 	mov	r4,r16
 c00a2c0:	a80b883a 	mov	r5,r21
 c00a2c4:	9826943a 	slli	r19,r19,16
 c00a2c8:	c00ae740 	call	c00ae74 <__udivsi3>
 c00a2cc:	100b883a 	mov	r5,r2
 c00a2d0:	a009883a 	mov	r4,r20
 c00a2d4:	94bfffcc 	andi	r18,r18,65535
 c00a2d8:	1021883a 	mov	r16,r2
 c00a2dc:	94e4b03a 	or	r18,r18,r19
 c00a2e0:	c0009680 	call	c000968 <__mulsi3>
 c00a2e4:	9080052e 	bgeu	r18,r2,c00a2fc <__udivdi3+0x140>
 c00a2e8:	8ca5883a 	add	r18,r17,r18
 c00a2ec:	80ffffc4 	addi	r3,r16,-1
 c00a2f0:	94410c36 	bltu	r18,r17,c00a724 <__udivdi3+0x568>
 c00a2f4:	90810b2e 	bgeu	r18,r2,c00a724 <__udivdi3+0x568>
 c00a2f8:	843fff84 	addi	r16,r16,-2
 c00a2fc:	b004943a 	slli	r2,r22,16
 c00a300:	0007883a 	mov	r3,zero
 c00a304:	1404b03a 	or	r2,r2,r16
 c00a308:	00005e06 	br	c00a484 <__udivdi3+0x2c8>
 c00a30c:	29c05b36 	bltu	r5,r7,c00a47c <__udivdi3+0x2c0>
 c00a310:	00bfffd4 	movui	r2,65535
 c00a314:	11c0672e 	bgeu	r2,r7,c00a4b4 <__udivdi3+0x2f8>
 c00a318:	00804034 	movhi	r2,256
 c00a31c:	10bfffc4 	addi	r2,r2,-1
 c00a320:	11c10a36 	bltu	r2,r7,c00a74c <__udivdi3+0x590>
 c00a324:	00800404 	movi	r2,16
 c00a328:	3886d83a 	srl	r3,r7,r2
 c00a32c:	01030074 	movhi	r4,3073
 c00a330:	2100f904 	addi	r4,r4,996
 c00a334:	20c7883a 	add	r3,r4,r3
 c00a338:	18c00003 	ldbu	r3,0(r3)
 c00a33c:	05c00804 	movi	r23,32
 c00a340:	1885883a 	add	r2,r3,r2
 c00a344:	b8afc83a 	sub	r23,r23,r2
 c00a348:	b800671e 	bne	r23,zero,c00a4e8 <__udivdi3+0x32c>
 c00a34c:	3c010536 	bltu	r7,r16,c00a764 <__udivdi3+0x5a8>
 c00a350:	9985403a 	cmpgeu	r2,r19,r6
 c00a354:	0007883a 	mov	r3,zero
 c00a358:	00004a06 	br	c00a484 <__udivdi3+0x2c8>
 c00a35c:	3000041e 	bne	r6,zero,c00a370 <__udivdi3+0x1b4>
 c00a360:	000b883a 	mov	r5,zero
 c00a364:	01000044 	movi	r4,1
 c00a368:	c00ae740 	call	c00ae74 <__udivsi3>
 c00a36c:	1023883a 	mov	r17,r2
 c00a370:	00bfffd4 	movui	r2,65535
 c00a374:	1440532e 	bgeu	r2,r17,c00a4c4 <__udivdi3+0x308>
 c00a378:	00804034 	movhi	r2,256
 c00a37c:	10bfffc4 	addi	r2,r2,-1
 c00a380:	1440f436 	bltu	r2,r17,c00a754 <__udivdi3+0x598>
 c00a384:	00800404 	movi	r2,16
 c00a388:	8886d83a 	srl	r3,r17,r2
 c00a38c:	01030074 	movhi	r4,3073
 c00a390:	2100f904 	addi	r4,r4,996
 c00a394:	20c7883a 	add	r3,r4,r3
 c00a398:	18c00003 	ldbu	r3,0(r3)
 c00a39c:	1885883a 	add	r2,r3,r2
 c00a3a0:	00c00804 	movi	r3,32
 c00a3a4:	1887c83a 	sub	r3,r3,r2
 c00a3a8:	1800a51e 	bne	r3,zero,c00a640 <__udivdi3+0x484>
 c00a3ac:	882ad43a 	srli	r21,r17,16
 c00a3b0:	8461c83a 	sub	r16,r16,r17
 c00a3b4:	8d3fffcc 	andi	r20,r17,65535
 c00a3b8:	00c00044 	movi	r3,1
 c00a3bc:	a80b883a 	mov	r5,r21
 c00a3c0:	8009883a 	mov	r4,r16
 c00a3c4:	d8c00115 	stw	r3,4(sp)
 c00a3c8:	c00aed80 	call	c00aed8 <__umodsi3>
 c00a3cc:	a80b883a 	mov	r5,r21
 c00a3d0:	8009883a 	mov	r4,r16
 c00a3d4:	1027883a 	mov	r19,r2
 c00a3d8:	c00ae740 	call	c00ae74 <__udivsi3>
 c00a3dc:	a00b883a 	mov	r5,r20
 c00a3e0:	1009883a 	mov	r4,r2
 c00a3e4:	102d883a 	mov	r22,r2
 c00a3e8:	c0009680 	call	c000968 <__mulsi3>
 c00a3ec:	9826943a 	slli	r19,r19,16
 c00a3f0:	900ed43a 	srli	r7,r18,16
 c00a3f4:	d8c00117 	ldw	r3,4(sp)
 c00a3f8:	3cceb03a 	or	r7,r7,r19
 c00a3fc:	3880052e 	bgeu	r7,r2,c00a414 <__udivdi3+0x258>
 c00a400:	3c4f883a 	add	r7,r7,r17
 c00a404:	b13fffc4 	addi	r4,r22,-1
 c00a408:	3c400136 	bltu	r7,r17,c00a410 <__udivdi3+0x254>
 c00a40c:	3880e436 	bltu	r7,r2,c00a7a0 <__udivdi3+0x5e4>
 c00a410:	202d883a 	mov	r22,r4
 c00a414:	38a1c83a 	sub	r16,r7,r2
 c00a418:	8009883a 	mov	r4,r16
 c00a41c:	a80b883a 	mov	r5,r21
 c00a420:	d8c00115 	stw	r3,4(sp)
 c00a424:	c00aed80 	call	c00aed8 <__umodsi3>
 c00a428:	1027883a 	mov	r19,r2
 c00a42c:	8009883a 	mov	r4,r16
 c00a430:	a80b883a 	mov	r5,r21
 c00a434:	9826943a 	slli	r19,r19,16
 c00a438:	c00ae740 	call	c00ae74 <__udivsi3>
 c00a43c:	a00b883a 	mov	r5,r20
 c00a440:	1009883a 	mov	r4,r2
 c00a444:	94bfffcc 	andi	r18,r18,65535
 c00a448:	1021883a 	mov	r16,r2
 c00a44c:	94e4b03a 	or	r18,r18,r19
 c00a450:	c0009680 	call	c000968 <__mulsi3>
 c00a454:	d8c00117 	ldw	r3,4(sp)
 c00a458:	9080052e 	bgeu	r18,r2,c00a470 <__udivdi3+0x2b4>
 c00a45c:	8ca5883a 	add	r18,r17,r18
 c00a460:	813fffc4 	addi	r4,r16,-1
 c00a464:	9440ad36 	bltu	r18,r17,c00a71c <__udivdi3+0x560>
 c00a468:	9080ac2e 	bgeu	r18,r2,c00a71c <__udivdi3+0x560>
 c00a46c:	843fff84 	addi	r16,r16,-2
 c00a470:	b004943a 	slli	r2,r22,16
 c00a474:	1404b03a 	or	r2,r2,r16
 c00a478:	00000206 	br	c00a484 <__udivdi3+0x2c8>
 c00a47c:	0007883a 	mov	r3,zero
 c00a480:	0005883a 	mov	r2,zero
 c00a484:	dfc00b17 	ldw	ra,44(sp)
 c00a488:	df000a17 	ldw	fp,40(sp)
 c00a48c:	ddc00917 	ldw	r23,36(sp)
 c00a490:	dd800817 	ldw	r22,32(sp)
 c00a494:	dd400717 	ldw	r21,28(sp)
 c00a498:	dd000617 	ldw	r20,24(sp)
 c00a49c:	dcc00517 	ldw	r19,20(sp)
 c00a4a0:	dc800417 	ldw	r18,16(sp)
 c00a4a4:	dc400317 	ldw	r17,12(sp)
 c00a4a8:	dc000217 	ldw	r16,8(sp)
 c00a4ac:	dec00c04 	addi	sp,sp,48
 c00a4b0:	f800283a 	ret
 c00a4b4:	00803fc4 	movi	r2,255
 c00a4b8:	11c5803a 	cmpltu	r2,r2,r7
 c00a4bc:	100490fa 	slli	r2,r2,3
 c00a4c0:	003f9906 	br	c00a328 <__alt_data_end+0xfc00a328>
 c00a4c4:	00803fc4 	movi	r2,255
 c00a4c8:	1445803a 	cmpltu	r2,r2,r17
 c00a4cc:	100490fa 	slli	r2,r2,3
 c00a4d0:	003fad06 	br	c00a388 <__alt_data_end+0xfc00a388>
 c00a4d4:	00804034 	movhi	r2,256
 c00a4d8:	10bfffc4 	addi	r2,r2,-1
 c00a4dc:	11809f36 	bltu	r2,r6,c00a75c <__udivdi3+0x5a0>
 c00a4e0:	00800404 	movi	r2,16
 c00a4e4:	003f4c06 	br	c00a218 <__alt_data_end+0xfc00a218>
 c00a4e8:	3dce983a 	sll	r7,r7,r23
 c00a4ec:	30b8d83a 	srl	fp,r6,r2
 c00a4f0:	80a2d83a 	srl	r17,r16,r2
 c00a4f4:	35cc983a 	sll	r6,r6,r23
 c00a4f8:	3f38b03a 	or	fp,r7,fp
 c00a4fc:	e024d43a 	srli	r18,fp,16
 c00a500:	9884d83a 	srl	r2,r19,r2
 c00a504:	85e0983a 	sll	r16,r16,r23
 c00a508:	8809883a 	mov	r4,r17
 c00a50c:	900b883a 	mov	r5,r18
 c00a510:	d9800015 	stw	r6,0(sp)
 c00a514:	1420b03a 	or	r16,r2,r16
 c00a518:	c00aed80 	call	c00aed8 <__umodsi3>
 c00a51c:	900b883a 	mov	r5,r18
 c00a520:	8809883a 	mov	r4,r17
 c00a524:	1029883a 	mov	r20,r2
 c00a528:	e5bfffcc 	andi	r22,fp,65535
 c00a52c:	c00ae740 	call	c00ae74 <__udivsi3>
 c00a530:	100b883a 	mov	r5,r2
 c00a534:	b009883a 	mov	r4,r22
 c00a538:	102b883a 	mov	r21,r2
 c00a53c:	c0009680 	call	c000968 <__mulsi3>
 c00a540:	a028943a 	slli	r20,r20,16
 c00a544:	8006d43a 	srli	r3,r16,16
 c00a548:	1d06b03a 	or	r3,r3,r20
 c00a54c:	1880042e 	bgeu	r3,r2,c00a560 <__udivdi3+0x3a4>
 c00a550:	1f07883a 	add	r3,r3,fp
 c00a554:	a93fffc4 	addi	r4,r21,-1
 c00a558:	1f00892e 	bgeu	r3,fp,c00a780 <__udivdi3+0x5c4>
 c00a55c:	202b883a 	mov	r21,r4
 c00a560:	18a3c83a 	sub	r17,r3,r2
 c00a564:	8809883a 	mov	r4,r17
 c00a568:	900b883a 	mov	r5,r18
 c00a56c:	c00aed80 	call	c00aed8 <__umodsi3>
 c00a570:	1029883a 	mov	r20,r2
 c00a574:	8809883a 	mov	r4,r17
 c00a578:	900b883a 	mov	r5,r18
 c00a57c:	a028943a 	slli	r20,r20,16
 c00a580:	c00ae740 	call	c00ae74 <__udivsi3>
 c00a584:	100b883a 	mov	r5,r2
 c00a588:	b009883a 	mov	r4,r22
 c00a58c:	843fffcc 	andi	r16,r16,65535
 c00a590:	1023883a 	mov	r17,r2
 c00a594:	8520b03a 	or	r16,r16,r20
 c00a598:	c0009680 	call	c000968 <__mulsi3>
 c00a59c:	8080042e 	bgeu	r16,r2,c00a5b0 <__udivdi3+0x3f4>
 c00a5a0:	8721883a 	add	r16,r16,fp
 c00a5a4:	88ffffc4 	addi	r3,r17,-1
 c00a5a8:	8700712e 	bgeu	r16,fp,c00a770 <__udivdi3+0x5b4>
 c00a5ac:	1823883a 	mov	r17,r3
 c00a5b0:	a80e943a 	slli	r7,r21,16
 c00a5b4:	d8c00017 	ldw	r3,0(sp)
 c00a5b8:	80a1c83a 	sub	r16,r16,r2
 c00a5bc:	3c64b03a 	or	r18,r7,r17
 c00a5c0:	1d3fffcc 	andi	r20,r3,65535
 c00a5c4:	9022d43a 	srli	r17,r18,16
 c00a5c8:	95bfffcc 	andi	r22,r18,65535
 c00a5cc:	a00b883a 	mov	r5,r20
 c00a5d0:	b009883a 	mov	r4,r22
 c00a5d4:	182ad43a 	srli	r21,r3,16
 c00a5d8:	c0009680 	call	c000968 <__mulsi3>
 c00a5dc:	a00b883a 	mov	r5,r20
 c00a5e0:	8809883a 	mov	r4,r17
 c00a5e4:	1039883a 	mov	fp,r2
 c00a5e8:	c0009680 	call	c000968 <__mulsi3>
 c00a5ec:	8809883a 	mov	r4,r17
 c00a5f0:	a80b883a 	mov	r5,r21
 c00a5f4:	1029883a 	mov	r20,r2
 c00a5f8:	c0009680 	call	c000968 <__mulsi3>
 c00a5fc:	a80b883a 	mov	r5,r21
 c00a600:	b009883a 	mov	r4,r22
 c00a604:	1023883a 	mov	r17,r2
 c00a608:	c0009680 	call	c000968 <__mulsi3>
 c00a60c:	e006d43a 	srli	r3,fp,16
 c00a610:	1505883a 	add	r2,r2,r20
 c00a614:	1887883a 	add	r3,r3,r2
 c00a618:	1d00022e 	bgeu	r3,r20,c00a624 <__udivdi3+0x468>
 c00a61c:	00800074 	movhi	r2,1
 c00a620:	88a3883a 	add	r17,r17,r2
 c00a624:	1804d43a 	srli	r2,r3,16
 c00a628:	1463883a 	add	r17,r2,r17
 c00a62c:	84404436 	bltu	r16,r17,c00a740 <__udivdi3+0x584>
 c00a630:	84403e26 	beq	r16,r17,c00a72c <__udivdi3+0x570>
 c00a634:	9005883a 	mov	r2,r18
 c00a638:	0007883a 	mov	r3,zero
 c00a63c:	003f9106 	br	c00a484 <__alt_data_end+0xfc00a484>
 c00a640:	88e2983a 	sll	r17,r17,r3
 c00a644:	80aed83a 	srl	r23,r16,r2
 c00a648:	80e0983a 	sll	r16,r16,r3
 c00a64c:	882ad43a 	srli	r21,r17,16
 c00a650:	9884d83a 	srl	r2,r19,r2
 c00a654:	b809883a 	mov	r4,r23
 c00a658:	a80b883a 	mov	r5,r21
 c00a65c:	98e4983a 	sll	r18,r19,r3
 c00a660:	142cb03a 	or	r22,r2,r16
 c00a664:	c00aed80 	call	c00aed8 <__umodsi3>
 c00a668:	b809883a 	mov	r4,r23
 c00a66c:	a80b883a 	mov	r5,r21
 c00a670:	1027883a 	mov	r19,r2
 c00a674:	8d3fffcc 	andi	r20,r17,65535
 c00a678:	c00ae740 	call	c00ae74 <__udivsi3>
 c00a67c:	a009883a 	mov	r4,r20
 c00a680:	100b883a 	mov	r5,r2
 c00a684:	102f883a 	mov	r23,r2
 c00a688:	c0009680 	call	c000968 <__mulsi3>
 c00a68c:	9826943a 	slli	r19,r19,16
 c00a690:	b008d43a 	srli	r4,r22,16
 c00a694:	24c8b03a 	or	r4,r4,r19
 c00a698:	2080062e 	bgeu	r4,r2,c00a6b4 <__udivdi3+0x4f8>
 c00a69c:	2449883a 	add	r4,r4,r17
 c00a6a0:	b8ffffc4 	addi	r3,r23,-1
 c00a6a4:	24403c36 	bltu	r4,r17,c00a798 <__udivdi3+0x5dc>
 c00a6a8:	20803b2e 	bgeu	r4,r2,c00a798 <__udivdi3+0x5dc>
 c00a6ac:	bdffff84 	addi	r23,r23,-2
 c00a6b0:	2449883a 	add	r4,r4,r17
 c00a6b4:	20a1c83a 	sub	r16,r4,r2
 c00a6b8:	a80b883a 	mov	r5,r21
 c00a6bc:	8009883a 	mov	r4,r16
 c00a6c0:	c00aed80 	call	c00aed8 <__umodsi3>
 c00a6c4:	a80b883a 	mov	r5,r21
 c00a6c8:	8009883a 	mov	r4,r16
 c00a6cc:	1027883a 	mov	r19,r2
 c00a6d0:	c00ae740 	call	c00ae74 <__udivsi3>
 c00a6d4:	a009883a 	mov	r4,r20
 c00a6d8:	100b883a 	mov	r5,r2
 c00a6dc:	9826943a 	slli	r19,r19,16
 c00a6e0:	1039883a 	mov	fp,r2
 c00a6e4:	c0009680 	call	c000968 <__mulsi3>
 c00a6e8:	b13fffcc 	andi	r4,r22,65535
 c00a6ec:	24c8b03a 	or	r4,r4,r19
 c00a6f0:	2080062e 	bgeu	r4,r2,c00a70c <__udivdi3+0x550>
 c00a6f4:	2449883a 	add	r4,r4,r17
 c00a6f8:	e0ffffc4 	addi	r3,fp,-1
 c00a6fc:	24402436 	bltu	r4,r17,c00a790 <__udivdi3+0x5d4>
 c00a700:	2080232e 	bgeu	r4,r2,c00a790 <__udivdi3+0x5d4>
 c00a704:	e73fff84 	addi	fp,fp,-2
 c00a708:	2449883a 	add	r4,r4,r17
 c00a70c:	b82e943a 	slli	r23,r23,16
 c00a710:	20a1c83a 	sub	r16,r4,r2
 c00a714:	bf06b03a 	or	r3,r23,fp
 c00a718:	003f2806 	br	c00a3bc <__alt_data_end+0xfc00a3bc>
 c00a71c:	2021883a 	mov	r16,r4
 c00a720:	003f5306 	br	c00a470 <__alt_data_end+0xfc00a470>
 c00a724:	1821883a 	mov	r16,r3
 c00a728:	003ef406 	br	c00a2fc <__alt_data_end+0xfc00a2fc>
 c00a72c:	1806943a 	slli	r3,r3,16
 c00a730:	9de6983a 	sll	r19,r19,r23
 c00a734:	e73fffcc 	andi	fp,fp,65535
 c00a738:	1f07883a 	add	r3,r3,fp
 c00a73c:	98ffbd2e 	bgeu	r19,r3,c00a634 <__alt_data_end+0xfc00a634>
 c00a740:	90bfffc4 	addi	r2,r18,-1
 c00a744:	0007883a 	mov	r3,zero
 c00a748:	003f4e06 	br	c00a484 <__alt_data_end+0xfc00a484>
 c00a74c:	00800604 	movi	r2,24
 c00a750:	003ef506 	br	c00a328 <__alt_data_end+0xfc00a328>
 c00a754:	00800604 	movi	r2,24
 c00a758:	003f0b06 	br	c00a388 <__alt_data_end+0xfc00a388>
 c00a75c:	00800604 	movi	r2,24
 c00a760:	003ead06 	br	c00a218 <__alt_data_end+0xfc00a218>
 c00a764:	0007883a 	mov	r3,zero
 c00a768:	00800044 	movi	r2,1
 c00a76c:	003f4506 	br	c00a484 <__alt_data_end+0xfc00a484>
 c00a770:	80bf8e2e 	bgeu	r16,r2,c00a5ac <__alt_data_end+0xfc00a5ac>
 c00a774:	8c7fff84 	addi	r17,r17,-2
 c00a778:	8721883a 	add	r16,r16,fp
 c00a77c:	003f8c06 	br	c00a5b0 <__alt_data_end+0xfc00a5b0>
 c00a780:	18bf762e 	bgeu	r3,r2,c00a55c <__alt_data_end+0xfc00a55c>
 c00a784:	ad7fff84 	addi	r21,r21,-2
 c00a788:	1f07883a 	add	r3,r3,fp
 c00a78c:	003f7406 	br	c00a560 <__alt_data_end+0xfc00a560>
 c00a790:	1839883a 	mov	fp,r3
 c00a794:	003fdd06 	br	c00a70c <__alt_data_end+0xfc00a70c>
 c00a798:	182f883a 	mov	r23,r3
 c00a79c:	003fc506 	br	c00a6b4 <__alt_data_end+0xfc00a6b4>
 c00a7a0:	b5bfff84 	addi	r22,r22,-2
 c00a7a4:	3c4f883a 	add	r7,r7,r17
 c00a7a8:	003f1a06 	br	c00a414 <__alt_data_end+0xfc00a414>
 c00a7ac:	b5bfff84 	addi	r22,r22,-2
 c00a7b0:	1c47883a 	add	r3,r3,r17
 c00a7b4:	003ebc06 	br	c00a2a8 <__alt_data_end+0xfc00a2a8>

0c00a7b8 <__umoddi3>:
 c00a7b8:	defff304 	addi	sp,sp,-52
 c00a7bc:	df000b15 	stw	fp,44(sp)
 c00a7c0:	dc400415 	stw	r17,16(sp)
 c00a7c4:	dc000315 	stw	r16,12(sp)
 c00a7c8:	dfc00c15 	stw	ra,48(sp)
 c00a7cc:	ddc00a15 	stw	r23,40(sp)
 c00a7d0:	dd800915 	stw	r22,36(sp)
 c00a7d4:	dd400815 	stw	r21,32(sp)
 c00a7d8:	dd000715 	stw	r20,28(sp)
 c00a7dc:	dcc00615 	stw	r19,24(sp)
 c00a7e0:	dc800515 	stw	r18,20(sp)
 c00a7e4:	2021883a 	mov	r16,r4
 c00a7e8:	2823883a 	mov	r17,r5
 c00a7ec:	2839883a 	mov	fp,r5
 c00a7f0:	3800401e 	bne	r7,zero,c00a8f4 <__umoddi3+0x13c>
 c00a7f4:	3027883a 	mov	r19,r6
 c00a7f8:	2029883a 	mov	r20,r4
 c00a7fc:	2980552e 	bgeu	r5,r6,c00a954 <__umoddi3+0x19c>
 c00a800:	00bfffd4 	movui	r2,65535
 c00a804:	1180a236 	bltu	r2,r6,c00aa90 <__umoddi3+0x2d8>
 c00a808:	01003fc4 	movi	r4,255
 c00a80c:	2189803a 	cmpltu	r4,r4,r6
 c00a810:	200890fa 	slli	r4,r4,3
 c00a814:	3104d83a 	srl	r2,r6,r4
 c00a818:	00c30074 	movhi	r3,3073
 c00a81c:	18c0f904 	addi	r3,r3,996
 c00a820:	1885883a 	add	r2,r3,r2
 c00a824:	10c00003 	ldbu	r3,0(r2)
 c00a828:	00800804 	movi	r2,32
 c00a82c:	1909883a 	add	r4,r3,r4
 c00a830:	1125c83a 	sub	r18,r2,r4
 c00a834:	90000526 	beq	r18,zero,c00a84c <__umoddi3+0x94>
 c00a838:	8ca2983a 	sll	r17,r17,r18
 c00a83c:	8108d83a 	srl	r4,r16,r4
 c00a840:	34a6983a 	sll	r19,r6,r18
 c00a844:	84a8983a 	sll	r20,r16,r18
 c00a848:	2478b03a 	or	fp,r4,r17
 c00a84c:	982cd43a 	srli	r22,r19,16
 c00a850:	e009883a 	mov	r4,fp
 c00a854:	9dffffcc 	andi	r23,r19,65535
 c00a858:	b00b883a 	mov	r5,r22
 c00a85c:	c00aed80 	call	c00aed8 <__umodsi3>
 c00a860:	b00b883a 	mov	r5,r22
 c00a864:	e009883a 	mov	r4,fp
 c00a868:	102b883a 	mov	r21,r2
 c00a86c:	c00ae740 	call	c00ae74 <__udivsi3>
 c00a870:	100b883a 	mov	r5,r2
 c00a874:	b809883a 	mov	r4,r23
 c00a878:	c0009680 	call	c000968 <__mulsi3>
 c00a87c:	a82a943a 	slli	r21,r21,16
 c00a880:	a006d43a 	srli	r3,r20,16
 c00a884:	1d46b03a 	or	r3,r3,r21
 c00a888:	1880032e 	bgeu	r3,r2,c00a898 <__umoddi3+0xe0>
 c00a88c:	1cc7883a 	add	r3,r3,r19
 c00a890:	1cc00136 	bltu	r3,r19,c00a898 <__umoddi3+0xe0>
 c00a894:	18813136 	bltu	r3,r2,c00ad5c <__umoddi3+0x5a4>
 c00a898:	18a1c83a 	sub	r16,r3,r2
 c00a89c:	b00b883a 	mov	r5,r22
 c00a8a0:	8009883a 	mov	r4,r16
 c00a8a4:	c00aed80 	call	c00aed8 <__umodsi3>
 c00a8a8:	b00b883a 	mov	r5,r22
 c00a8ac:	8009883a 	mov	r4,r16
 c00a8b0:	1023883a 	mov	r17,r2
 c00a8b4:	c00ae740 	call	c00ae74 <__udivsi3>
 c00a8b8:	100b883a 	mov	r5,r2
 c00a8bc:	b809883a 	mov	r4,r23
 c00a8c0:	8822943a 	slli	r17,r17,16
 c00a8c4:	c0009680 	call	c000968 <__mulsi3>
 c00a8c8:	a0ffffcc 	andi	r3,r20,65535
 c00a8cc:	1c46b03a 	or	r3,r3,r17
 c00a8d0:	1880042e 	bgeu	r3,r2,c00a8e4 <__umoddi3+0x12c>
 c00a8d4:	1cc7883a 	add	r3,r3,r19
 c00a8d8:	1cc00236 	bltu	r3,r19,c00a8e4 <__umoddi3+0x12c>
 c00a8dc:	1880012e 	bgeu	r3,r2,c00a8e4 <__umoddi3+0x12c>
 c00a8e0:	1cc7883a 	add	r3,r3,r19
 c00a8e4:	1885c83a 	sub	r2,r3,r2
 c00a8e8:	1484d83a 	srl	r2,r2,r18
 c00a8ec:	0007883a 	mov	r3,zero
 c00a8f0:	00005306 	br	c00aa40 <__umoddi3+0x288>
 c00a8f4:	29c05036 	bltu	r5,r7,c00aa38 <__umoddi3+0x280>
 c00a8f8:	00bfffd4 	movui	r2,65535
 c00a8fc:	11c05c2e 	bgeu	r2,r7,c00aa70 <__umoddi3+0x2b8>
 c00a900:	00804034 	movhi	r2,256
 c00a904:	10bfffc4 	addi	r2,r2,-1
 c00a908:	11c10636 	bltu	r2,r7,c00ad24 <__umoddi3+0x56c>
 c00a90c:	01000404 	movi	r4,16
 c00a910:	3904d83a 	srl	r2,r7,r4
 c00a914:	00c30074 	movhi	r3,3073
 c00a918:	18c0f904 	addi	r3,r3,996
 c00a91c:	1885883a 	add	r2,r3,r2
 c00a920:	14c00003 	ldbu	r19,0(r2)
 c00a924:	00c00804 	movi	r3,32
 c00a928:	9927883a 	add	r19,r19,r4
 c00a92c:	1ce9c83a 	sub	r20,r3,r19
 c00a930:	a0005c1e 	bne	r20,zero,c00aaa4 <__umoddi3+0x2ec>
 c00a934:	3c400136 	bltu	r7,r17,c00a93c <__umoddi3+0x184>
 c00a938:	81810a36 	bltu	r16,r6,c00ad64 <__umoddi3+0x5ac>
 c00a93c:	8185c83a 	sub	r2,r16,r6
 c00a940:	89e3c83a 	sub	r17,r17,r7
 c00a944:	8089803a 	cmpltu	r4,r16,r2
 c00a948:	8939c83a 	sub	fp,r17,r4
 c00a94c:	e007883a 	mov	r3,fp
 c00a950:	00003b06 	br	c00aa40 <__umoddi3+0x288>
 c00a954:	3000041e 	bne	r6,zero,c00a968 <__umoddi3+0x1b0>
 c00a958:	000b883a 	mov	r5,zero
 c00a95c:	01000044 	movi	r4,1
 c00a960:	c00ae740 	call	c00ae74 <__udivsi3>
 c00a964:	1027883a 	mov	r19,r2
 c00a968:	00bfffd4 	movui	r2,65535
 c00a96c:	14c0442e 	bgeu	r2,r19,c00aa80 <__umoddi3+0x2c8>
 c00a970:	00804034 	movhi	r2,256
 c00a974:	10bfffc4 	addi	r2,r2,-1
 c00a978:	14c0ec36 	bltu	r2,r19,c00ad2c <__umoddi3+0x574>
 c00a97c:	00800404 	movi	r2,16
 c00a980:	9886d83a 	srl	r3,r19,r2
 c00a984:	01030074 	movhi	r4,3073
 c00a988:	2100f904 	addi	r4,r4,996
 c00a98c:	20c7883a 	add	r3,r4,r3
 c00a990:	18c00003 	ldbu	r3,0(r3)
 c00a994:	1887883a 	add	r3,r3,r2
 c00a998:	00800804 	movi	r2,32
 c00a99c:	10e5c83a 	sub	r18,r2,r3
 c00a9a0:	9000ab1e 	bne	r18,zero,c00ac50 <__umoddi3+0x498>
 c00a9a4:	982cd43a 	srli	r22,r19,16
 c00a9a8:	8ce3c83a 	sub	r17,r17,r19
 c00a9ac:	9dffffcc 	andi	r23,r19,65535
 c00a9b0:	b00b883a 	mov	r5,r22
 c00a9b4:	8809883a 	mov	r4,r17
 c00a9b8:	c00aed80 	call	c00aed8 <__umodsi3>
 c00a9bc:	b00b883a 	mov	r5,r22
 c00a9c0:	8809883a 	mov	r4,r17
 c00a9c4:	102b883a 	mov	r21,r2
 c00a9c8:	c00ae740 	call	c00ae74 <__udivsi3>
 c00a9cc:	b80b883a 	mov	r5,r23
 c00a9d0:	1009883a 	mov	r4,r2
 c00a9d4:	c0009680 	call	c000968 <__mulsi3>
 c00a9d8:	a82a943a 	slli	r21,r21,16
 c00a9dc:	a006d43a 	srli	r3,r20,16
 c00a9e0:	1d46b03a 	or	r3,r3,r21
 c00a9e4:	1880042e 	bgeu	r3,r2,c00a9f8 <__umoddi3+0x240>
 c00a9e8:	1cc7883a 	add	r3,r3,r19
 c00a9ec:	1cc00236 	bltu	r3,r19,c00a9f8 <__umoddi3+0x240>
 c00a9f0:	1880012e 	bgeu	r3,r2,c00a9f8 <__umoddi3+0x240>
 c00a9f4:	1cc7883a 	add	r3,r3,r19
 c00a9f8:	18a1c83a 	sub	r16,r3,r2
 c00a9fc:	b00b883a 	mov	r5,r22
 c00aa00:	8009883a 	mov	r4,r16
 c00aa04:	c00aed80 	call	c00aed8 <__umodsi3>
 c00aa08:	1023883a 	mov	r17,r2
 c00aa0c:	b00b883a 	mov	r5,r22
 c00aa10:	8009883a 	mov	r4,r16
 c00aa14:	c00ae740 	call	c00ae74 <__udivsi3>
 c00aa18:	8822943a 	slli	r17,r17,16
 c00aa1c:	b80b883a 	mov	r5,r23
 c00aa20:	1009883a 	mov	r4,r2
 c00aa24:	c0009680 	call	c000968 <__mulsi3>
 c00aa28:	a53fffcc 	andi	r20,r20,65535
 c00aa2c:	a446b03a 	or	r3,r20,r17
 c00aa30:	18bfac2e 	bgeu	r3,r2,c00a8e4 <__alt_data_end+0xfc00a8e4>
 c00aa34:	003fa706 	br	c00a8d4 <__alt_data_end+0xfc00a8d4>
 c00aa38:	2005883a 	mov	r2,r4
 c00aa3c:	2807883a 	mov	r3,r5
 c00aa40:	dfc00c17 	ldw	ra,48(sp)
 c00aa44:	df000b17 	ldw	fp,44(sp)
 c00aa48:	ddc00a17 	ldw	r23,40(sp)
 c00aa4c:	dd800917 	ldw	r22,36(sp)
 c00aa50:	dd400817 	ldw	r21,32(sp)
 c00aa54:	dd000717 	ldw	r20,28(sp)
 c00aa58:	dcc00617 	ldw	r19,24(sp)
 c00aa5c:	dc800517 	ldw	r18,20(sp)
 c00aa60:	dc400417 	ldw	r17,16(sp)
 c00aa64:	dc000317 	ldw	r16,12(sp)
 c00aa68:	dec00d04 	addi	sp,sp,52
 c00aa6c:	f800283a 	ret
 c00aa70:	04c03fc4 	movi	r19,255
 c00aa74:	99c9803a 	cmpltu	r4,r19,r7
 c00aa78:	200890fa 	slli	r4,r4,3
 c00aa7c:	003fa406 	br	c00a910 <__alt_data_end+0xfc00a910>
 c00aa80:	00803fc4 	movi	r2,255
 c00aa84:	14c5803a 	cmpltu	r2,r2,r19
 c00aa88:	100490fa 	slli	r2,r2,3
 c00aa8c:	003fbc06 	br	c00a980 <__alt_data_end+0xfc00a980>
 c00aa90:	00804034 	movhi	r2,256
 c00aa94:	10bfffc4 	addi	r2,r2,-1
 c00aa98:	1180a636 	bltu	r2,r6,c00ad34 <__umoddi3+0x57c>
 c00aa9c:	01000404 	movi	r4,16
 c00aaa0:	003f5c06 	br	c00a814 <__alt_data_end+0xfc00a814>
 c00aaa4:	3d0e983a 	sll	r7,r7,r20
 c00aaa8:	34ead83a 	srl	r21,r6,r19
 c00aaac:	8cc6d83a 	srl	r3,r17,r19
 c00aab0:	8d10983a 	sll	r8,r17,r20
 c00aab4:	3d6ab03a 	or	r21,r7,r21
 c00aab8:	a82cd43a 	srli	r22,r21,16
 c00aabc:	84e2d83a 	srl	r17,r16,r19
 c00aac0:	1809883a 	mov	r4,r3
 c00aac4:	b00b883a 	mov	r5,r22
 c00aac8:	8a22b03a 	or	r17,r17,r8
 c00aacc:	3524983a 	sll	r18,r6,r20
 c00aad0:	dc400015 	stw	r17,0(sp)
 c00aad4:	d8c00115 	stw	r3,4(sp)
 c00aad8:	c00aed80 	call	c00aed8 <__umodsi3>
 c00aadc:	d8c00117 	ldw	r3,4(sp)
 c00aae0:	b00b883a 	mov	r5,r22
 c00aae4:	1039883a 	mov	fp,r2
 c00aae8:	1809883a 	mov	r4,r3
 c00aaec:	c00ae740 	call	c00ae74 <__udivsi3>
 c00aaf0:	adffffcc 	andi	r23,r21,65535
 c00aaf4:	100b883a 	mov	r5,r2
 c00aaf8:	b809883a 	mov	r4,r23
 c00aafc:	1023883a 	mov	r17,r2
 c00ab00:	c0009680 	call	c000968 <__mulsi3>
 c00ab04:	d9400017 	ldw	r5,0(sp)
 c00ab08:	e008943a 	slli	r4,fp,16
 c00ab0c:	8520983a 	sll	r16,r16,r20
 c00ab10:	2806d43a 	srli	r3,r5,16
 c00ab14:	1906b03a 	or	r3,r3,r4
 c00ab18:	1880042e 	bgeu	r3,r2,c00ab2c <__umoddi3+0x374>
 c00ab1c:	1d47883a 	add	r3,r3,r21
 c00ab20:	893fffc4 	addi	r4,r17,-1
 c00ab24:	1d40892e 	bgeu	r3,r21,c00ad4c <__umoddi3+0x594>
 c00ab28:	2023883a 	mov	r17,r4
 c00ab2c:	18b9c83a 	sub	fp,r3,r2
 c00ab30:	b00b883a 	mov	r5,r22
 c00ab34:	e009883a 	mov	r4,fp
 c00ab38:	c00aed80 	call	c00aed8 <__umodsi3>
 c00ab3c:	b00b883a 	mov	r5,r22
 c00ab40:	e009883a 	mov	r4,fp
 c00ab44:	d8800215 	stw	r2,8(sp)
 c00ab48:	c00ae740 	call	c00ae74 <__udivsi3>
 c00ab4c:	100b883a 	mov	r5,r2
 c00ab50:	b809883a 	mov	r4,r23
 c00ab54:	102d883a 	mov	r22,r2
 c00ab58:	c0009680 	call	c000968 <__mulsi3>
 c00ab5c:	d9800217 	ldw	r6,8(sp)
 c00ab60:	d8c00017 	ldw	r3,0(sp)
 c00ab64:	300c943a 	slli	r6,r6,16
 c00ab68:	1a3fffcc 	andi	r8,r3,65535
 c00ab6c:	4190b03a 	or	r8,r8,r6
 c00ab70:	4080042e 	bgeu	r8,r2,c00ab84 <__umoddi3+0x3cc>
 c00ab74:	4551883a 	add	r8,r8,r21
 c00ab78:	b0ffffc4 	addi	r3,r22,-1
 c00ab7c:	45406f2e 	bgeu	r8,r21,c00ad3c <__umoddi3+0x584>
 c00ab80:	182d883a 	mov	r22,r3
 c00ab84:	880e943a 	slli	r7,r17,16
 c00ab88:	9006d43a 	srli	r3,r18,16
 c00ab8c:	91bfffcc 	andi	r6,r18,65535
 c00ab90:	3dacb03a 	or	r22,r7,r22
 c00ab94:	b02ed43a 	srli	r23,r22,16
 c00ab98:	b5bfffcc 	andi	r22,r22,65535
 c00ab9c:	300b883a 	mov	r5,r6
 c00aba0:	b009883a 	mov	r4,r22
 c00aba4:	40a3c83a 	sub	r17,r8,r2
 c00aba8:	d8c00115 	stw	r3,4(sp)
 c00abac:	d9800215 	stw	r6,8(sp)
 c00abb0:	c0009680 	call	c000968 <__mulsi3>
 c00abb4:	d9800217 	ldw	r6,8(sp)
 c00abb8:	b809883a 	mov	r4,r23
 c00abbc:	1039883a 	mov	fp,r2
 c00abc0:	300b883a 	mov	r5,r6
 c00abc4:	c0009680 	call	c000968 <__mulsi3>
 c00abc8:	d8c00117 	ldw	r3,4(sp)
 c00abcc:	b809883a 	mov	r4,r23
 c00abd0:	d8800215 	stw	r2,8(sp)
 c00abd4:	180b883a 	mov	r5,r3
 c00abd8:	c0009680 	call	c000968 <__mulsi3>
 c00abdc:	d8c00117 	ldw	r3,4(sp)
 c00abe0:	b009883a 	mov	r4,r22
 c00abe4:	102f883a 	mov	r23,r2
 c00abe8:	180b883a 	mov	r5,r3
 c00abec:	c0009680 	call	c000968 <__mulsi3>
 c00abf0:	d9800217 	ldw	r6,8(sp)
 c00abf4:	e006d43a 	srli	r3,fp,16
 c00abf8:	1185883a 	add	r2,r2,r6
 c00abfc:	1885883a 	add	r2,r3,r2
 c00ac00:	1180022e 	bgeu	r2,r6,c00ac0c <__umoddi3+0x454>
 c00ac04:	00c00074 	movhi	r3,1
 c00ac08:	b8ef883a 	add	r23,r23,r3
 c00ac0c:	1006d43a 	srli	r3,r2,16
 c00ac10:	1004943a 	slli	r2,r2,16
 c00ac14:	e73fffcc 	andi	fp,fp,65535
 c00ac18:	1dc7883a 	add	r3,r3,r23
 c00ac1c:	1739883a 	add	fp,r2,fp
 c00ac20:	88c03a36 	bltu	r17,r3,c00ad0c <__umoddi3+0x554>
 c00ac24:	88c05126 	beq	r17,r3,c00ad6c <__umoddi3+0x5b4>
 c00ac28:	88c9c83a 	sub	r4,r17,r3
 c00ac2c:	e00f883a 	mov	r7,fp
 c00ac30:	81cfc83a 	sub	r7,r16,r7
 c00ac34:	81c7803a 	cmpltu	r3,r16,r7
 c00ac38:	20c7c83a 	sub	r3,r4,r3
 c00ac3c:	1cc4983a 	sll	r2,r3,r19
 c00ac40:	3d0ed83a 	srl	r7,r7,r20
 c00ac44:	1d06d83a 	srl	r3,r3,r20
 c00ac48:	11c4b03a 	or	r2,r2,r7
 c00ac4c:	003f7c06 	br	c00aa40 <__alt_data_end+0xfc00aa40>
 c00ac50:	9ca6983a 	sll	r19,r19,r18
 c00ac54:	88f8d83a 	srl	fp,r17,r3
 c00ac58:	80c4d83a 	srl	r2,r16,r3
 c00ac5c:	982cd43a 	srli	r22,r19,16
 c00ac60:	8ca2983a 	sll	r17,r17,r18
 c00ac64:	e009883a 	mov	r4,fp
 c00ac68:	b00b883a 	mov	r5,r22
 c00ac6c:	146ab03a 	or	r21,r2,r17
 c00ac70:	c00aed80 	call	c00aed8 <__umodsi3>
 c00ac74:	b00b883a 	mov	r5,r22
 c00ac78:	e009883a 	mov	r4,fp
 c00ac7c:	1029883a 	mov	r20,r2
 c00ac80:	9dffffcc 	andi	r23,r19,65535
 c00ac84:	c00ae740 	call	c00ae74 <__udivsi3>
 c00ac88:	b809883a 	mov	r4,r23
 c00ac8c:	100b883a 	mov	r5,r2
 c00ac90:	c0009680 	call	c000968 <__mulsi3>
 c00ac94:	a008943a 	slli	r4,r20,16
 c00ac98:	a806d43a 	srli	r3,r21,16
 c00ac9c:	84a8983a 	sll	r20,r16,r18
 c00aca0:	1906b03a 	or	r3,r3,r4
 c00aca4:	1880042e 	bgeu	r3,r2,c00acb8 <__umoddi3+0x500>
 c00aca8:	1cc7883a 	add	r3,r3,r19
 c00acac:	1cc00236 	bltu	r3,r19,c00acb8 <__umoddi3+0x500>
 c00acb0:	1880012e 	bgeu	r3,r2,c00acb8 <__umoddi3+0x500>
 c00acb4:	1cc7883a 	add	r3,r3,r19
 c00acb8:	18a3c83a 	sub	r17,r3,r2
 c00acbc:	b00b883a 	mov	r5,r22
 c00acc0:	8809883a 	mov	r4,r17
 c00acc4:	c00aed80 	call	c00aed8 <__umodsi3>
 c00acc8:	b00b883a 	mov	r5,r22
 c00accc:	8809883a 	mov	r4,r17
 c00acd0:	1021883a 	mov	r16,r2
 c00acd4:	c00ae740 	call	c00ae74 <__udivsi3>
 c00acd8:	100b883a 	mov	r5,r2
 c00acdc:	b809883a 	mov	r4,r23
 c00ace0:	8020943a 	slli	r16,r16,16
 c00ace4:	c0009680 	call	c000968 <__mulsi3>
 c00ace8:	a8ffffcc 	andi	r3,r21,65535
 c00acec:	1c06b03a 	or	r3,r3,r16
 c00acf0:	1880042e 	bgeu	r3,r2,c00ad04 <__umoddi3+0x54c>
 c00acf4:	1cc7883a 	add	r3,r3,r19
 c00acf8:	1cc00236 	bltu	r3,r19,c00ad04 <__umoddi3+0x54c>
 c00acfc:	1880012e 	bgeu	r3,r2,c00ad04 <__umoddi3+0x54c>
 c00ad00:	1cc7883a 	add	r3,r3,r19
 c00ad04:	18a3c83a 	sub	r17,r3,r2
 c00ad08:	003f2906 	br	c00a9b0 <__alt_data_end+0xfc00a9b0>
 c00ad0c:	e48fc83a 	sub	r7,fp,r18
 c00ad10:	1d49c83a 	sub	r4,r3,r21
 c00ad14:	e1f9803a 	cmpltu	fp,fp,r7
 c00ad18:	2739c83a 	sub	fp,r4,fp
 c00ad1c:	8f09c83a 	sub	r4,r17,fp
 c00ad20:	003fc306 	br	c00ac30 <__alt_data_end+0xfc00ac30>
 c00ad24:	01000604 	movi	r4,24
 c00ad28:	003ef906 	br	c00a910 <__alt_data_end+0xfc00a910>
 c00ad2c:	00800604 	movi	r2,24
 c00ad30:	003f1306 	br	c00a980 <__alt_data_end+0xfc00a980>
 c00ad34:	01000604 	movi	r4,24
 c00ad38:	003eb606 	br	c00a814 <__alt_data_end+0xfc00a814>
 c00ad3c:	40bf902e 	bgeu	r8,r2,c00ab80 <__alt_data_end+0xfc00ab80>
 c00ad40:	b5bfff84 	addi	r22,r22,-2
 c00ad44:	4551883a 	add	r8,r8,r21
 c00ad48:	003f8e06 	br	c00ab84 <__alt_data_end+0xfc00ab84>
 c00ad4c:	18bf762e 	bgeu	r3,r2,c00ab28 <__alt_data_end+0xfc00ab28>
 c00ad50:	8c7fff84 	addi	r17,r17,-2
 c00ad54:	1d47883a 	add	r3,r3,r21
 c00ad58:	003f7406 	br	c00ab2c <__alt_data_end+0xfc00ab2c>
 c00ad5c:	1cc7883a 	add	r3,r3,r19
 c00ad60:	003ecd06 	br	c00a898 <__alt_data_end+0xfc00a898>
 c00ad64:	8005883a 	mov	r2,r16
 c00ad68:	003ef806 	br	c00a94c <__alt_data_end+0xfc00a94c>
 c00ad6c:	873fe736 	bltu	r16,fp,c00ad0c <__alt_data_end+0xfc00ad0c>
 c00ad70:	e00f883a 	mov	r7,fp
 c00ad74:	0009883a 	mov	r4,zero
 c00ad78:	003fad06 	br	c00ac30 <__alt_data_end+0xfc00ac30>

0c00ad7c <__divsi3>:
 c00ad7c:	20001b16 	blt	r4,zero,c00adec <__divsi3+0x70>
 c00ad80:	000f883a 	mov	r7,zero
 c00ad84:	28001616 	blt	r5,zero,c00ade0 <__divsi3+0x64>
 c00ad88:	200d883a 	mov	r6,r4
 c00ad8c:	29001a2e 	bgeu	r5,r4,c00adf8 <__divsi3+0x7c>
 c00ad90:	00800804 	movi	r2,32
 c00ad94:	00c00044 	movi	r3,1
 c00ad98:	00000106 	br	c00ada0 <__divsi3+0x24>
 c00ad9c:	10000d26 	beq	r2,zero,c00add4 <__divsi3+0x58>
 c00ada0:	294b883a 	add	r5,r5,r5
 c00ada4:	10bfffc4 	addi	r2,r2,-1
 c00ada8:	18c7883a 	add	r3,r3,r3
 c00adac:	293ffb36 	bltu	r5,r4,c00ad9c <__alt_data_end+0xfc00ad9c>
 c00adb0:	0005883a 	mov	r2,zero
 c00adb4:	18000726 	beq	r3,zero,c00add4 <__divsi3+0x58>
 c00adb8:	0005883a 	mov	r2,zero
 c00adbc:	31400236 	bltu	r6,r5,c00adc8 <__divsi3+0x4c>
 c00adc0:	314dc83a 	sub	r6,r6,r5
 c00adc4:	10c4b03a 	or	r2,r2,r3
 c00adc8:	1806d07a 	srli	r3,r3,1
 c00adcc:	280ad07a 	srli	r5,r5,1
 c00add0:	183ffa1e 	bne	r3,zero,c00adbc <__alt_data_end+0xfc00adbc>
 c00add4:	38000126 	beq	r7,zero,c00addc <__divsi3+0x60>
 c00add8:	0085c83a 	sub	r2,zero,r2
 c00addc:	f800283a 	ret
 c00ade0:	014bc83a 	sub	r5,zero,r5
 c00ade4:	39c0005c 	xori	r7,r7,1
 c00ade8:	003fe706 	br	c00ad88 <__alt_data_end+0xfc00ad88>
 c00adec:	0109c83a 	sub	r4,zero,r4
 c00adf0:	01c00044 	movi	r7,1
 c00adf4:	003fe306 	br	c00ad84 <__alt_data_end+0xfc00ad84>
 c00adf8:	00c00044 	movi	r3,1
 c00adfc:	003fee06 	br	c00adb8 <__alt_data_end+0xfc00adb8>

0c00ae00 <__modsi3>:
 c00ae00:	20001716 	blt	r4,zero,c00ae60 <__modsi3+0x60>
 c00ae04:	000f883a 	mov	r7,zero
 c00ae08:	2005883a 	mov	r2,r4
 c00ae0c:	28001216 	blt	r5,zero,c00ae58 <__modsi3+0x58>
 c00ae10:	2900162e 	bgeu	r5,r4,c00ae6c <__modsi3+0x6c>
 c00ae14:	01800804 	movi	r6,32
 c00ae18:	00c00044 	movi	r3,1
 c00ae1c:	00000106 	br	c00ae24 <__modsi3+0x24>
 c00ae20:	30000a26 	beq	r6,zero,c00ae4c <__modsi3+0x4c>
 c00ae24:	294b883a 	add	r5,r5,r5
 c00ae28:	31bfffc4 	addi	r6,r6,-1
 c00ae2c:	18c7883a 	add	r3,r3,r3
 c00ae30:	293ffb36 	bltu	r5,r4,c00ae20 <__alt_data_end+0xfc00ae20>
 c00ae34:	18000526 	beq	r3,zero,c00ae4c <__modsi3+0x4c>
 c00ae38:	1806d07a 	srli	r3,r3,1
 c00ae3c:	11400136 	bltu	r2,r5,c00ae44 <__modsi3+0x44>
 c00ae40:	1145c83a 	sub	r2,r2,r5
 c00ae44:	280ad07a 	srli	r5,r5,1
 c00ae48:	183ffb1e 	bne	r3,zero,c00ae38 <__alt_data_end+0xfc00ae38>
 c00ae4c:	38000126 	beq	r7,zero,c00ae54 <__modsi3+0x54>
 c00ae50:	0085c83a 	sub	r2,zero,r2
 c00ae54:	f800283a 	ret
 c00ae58:	014bc83a 	sub	r5,zero,r5
 c00ae5c:	003fec06 	br	c00ae10 <__alt_data_end+0xfc00ae10>
 c00ae60:	0109c83a 	sub	r4,zero,r4
 c00ae64:	01c00044 	movi	r7,1
 c00ae68:	003fe706 	br	c00ae08 <__alt_data_end+0xfc00ae08>
 c00ae6c:	00c00044 	movi	r3,1
 c00ae70:	003ff106 	br	c00ae38 <__alt_data_end+0xfc00ae38>

0c00ae74 <__udivsi3>:
 c00ae74:	200d883a 	mov	r6,r4
 c00ae78:	2900152e 	bgeu	r5,r4,c00aed0 <__udivsi3+0x5c>
 c00ae7c:	28001416 	blt	r5,zero,c00aed0 <__udivsi3+0x5c>
 c00ae80:	00800804 	movi	r2,32
 c00ae84:	00c00044 	movi	r3,1
 c00ae88:	00000206 	br	c00ae94 <__udivsi3+0x20>
 c00ae8c:	10000e26 	beq	r2,zero,c00aec8 <__udivsi3+0x54>
 c00ae90:	28000516 	blt	r5,zero,c00aea8 <__udivsi3+0x34>
 c00ae94:	294b883a 	add	r5,r5,r5
 c00ae98:	10bfffc4 	addi	r2,r2,-1
 c00ae9c:	18c7883a 	add	r3,r3,r3
 c00aea0:	293ffa36 	bltu	r5,r4,c00ae8c <__alt_data_end+0xfc00ae8c>
 c00aea4:	18000826 	beq	r3,zero,c00aec8 <__udivsi3+0x54>
 c00aea8:	0005883a 	mov	r2,zero
 c00aeac:	31400236 	bltu	r6,r5,c00aeb8 <__udivsi3+0x44>
 c00aeb0:	314dc83a 	sub	r6,r6,r5
 c00aeb4:	10c4b03a 	or	r2,r2,r3
 c00aeb8:	1806d07a 	srli	r3,r3,1
 c00aebc:	280ad07a 	srli	r5,r5,1
 c00aec0:	183ffa1e 	bne	r3,zero,c00aeac <__alt_data_end+0xfc00aeac>
 c00aec4:	f800283a 	ret
 c00aec8:	0005883a 	mov	r2,zero
 c00aecc:	f800283a 	ret
 c00aed0:	00c00044 	movi	r3,1
 c00aed4:	003ff406 	br	c00aea8 <__alt_data_end+0xfc00aea8>

0c00aed8 <__umodsi3>:
 c00aed8:	2005883a 	mov	r2,r4
 c00aedc:	2900122e 	bgeu	r5,r4,c00af28 <__umodsi3+0x50>
 c00aee0:	28001116 	blt	r5,zero,c00af28 <__umodsi3+0x50>
 c00aee4:	01800804 	movi	r6,32
 c00aee8:	00c00044 	movi	r3,1
 c00aeec:	00000206 	br	c00aef8 <__umodsi3+0x20>
 c00aef0:	30000c26 	beq	r6,zero,c00af24 <__umodsi3+0x4c>
 c00aef4:	28000516 	blt	r5,zero,c00af0c <__umodsi3+0x34>
 c00aef8:	294b883a 	add	r5,r5,r5
 c00aefc:	31bfffc4 	addi	r6,r6,-1
 c00af00:	18c7883a 	add	r3,r3,r3
 c00af04:	293ffa36 	bltu	r5,r4,c00aef0 <__alt_data_end+0xfc00aef0>
 c00af08:	18000626 	beq	r3,zero,c00af24 <__umodsi3+0x4c>
 c00af0c:	1806d07a 	srli	r3,r3,1
 c00af10:	11400136 	bltu	r2,r5,c00af18 <__umodsi3+0x40>
 c00af14:	1145c83a 	sub	r2,r2,r5
 c00af18:	280ad07a 	srli	r5,r5,1
 c00af1c:	183ffb1e 	bne	r3,zero,c00af0c <__alt_data_end+0xfc00af0c>
 c00af20:	f800283a 	ret
 c00af24:	f800283a 	ret
 c00af28:	00c00044 	movi	r3,1
 c00af2c:	003ff706 	br	c00af0c <__alt_data_end+0xfc00af0c>

0c00af30 <__adddf3>:
 c00af30:	02c00434 	movhi	r11,16
 c00af34:	5affffc4 	addi	r11,r11,-1
 c00af38:	2806d7fa 	srli	r3,r5,31
 c00af3c:	2ad4703a 	and	r10,r5,r11
 c00af40:	3ad2703a 	and	r9,r7,r11
 c00af44:	3804d53a 	srli	r2,r7,20
 c00af48:	3018d77a 	srli	r12,r6,29
 c00af4c:	280ad53a 	srli	r5,r5,20
 c00af50:	501490fa 	slli	r10,r10,3
 c00af54:	2010d77a 	srli	r8,r4,29
 c00af58:	481290fa 	slli	r9,r9,3
 c00af5c:	380ed7fa 	srli	r7,r7,31
 c00af60:	defffb04 	addi	sp,sp,-20
 c00af64:	dc800215 	stw	r18,8(sp)
 c00af68:	dc400115 	stw	r17,4(sp)
 c00af6c:	dc000015 	stw	r16,0(sp)
 c00af70:	dfc00415 	stw	ra,16(sp)
 c00af74:	dcc00315 	stw	r19,12(sp)
 c00af78:	1c803fcc 	andi	r18,r3,255
 c00af7c:	2c01ffcc 	andi	r16,r5,2047
 c00af80:	5210b03a 	or	r8,r10,r8
 c00af84:	202290fa 	slli	r17,r4,3
 c00af88:	1081ffcc 	andi	r2,r2,2047
 c00af8c:	4b12b03a 	or	r9,r9,r12
 c00af90:	300c90fa 	slli	r6,r6,3
 c00af94:	91c07526 	beq	r18,r7,c00b16c <__adddf3+0x23c>
 c00af98:	8087c83a 	sub	r3,r16,r2
 c00af9c:	00c0ab0e 	bge	zero,r3,c00b24c <__adddf3+0x31c>
 c00afa0:	10002a1e 	bne	r2,zero,c00b04c <__adddf3+0x11c>
 c00afa4:	4984b03a 	or	r2,r9,r6
 c00afa8:	1000961e 	bne	r2,zero,c00b204 <__adddf3+0x2d4>
 c00afac:	888001cc 	andi	r2,r17,7
 c00afb0:	10000726 	beq	r2,zero,c00afd0 <__adddf3+0xa0>
 c00afb4:	888003cc 	andi	r2,r17,15
 c00afb8:	00c00104 	movi	r3,4
 c00afbc:	10c00426 	beq	r2,r3,c00afd0 <__adddf3+0xa0>
 c00afc0:	88c7883a 	add	r3,r17,r3
 c00afc4:	1c63803a 	cmpltu	r17,r3,r17
 c00afc8:	4451883a 	add	r8,r8,r17
 c00afcc:	1823883a 	mov	r17,r3
 c00afd0:	4080202c 	andhi	r2,r8,128
 c00afd4:	10005926 	beq	r2,zero,c00b13c <__adddf3+0x20c>
 c00afd8:	84000044 	addi	r16,r16,1
 c00afdc:	0081ffc4 	movi	r2,2047
 c00afe0:	8080ba26 	beq	r16,r2,c00b2cc <__adddf3+0x39c>
 c00afe4:	00bfe034 	movhi	r2,65408
 c00afe8:	10bfffc4 	addi	r2,r2,-1
 c00afec:	4090703a 	and	r8,r8,r2
 c00aff0:	4004977a 	slli	r2,r8,29
 c00aff4:	4010927a 	slli	r8,r8,9
 c00aff8:	8822d0fa 	srli	r17,r17,3
 c00affc:	8401ffcc 	andi	r16,r16,2047
 c00b000:	4010d33a 	srli	r8,r8,12
 c00b004:	9007883a 	mov	r3,r18
 c00b008:	1444b03a 	or	r2,r2,r17
 c00b00c:	8401ffcc 	andi	r16,r16,2047
 c00b010:	8020953a 	slli	r16,r16,20
 c00b014:	18c03fcc 	andi	r3,r3,255
 c00b018:	01000434 	movhi	r4,16
 c00b01c:	213fffc4 	addi	r4,r4,-1
 c00b020:	180697fa 	slli	r3,r3,31
 c00b024:	4110703a 	and	r8,r8,r4
 c00b028:	4410b03a 	or	r8,r8,r16
 c00b02c:	40c6b03a 	or	r3,r8,r3
 c00b030:	dfc00417 	ldw	ra,16(sp)
 c00b034:	dcc00317 	ldw	r19,12(sp)
 c00b038:	dc800217 	ldw	r18,8(sp)
 c00b03c:	dc400117 	ldw	r17,4(sp)
 c00b040:	dc000017 	ldw	r16,0(sp)
 c00b044:	dec00504 	addi	sp,sp,20
 c00b048:	f800283a 	ret
 c00b04c:	0081ffc4 	movi	r2,2047
 c00b050:	80bfd626 	beq	r16,r2,c00afac <__alt_data_end+0xfc00afac>
 c00b054:	4a402034 	orhi	r9,r9,128
 c00b058:	00800e04 	movi	r2,56
 c00b05c:	10c09f16 	blt	r2,r3,c00b2dc <__adddf3+0x3ac>
 c00b060:	008007c4 	movi	r2,31
 c00b064:	10c0c216 	blt	r2,r3,c00b370 <__adddf3+0x440>
 c00b068:	00800804 	movi	r2,32
 c00b06c:	10c5c83a 	sub	r2,r2,r3
 c00b070:	488a983a 	sll	r5,r9,r2
 c00b074:	30c8d83a 	srl	r4,r6,r3
 c00b078:	3084983a 	sll	r2,r6,r2
 c00b07c:	48c6d83a 	srl	r3,r9,r3
 c00b080:	290cb03a 	or	r6,r5,r4
 c00b084:	1004c03a 	cmpne	r2,r2,zero
 c00b088:	308cb03a 	or	r6,r6,r2
 c00b08c:	898dc83a 	sub	r6,r17,r6
 c00b090:	89a3803a 	cmpltu	r17,r17,r6
 c00b094:	40d1c83a 	sub	r8,r8,r3
 c00b098:	4451c83a 	sub	r8,r8,r17
 c00b09c:	3023883a 	mov	r17,r6
 c00b0a0:	4080202c 	andhi	r2,r8,128
 c00b0a4:	10002326 	beq	r2,zero,c00b134 <__adddf3+0x204>
 c00b0a8:	04c02034 	movhi	r19,128
 c00b0ac:	9cffffc4 	addi	r19,r19,-1
 c00b0b0:	44e6703a 	and	r19,r8,r19
 c00b0b4:	98007626 	beq	r19,zero,c00b290 <__adddf3+0x360>
 c00b0b8:	9809883a 	mov	r4,r19
 c00b0bc:	c00d7700 	call	c00d770 <__clzsi2>
 c00b0c0:	10fffe04 	addi	r3,r2,-8
 c00b0c4:	010007c4 	movi	r4,31
 c00b0c8:	20c07716 	blt	r4,r3,c00b2a8 <__adddf3+0x378>
 c00b0cc:	00800804 	movi	r2,32
 c00b0d0:	10c5c83a 	sub	r2,r2,r3
 c00b0d4:	8884d83a 	srl	r2,r17,r2
 c00b0d8:	98d0983a 	sll	r8,r19,r3
 c00b0dc:	88e2983a 	sll	r17,r17,r3
 c00b0e0:	1204b03a 	or	r2,r2,r8
 c00b0e4:	1c007416 	blt	r3,r16,c00b2b8 <__adddf3+0x388>
 c00b0e8:	1c21c83a 	sub	r16,r3,r16
 c00b0ec:	82000044 	addi	r8,r16,1
 c00b0f0:	00c007c4 	movi	r3,31
 c00b0f4:	1a009116 	blt	r3,r8,c00b33c <__adddf3+0x40c>
 c00b0f8:	00c00804 	movi	r3,32
 c00b0fc:	1a07c83a 	sub	r3,r3,r8
 c00b100:	8a08d83a 	srl	r4,r17,r8
 c00b104:	88e2983a 	sll	r17,r17,r3
 c00b108:	10c6983a 	sll	r3,r2,r3
 c00b10c:	1210d83a 	srl	r8,r2,r8
 c00b110:	8804c03a 	cmpne	r2,r17,zero
 c00b114:	1906b03a 	or	r3,r3,r4
 c00b118:	18a2b03a 	or	r17,r3,r2
 c00b11c:	0021883a 	mov	r16,zero
 c00b120:	003fa206 	br	c00afac <__alt_data_end+0xfc00afac>
 c00b124:	1890b03a 	or	r8,r3,r2
 c00b128:	40017d26 	beq	r8,zero,c00b720 <__adddf3+0x7f0>
 c00b12c:	1011883a 	mov	r8,r2
 c00b130:	1823883a 	mov	r17,r3
 c00b134:	888001cc 	andi	r2,r17,7
 c00b138:	103f9e1e 	bne	r2,zero,c00afb4 <__alt_data_end+0xfc00afb4>
 c00b13c:	4004977a 	slli	r2,r8,29
 c00b140:	8822d0fa 	srli	r17,r17,3
 c00b144:	4010d0fa 	srli	r8,r8,3
 c00b148:	9007883a 	mov	r3,r18
 c00b14c:	1444b03a 	or	r2,r2,r17
 c00b150:	0101ffc4 	movi	r4,2047
 c00b154:	81002426 	beq	r16,r4,c00b1e8 <__adddf3+0x2b8>
 c00b158:	8120703a 	and	r16,r16,r4
 c00b15c:	01000434 	movhi	r4,16
 c00b160:	213fffc4 	addi	r4,r4,-1
 c00b164:	4110703a 	and	r8,r8,r4
 c00b168:	003fa806 	br	c00b00c <__alt_data_end+0xfc00b00c>
 c00b16c:	8089c83a 	sub	r4,r16,r2
 c00b170:	01005e0e 	bge	zero,r4,c00b2ec <__adddf3+0x3bc>
 c00b174:	10002b26 	beq	r2,zero,c00b224 <__adddf3+0x2f4>
 c00b178:	0081ffc4 	movi	r2,2047
 c00b17c:	80bf8b26 	beq	r16,r2,c00afac <__alt_data_end+0xfc00afac>
 c00b180:	4a402034 	orhi	r9,r9,128
 c00b184:	00800e04 	movi	r2,56
 c00b188:	1100a40e 	bge	r2,r4,c00b41c <__adddf3+0x4ec>
 c00b18c:	498cb03a 	or	r6,r9,r6
 c00b190:	300ac03a 	cmpne	r5,r6,zero
 c00b194:	0013883a 	mov	r9,zero
 c00b198:	2c4b883a 	add	r5,r5,r17
 c00b19c:	2c63803a 	cmpltu	r17,r5,r17
 c00b1a0:	4a11883a 	add	r8,r9,r8
 c00b1a4:	8a11883a 	add	r8,r17,r8
 c00b1a8:	2823883a 	mov	r17,r5
 c00b1ac:	4080202c 	andhi	r2,r8,128
 c00b1b0:	103fe026 	beq	r2,zero,c00b134 <__alt_data_end+0xfc00b134>
 c00b1b4:	84000044 	addi	r16,r16,1
 c00b1b8:	0081ffc4 	movi	r2,2047
 c00b1bc:	8080d226 	beq	r16,r2,c00b508 <__adddf3+0x5d8>
 c00b1c0:	00bfe034 	movhi	r2,65408
 c00b1c4:	10bfffc4 	addi	r2,r2,-1
 c00b1c8:	4090703a 	and	r8,r8,r2
 c00b1cc:	880ad07a 	srli	r5,r17,1
 c00b1d0:	400897fa 	slli	r4,r8,31
 c00b1d4:	88c0004c 	andi	r3,r17,1
 c00b1d8:	28e2b03a 	or	r17,r5,r3
 c00b1dc:	4010d07a 	srli	r8,r8,1
 c00b1e0:	2462b03a 	or	r17,r4,r17
 c00b1e4:	003f7106 	br	c00afac <__alt_data_end+0xfc00afac>
 c00b1e8:	4088b03a 	or	r4,r8,r2
 c00b1ec:	20014526 	beq	r4,zero,c00b704 <__adddf3+0x7d4>
 c00b1f0:	01000434 	movhi	r4,16
 c00b1f4:	42000234 	orhi	r8,r8,8
 c00b1f8:	213fffc4 	addi	r4,r4,-1
 c00b1fc:	4110703a 	and	r8,r8,r4
 c00b200:	003f8206 	br	c00b00c <__alt_data_end+0xfc00b00c>
 c00b204:	18ffffc4 	addi	r3,r3,-1
 c00b208:	1800491e 	bne	r3,zero,c00b330 <__adddf3+0x400>
 c00b20c:	898bc83a 	sub	r5,r17,r6
 c00b210:	8963803a 	cmpltu	r17,r17,r5
 c00b214:	4251c83a 	sub	r8,r8,r9
 c00b218:	4451c83a 	sub	r8,r8,r17
 c00b21c:	2823883a 	mov	r17,r5
 c00b220:	003f9f06 	br	c00b0a0 <__alt_data_end+0xfc00b0a0>
 c00b224:	4984b03a 	or	r2,r9,r6
 c00b228:	103f6026 	beq	r2,zero,c00afac <__alt_data_end+0xfc00afac>
 c00b22c:	213fffc4 	addi	r4,r4,-1
 c00b230:	2000931e 	bne	r4,zero,c00b480 <__adddf3+0x550>
 c00b234:	898d883a 	add	r6,r17,r6
 c00b238:	3463803a 	cmpltu	r17,r6,r17
 c00b23c:	4251883a 	add	r8,r8,r9
 c00b240:	8a11883a 	add	r8,r17,r8
 c00b244:	3023883a 	mov	r17,r6
 c00b248:	003fd806 	br	c00b1ac <__alt_data_end+0xfc00b1ac>
 c00b24c:	1800541e 	bne	r3,zero,c00b3a0 <__adddf3+0x470>
 c00b250:	80800044 	addi	r2,r16,1
 c00b254:	1081ffcc 	andi	r2,r2,2047
 c00b258:	00c00044 	movi	r3,1
 c00b25c:	1880a00e 	bge	r3,r2,c00b4e0 <__adddf3+0x5b0>
 c00b260:	8989c83a 	sub	r4,r17,r6
 c00b264:	8905803a 	cmpltu	r2,r17,r4
 c00b268:	4267c83a 	sub	r19,r8,r9
 c00b26c:	98a7c83a 	sub	r19,r19,r2
 c00b270:	9880202c 	andhi	r2,r19,128
 c00b274:	10006326 	beq	r2,zero,c00b404 <__adddf3+0x4d4>
 c00b278:	3463c83a 	sub	r17,r6,r17
 c00b27c:	4a07c83a 	sub	r3,r9,r8
 c00b280:	344d803a 	cmpltu	r6,r6,r17
 c00b284:	19a7c83a 	sub	r19,r3,r6
 c00b288:	3825883a 	mov	r18,r7
 c00b28c:	983f8a1e 	bne	r19,zero,c00b0b8 <__alt_data_end+0xfc00b0b8>
 c00b290:	8809883a 	mov	r4,r17
 c00b294:	c00d7700 	call	c00d770 <__clzsi2>
 c00b298:	10800804 	addi	r2,r2,32
 c00b29c:	10fffe04 	addi	r3,r2,-8
 c00b2a0:	010007c4 	movi	r4,31
 c00b2a4:	20ff890e 	bge	r4,r3,c00b0cc <__alt_data_end+0xfc00b0cc>
 c00b2a8:	10bff604 	addi	r2,r2,-40
 c00b2ac:	8884983a 	sll	r2,r17,r2
 c00b2b0:	0023883a 	mov	r17,zero
 c00b2b4:	1c3f8c0e 	bge	r3,r16,c00b0e8 <__alt_data_end+0xfc00b0e8>
 c00b2b8:	023fe034 	movhi	r8,65408
 c00b2bc:	423fffc4 	addi	r8,r8,-1
 c00b2c0:	80e1c83a 	sub	r16,r16,r3
 c00b2c4:	1210703a 	and	r8,r2,r8
 c00b2c8:	003f3806 	br	c00afac <__alt_data_end+0xfc00afac>
 c00b2cc:	9007883a 	mov	r3,r18
 c00b2d0:	0011883a 	mov	r8,zero
 c00b2d4:	0005883a 	mov	r2,zero
 c00b2d8:	003f4c06 	br	c00b00c <__alt_data_end+0xfc00b00c>
 c00b2dc:	498cb03a 	or	r6,r9,r6
 c00b2e0:	300cc03a 	cmpne	r6,r6,zero
 c00b2e4:	0007883a 	mov	r3,zero
 c00b2e8:	003f6806 	br	c00b08c <__alt_data_end+0xfc00b08c>
 c00b2ec:	20009c1e 	bne	r4,zero,c00b560 <__adddf3+0x630>
 c00b2f0:	80800044 	addi	r2,r16,1
 c00b2f4:	1141ffcc 	andi	r5,r2,2047
 c00b2f8:	01000044 	movi	r4,1
 c00b2fc:	2140670e 	bge	r4,r5,c00b49c <__adddf3+0x56c>
 c00b300:	0101ffc4 	movi	r4,2047
 c00b304:	11007f26 	beq	r2,r4,c00b504 <__adddf3+0x5d4>
 c00b308:	898d883a 	add	r6,r17,r6
 c00b30c:	4247883a 	add	r3,r8,r9
 c00b310:	3451803a 	cmpltu	r8,r6,r17
 c00b314:	40d1883a 	add	r8,r8,r3
 c00b318:	402297fa 	slli	r17,r8,31
 c00b31c:	300cd07a 	srli	r6,r6,1
 c00b320:	4010d07a 	srli	r8,r8,1
 c00b324:	1021883a 	mov	r16,r2
 c00b328:	89a2b03a 	or	r17,r17,r6
 c00b32c:	003f1f06 	br	c00afac <__alt_data_end+0xfc00afac>
 c00b330:	0081ffc4 	movi	r2,2047
 c00b334:	80bf481e 	bne	r16,r2,c00b058 <__alt_data_end+0xfc00b058>
 c00b338:	003f1c06 	br	c00afac <__alt_data_end+0xfc00afac>
 c00b33c:	843ff844 	addi	r16,r16,-31
 c00b340:	01000804 	movi	r4,32
 c00b344:	1406d83a 	srl	r3,r2,r16
 c00b348:	41005026 	beq	r8,r4,c00b48c <__adddf3+0x55c>
 c00b34c:	01001004 	movi	r4,64
 c00b350:	2211c83a 	sub	r8,r4,r8
 c00b354:	1204983a 	sll	r2,r2,r8
 c00b358:	88a2b03a 	or	r17,r17,r2
 c00b35c:	8822c03a 	cmpne	r17,r17,zero
 c00b360:	1c62b03a 	or	r17,r3,r17
 c00b364:	0011883a 	mov	r8,zero
 c00b368:	0021883a 	mov	r16,zero
 c00b36c:	003f7106 	br	c00b134 <__alt_data_end+0xfc00b134>
 c00b370:	193ff804 	addi	r4,r3,-32
 c00b374:	00800804 	movi	r2,32
 c00b378:	4908d83a 	srl	r4,r9,r4
 c00b37c:	18804526 	beq	r3,r2,c00b494 <__adddf3+0x564>
 c00b380:	00801004 	movi	r2,64
 c00b384:	10c5c83a 	sub	r2,r2,r3
 c00b388:	4886983a 	sll	r3,r9,r2
 c00b38c:	198cb03a 	or	r6,r3,r6
 c00b390:	300cc03a 	cmpne	r6,r6,zero
 c00b394:	218cb03a 	or	r6,r4,r6
 c00b398:	0007883a 	mov	r3,zero
 c00b39c:	003f3b06 	br	c00b08c <__alt_data_end+0xfc00b08c>
 c00b3a0:	80002a26 	beq	r16,zero,c00b44c <__adddf3+0x51c>
 c00b3a4:	0101ffc4 	movi	r4,2047
 c00b3a8:	11006826 	beq	r2,r4,c00b54c <__adddf3+0x61c>
 c00b3ac:	00c7c83a 	sub	r3,zero,r3
 c00b3b0:	42002034 	orhi	r8,r8,128
 c00b3b4:	01000e04 	movi	r4,56
 c00b3b8:	20c07c16 	blt	r4,r3,c00b5ac <__adddf3+0x67c>
 c00b3bc:	010007c4 	movi	r4,31
 c00b3c0:	20c0da16 	blt	r4,r3,c00b72c <__adddf3+0x7fc>
 c00b3c4:	01000804 	movi	r4,32
 c00b3c8:	20c9c83a 	sub	r4,r4,r3
 c00b3cc:	4114983a 	sll	r10,r8,r4
 c00b3d0:	88cad83a 	srl	r5,r17,r3
 c00b3d4:	8908983a 	sll	r4,r17,r4
 c00b3d8:	40c6d83a 	srl	r3,r8,r3
 c00b3dc:	5162b03a 	or	r17,r10,r5
 c00b3e0:	2008c03a 	cmpne	r4,r4,zero
 c00b3e4:	8922b03a 	or	r17,r17,r4
 c00b3e8:	3463c83a 	sub	r17,r6,r17
 c00b3ec:	48c7c83a 	sub	r3,r9,r3
 c00b3f0:	344d803a 	cmpltu	r6,r6,r17
 c00b3f4:	1991c83a 	sub	r8,r3,r6
 c00b3f8:	1021883a 	mov	r16,r2
 c00b3fc:	3825883a 	mov	r18,r7
 c00b400:	003f2706 	br	c00b0a0 <__alt_data_end+0xfc00b0a0>
 c00b404:	24d0b03a 	or	r8,r4,r19
 c00b408:	40001b1e 	bne	r8,zero,c00b478 <__adddf3+0x548>
 c00b40c:	0005883a 	mov	r2,zero
 c00b410:	0007883a 	mov	r3,zero
 c00b414:	0021883a 	mov	r16,zero
 c00b418:	003f4d06 	br	c00b150 <__alt_data_end+0xfc00b150>
 c00b41c:	008007c4 	movi	r2,31
 c00b420:	11003c16 	blt	r2,r4,c00b514 <__adddf3+0x5e4>
 c00b424:	00800804 	movi	r2,32
 c00b428:	1105c83a 	sub	r2,r2,r4
 c00b42c:	488e983a 	sll	r7,r9,r2
 c00b430:	310ad83a 	srl	r5,r6,r4
 c00b434:	3084983a 	sll	r2,r6,r2
 c00b438:	4912d83a 	srl	r9,r9,r4
 c00b43c:	394ab03a 	or	r5,r7,r5
 c00b440:	1004c03a 	cmpne	r2,r2,zero
 c00b444:	288ab03a 	or	r5,r5,r2
 c00b448:	003f5306 	br	c00b198 <__alt_data_end+0xfc00b198>
 c00b44c:	4448b03a 	or	r4,r8,r17
 c00b450:	20003e26 	beq	r4,zero,c00b54c <__adddf3+0x61c>
 c00b454:	00c6303a 	nor	r3,zero,r3
 c00b458:	18003a1e 	bne	r3,zero,c00b544 <__adddf3+0x614>
 c00b45c:	3463c83a 	sub	r17,r6,r17
 c00b460:	4a07c83a 	sub	r3,r9,r8
 c00b464:	344d803a 	cmpltu	r6,r6,r17
 c00b468:	1991c83a 	sub	r8,r3,r6
 c00b46c:	1021883a 	mov	r16,r2
 c00b470:	3825883a 	mov	r18,r7
 c00b474:	003f0a06 	br	c00b0a0 <__alt_data_end+0xfc00b0a0>
 c00b478:	2023883a 	mov	r17,r4
 c00b47c:	003f0d06 	br	c00b0b4 <__alt_data_end+0xfc00b0b4>
 c00b480:	0081ffc4 	movi	r2,2047
 c00b484:	80bf3f1e 	bne	r16,r2,c00b184 <__alt_data_end+0xfc00b184>
 c00b488:	003ec806 	br	c00afac <__alt_data_end+0xfc00afac>
 c00b48c:	0005883a 	mov	r2,zero
 c00b490:	003fb106 	br	c00b358 <__alt_data_end+0xfc00b358>
 c00b494:	0007883a 	mov	r3,zero
 c00b498:	003fbc06 	br	c00b38c <__alt_data_end+0xfc00b38c>
 c00b49c:	4444b03a 	or	r2,r8,r17
 c00b4a0:	8000871e 	bne	r16,zero,c00b6c0 <__adddf3+0x790>
 c00b4a4:	1000ba26 	beq	r2,zero,c00b790 <__adddf3+0x860>
 c00b4a8:	4984b03a 	or	r2,r9,r6
 c00b4ac:	103ebf26 	beq	r2,zero,c00afac <__alt_data_end+0xfc00afac>
 c00b4b0:	8985883a 	add	r2,r17,r6
 c00b4b4:	4247883a 	add	r3,r8,r9
 c00b4b8:	1451803a 	cmpltu	r8,r2,r17
 c00b4bc:	40d1883a 	add	r8,r8,r3
 c00b4c0:	40c0202c 	andhi	r3,r8,128
 c00b4c4:	1023883a 	mov	r17,r2
 c00b4c8:	183f1a26 	beq	r3,zero,c00b134 <__alt_data_end+0xfc00b134>
 c00b4cc:	00bfe034 	movhi	r2,65408
 c00b4d0:	10bfffc4 	addi	r2,r2,-1
 c00b4d4:	2021883a 	mov	r16,r4
 c00b4d8:	4090703a 	and	r8,r8,r2
 c00b4dc:	003eb306 	br	c00afac <__alt_data_end+0xfc00afac>
 c00b4e0:	4444b03a 	or	r2,r8,r17
 c00b4e4:	8000291e 	bne	r16,zero,c00b58c <__adddf3+0x65c>
 c00b4e8:	10004b1e 	bne	r2,zero,c00b618 <__adddf3+0x6e8>
 c00b4ec:	4990b03a 	or	r8,r9,r6
 c00b4f0:	40008b26 	beq	r8,zero,c00b720 <__adddf3+0x7f0>
 c00b4f4:	4811883a 	mov	r8,r9
 c00b4f8:	3023883a 	mov	r17,r6
 c00b4fc:	3825883a 	mov	r18,r7
 c00b500:	003eaa06 	br	c00afac <__alt_data_end+0xfc00afac>
 c00b504:	1021883a 	mov	r16,r2
 c00b508:	0011883a 	mov	r8,zero
 c00b50c:	0005883a 	mov	r2,zero
 c00b510:	003f0f06 	br	c00b150 <__alt_data_end+0xfc00b150>
 c00b514:	217ff804 	addi	r5,r4,-32
 c00b518:	00800804 	movi	r2,32
 c00b51c:	494ad83a 	srl	r5,r9,r5
 c00b520:	20807d26 	beq	r4,r2,c00b718 <__adddf3+0x7e8>
 c00b524:	00801004 	movi	r2,64
 c00b528:	1109c83a 	sub	r4,r2,r4
 c00b52c:	4912983a 	sll	r9,r9,r4
 c00b530:	498cb03a 	or	r6,r9,r6
 c00b534:	300cc03a 	cmpne	r6,r6,zero
 c00b538:	298ab03a 	or	r5,r5,r6
 c00b53c:	0013883a 	mov	r9,zero
 c00b540:	003f1506 	br	c00b198 <__alt_data_end+0xfc00b198>
 c00b544:	0101ffc4 	movi	r4,2047
 c00b548:	113f9a1e 	bne	r2,r4,c00b3b4 <__alt_data_end+0xfc00b3b4>
 c00b54c:	4811883a 	mov	r8,r9
 c00b550:	3023883a 	mov	r17,r6
 c00b554:	1021883a 	mov	r16,r2
 c00b558:	3825883a 	mov	r18,r7
 c00b55c:	003e9306 	br	c00afac <__alt_data_end+0xfc00afac>
 c00b560:	8000161e 	bne	r16,zero,c00b5bc <__adddf3+0x68c>
 c00b564:	444ab03a 	or	r5,r8,r17
 c00b568:	28005126 	beq	r5,zero,c00b6b0 <__adddf3+0x780>
 c00b56c:	0108303a 	nor	r4,zero,r4
 c00b570:	20004d1e 	bne	r4,zero,c00b6a8 <__adddf3+0x778>
 c00b574:	89a3883a 	add	r17,r17,r6
 c00b578:	4253883a 	add	r9,r8,r9
 c00b57c:	898d803a 	cmpltu	r6,r17,r6
 c00b580:	3251883a 	add	r8,r6,r9
 c00b584:	1021883a 	mov	r16,r2
 c00b588:	003f0806 	br	c00b1ac <__alt_data_end+0xfc00b1ac>
 c00b58c:	1000301e 	bne	r2,zero,c00b650 <__adddf3+0x720>
 c00b590:	4984b03a 	or	r2,r9,r6
 c00b594:	10007126 	beq	r2,zero,c00b75c <__adddf3+0x82c>
 c00b598:	4811883a 	mov	r8,r9
 c00b59c:	3023883a 	mov	r17,r6
 c00b5a0:	3825883a 	mov	r18,r7
 c00b5a4:	0401ffc4 	movi	r16,2047
 c00b5a8:	003e8006 	br	c00afac <__alt_data_end+0xfc00afac>
 c00b5ac:	4462b03a 	or	r17,r8,r17
 c00b5b0:	8822c03a 	cmpne	r17,r17,zero
 c00b5b4:	0007883a 	mov	r3,zero
 c00b5b8:	003f8b06 	br	c00b3e8 <__alt_data_end+0xfc00b3e8>
 c00b5bc:	0141ffc4 	movi	r5,2047
 c00b5c0:	11403b26 	beq	r2,r5,c00b6b0 <__adddf3+0x780>
 c00b5c4:	0109c83a 	sub	r4,zero,r4
 c00b5c8:	42002034 	orhi	r8,r8,128
 c00b5cc:	01400e04 	movi	r5,56
 c00b5d0:	29006716 	blt	r5,r4,c00b770 <__adddf3+0x840>
 c00b5d4:	014007c4 	movi	r5,31
 c00b5d8:	29007016 	blt	r5,r4,c00b79c <__adddf3+0x86c>
 c00b5dc:	01400804 	movi	r5,32
 c00b5e0:	290bc83a 	sub	r5,r5,r4
 c00b5e4:	4154983a 	sll	r10,r8,r5
 c00b5e8:	890ed83a 	srl	r7,r17,r4
 c00b5ec:	894a983a 	sll	r5,r17,r5
 c00b5f0:	4108d83a 	srl	r4,r8,r4
 c00b5f4:	51e2b03a 	or	r17,r10,r7
 c00b5f8:	280ac03a 	cmpne	r5,r5,zero
 c00b5fc:	8962b03a 	or	r17,r17,r5
 c00b600:	89a3883a 	add	r17,r17,r6
 c00b604:	2253883a 	add	r9,r4,r9
 c00b608:	898d803a 	cmpltu	r6,r17,r6
 c00b60c:	3251883a 	add	r8,r6,r9
 c00b610:	1021883a 	mov	r16,r2
 c00b614:	003ee506 	br	c00b1ac <__alt_data_end+0xfc00b1ac>
 c00b618:	4984b03a 	or	r2,r9,r6
 c00b61c:	103e6326 	beq	r2,zero,c00afac <__alt_data_end+0xfc00afac>
 c00b620:	8987c83a 	sub	r3,r17,r6
 c00b624:	88c9803a 	cmpltu	r4,r17,r3
 c00b628:	4245c83a 	sub	r2,r8,r9
 c00b62c:	1105c83a 	sub	r2,r2,r4
 c00b630:	1100202c 	andhi	r4,r2,128
 c00b634:	203ebb26 	beq	r4,zero,c00b124 <__alt_data_end+0xfc00b124>
 c00b638:	3463c83a 	sub	r17,r6,r17
 c00b63c:	4a07c83a 	sub	r3,r9,r8
 c00b640:	344d803a 	cmpltu	r6,r6,r17
 c00b644:	1991c83a 	sub	r8,r3,r6
 c00b648:	3825883a 	mov	r18,r7
 c00b64c:	003e5706 	br	c00afac <__alt_data_end+0xfc00afac>
 c00b650:	4984b03a 	or	r2,r9,r6
 c00b654:	10002e26 	beq	r2,zero,c00b710 <__adddf3+0x7e0>
 c00b658:	4004d0fa 	srli	r2,r8,3
 c00b65c:	8822d0fa 	srli	r17,r17,3
 c00b660:	4010977a 	slli	r8,r8,29
 c00b664:	10c0022c 	andhi	r3,r2,8
 c00b668:	4462b03a 	or	r17,r8,r17
 c00b66c:	18000826 	beq	r3,zero,c00b690 <__adddf3+0x760>
 c00b670:	4808d0fa 	srli	r4,r9,3
 c00b674:	20c0022c 	andhi	r3,r4,8
 c00b678:	1800051e 	bne	r3,zero,c00b690 <__adddf3+0x760>
 c00b67c:	300cd0fa 	srli	r6,r6,3
 c00b680:	4806977a 	slli	r3,r9,29
 c00b684:	2005883a 	mov	r2,r4
 c00b688:	3825883a 	mov	r18,r7
 c00b68c:	19a2b03a 	or	r17,r3,r6
 c00b690:	8810d77a 	srli	r8,r17,29
 c00b694:	100490fa 	slli	r2,r2,3
 c00b698:	882290fa 	slli	r17,r17,3
 c00b69c:	0401ffc4 	movi	r16,2047
 c00b6a0:	4090b03a 	or	r8,r8,r2
 c00b6a4:	003e4106 	br	c00afac <__alt_data_end+0xfc00afac>
 c00b6a8:	0141ffc4 	movi	r5,2047
 c00b6ac:	117fc71e 	bne	r2,r5,c00b5cc <__alt_data_end+0xfc00b5cc>
 c00b6b0:	4811883a 	mov	r8,r9
 c00b6b4:	3023883a 	mov	r17,r6
 c00b6b8:	1021883a 	mov	r16,r2
 c00b6bc:	003e3b06 	br	c00afac <__alt_data_end+0xfc00afac>
 c00b6c0:	10002f26 	beq	r2,zero,c00b780 <__adddf3+0x850>
 c00b6c4:	4984b03a 	or	r2,r9,r6
 c00b6c8:	10001126 	beq	r2,zero,c00b710 <__adddf3+0x7e0>
 c00b6cc:	4004d0fa 	srli	r2,r8,3
 c00b6d0:	8822d0fa 	srli	r17,r17,3
 c00b6d4:	4010977a 	slli	r8,r8,29
 c00b6d8:	10c0022c 	andhi	r3,r2,8
 c00b6dc:	4462b03a 	or	r17,r8,r17
 c00b6e0:	183feb26 	beq	r3,zero,c00b690 <__alt_data_end+0xfc00b690>
 c00b6e4:	4808d0fa 	srli	r4,r9,3
 c00b6e8:	20c0022c 	andhi	r3,r4,8
 c00b6ec:	183fe81e 	bne	r3,zero,c00b690 <__alt_data_end+0xfc00b690>
 c00b6f0:	300cd0fa 	srli	r6,r6,3
 c00b6f4:	4806977a 	slli	r3,r9,29
 c00b6f8:	2005883a 	mov	r2,r4
 c00b6fc:	19a2b03a 	or	r17,r3,r6
 c00b700:	003fe306 	br	c00b690 <__alt_data_end+0xfc00b690>
 c00b704:	0011883a 	mov	r8,zero
 c00b708:	0005883a 	mov	r2,zero
 c00b70c:	003e3f06 	br	c00b00c <__alt_data_end+0xfc00b00c>
 c00b710:	0401ffc4 	movi	r16,2047
 c00b714:	003e2506 	br	c00afac <__alt_data_end+0xfc00afac>
 c00b718:	0013883a 	mov	r9,zero
 c00b71c:	003f8406 	br	c00b530 <__alt_data_end+0xfc00b530>
 c00b720:	0005883a 	mov	r2,zero
 c00b724:	0007883a 	mov	r3,zero
 c00b728:	003e8906 	br	c00b150 <__alt_data_end+0xfc00b150>
 c00b72c:	197ff804 	addi	r5,r3,-32
 c00b730:	01000804 	movi	r4,32
 c00b734:	414ad83a 	srl	r5,r8,r5
 c00b738:	19002426 	beq	r3,r4,c00b7cc <__adddf3+0x89c>
 c00b73c:	01001004 	movi	r4,64
 c00b740:	20c7c83a 	sub	r3,r4,r3
 c00b744:	40c6983a 	sll	r3,r8,r3
 c00b748:	1c46b03a 	or	r3,r3,r17
 c00b74c:	1806c03a 	cmpne	r3,r3,zero
 c00b750:	28e2b03a 	or	r17,r5,r3
 c00b754:	0007883a 	mov	r3,zero
 c00b758:	003f2306 	br	c00b3e8 <__alt_data_end+0xfc00b3e8>
 c00b75c:	0007883a 	mov	r3,zero
 c00b760:	5811883a 	mov	r8,r11
 c00b764:	00bfffc4 	movi	r2,-1
 c00b768:	0401ffc4 	movi	r16,2047
 c00b76c:	003e7806 	br	c00b150 <__alt_data_end+0xfc00b150>
 c00b770:	4462b03a 	or	r17,r8,r17
 c00b774:	8822c03a 	cmpne	r17,r17,zero
 c00b778:	0009883a 	mov	r4,zero
 c00b77c:	003fa006 	br	c00b600 <__alt_data_end+0xfc00b600>
 c00b780:	4811883a 	mov	r8,r9
 c00b784:	3023883a 	mov	r17,r6
 c00b788:	0401ffc4 	movi	r16,2047
 c00b78c:	003e0706 	br	c00afac <__alt_data_end+0xfc00afac>
 c00b790:	4811883a 	mov	r8,r9
 c00b794:	3023883a 	mov	r17,r6
 c00b798:	003e0406 	br	c00afac <__alt_data_end+0xfc00afac>
 c00b79c:	21fff804 	addi	r7,r4,-32
 c00b7a0:	01400804 	movi	r5,32
 c00b7a4:	41ced83a 	srl	r7,r8,r7
 c00b7a8:	21400a26 	beq	r4,r5,c00b7d4 <__adddf3+0x8a4>
 c00b7ac:	01401004 	movi	r5,64
 c00b7b0:	2909c83a 	sub	r4,r5,r4
 c00b7b4:	4108983a 	sll	r4,r8,r4
 c00b7b8:	2448b03a 	or	r4,r4,r17
 c00b7bc:	2008c03a 	cmpne	r4,r4,zero
 c00b7c0:	3922b03a 	or	r17,r7,r4
 c00b7c4:	0009883a 	mov	r4,zero
 c00b7c8:	003f8d06 	br	c00b600 <__alt_data_end+0xfc00b600>
 c00b7cc:	0007883a 	mov	r3,zero
 c00b7d0:	003fdd06 	br	c00b748 <__alt_data_end+0xfc00b748>
 c00b7d4:	0009883a 	mov	r4,zero
 c00b7d8:	003ff706 	br	c00b7b8 <__alt_data_end+0xfc00b7b8>

0c00b7dc <__divdf3>:
 c00b7dc:	defff004 	addi	sp,sp,-64
 c00b7e0:	dc800815 	stw	r18,32(sp)
 c00b7e4:	2824d53a 	srli	r18,r5,20
 c00b7e8:	dd800c15 	stw	r22,48(sp)
 c00b7ec:	282cd7fa 	srli	r22,r5,31
 c00b7f0:	dc000615 	stw	r16,24(sp)
 c00b7f4:	04000434 	movhi	r16,16
 c00b7f8:	843fffc4 	addi	r16,r16,-1
 c00b7fc:	dfc00f15 	stw	ra,60(sp)
 c00b800:	df000e15 	stw	fp,56(sp)
 c00b804:	ddc00d15 	stw	r23,52(sp)
 c00b808:	dd400b15 	stw	r21,44(sp)
 c00b80c:	dd000a15 	stw	r20,40(sp)
 c00b810:	dcc00915 	stw	r19,36(sp)
 c00b814:	dc400715 	stw	r17,28(sp)
 c00b818:	9481ffcc 	andi	r18,r18,2047
 c00b81c:	2c20703a 	and	r16,r5,r16
 c00b820:	b2003fcc 	andi	r8,r22,255
 c00b824:	90006126 	beq	r18,zero,c00b9ac <__divdf3+0x1d0>
 c00b828:	0081ffc4 	movi	r2,2047
 c00b82c:	202b883a 	mov	r21,r4
 c00b830:	90803726 	beq	r18,r2,c00b910 <__divdf3+0x134>
 c00b834:	80800434 	orhi	r2,r16,16
 c00b838:	100490fa 	slli	r2,r2,3
 c00b83c:	2020d77a 	srli	r16,r4,29
 c00b840:	202a90fa 	slli	r21,r4,3
 c00b844:	94bf0044 	addi	r18,r18,-1023
 c00b848:	80a0b03a 	or	r16,r16,r2
 c00b84c:	0013883a 	mov	r9,zero
 c00b850:	000b883a 	mov	r5,zero
 c00b854:	3806d53a 	srli	r3,r7,20
 c00b858:	382ed7fa 	srli	r23,r7,31
 c00b85c:	04400434 	movhi	r17,16
 c00b860:	8c7fffc4 	addi	r17,r17,-1
 c00b864:	18c1ffcc 	andi	r3,r3,2047
 c00b868:	3029883a 	mov	r20,r6
 c00b86c:	3c62703a 	and	r17,r7,r17
 c00b870:	bf003fcc 	andi	fp,r23,255
 c00b874:	18006e26 	beq	r3,zero,c00ba30 <__divdf3+0x254>
 c00b878:	0081ffc4 	movi	r2,2047
 c00b87c:	18806626 	beq	r3,r2,c00ba18 <__divdf3+0x23c>
 c00b880:	88800434 	orhi	r2,r17,16
 c00b884:	100490fa 	slli	r2,r2,3
 c00b888:	3022d77a 	srli	r17,r6,29
 c00b88c:	302890fa 	slli	r20,r6,3
 c00b890:	18ff0044 	addi	r3,r3,-1023
 c00b894:	88a2b03a 	or	r17,r17,r2
 c00b898:	000f883a 	mov	r7,zero
 c00b89c:	b5e6f03a 	xor	r19,r22,r23
 c00b8a0:	3a4cb03a 	or	r6,r7,r9
 c00b8a4:	008003c4 	movi	r2,15
 c00b8a8:	9809883a 	mov	r4,r19
 c00b8ac:	90c7c83a 	sub	r3,r18,r3
 c00b8b0:	9cc03fcc 	andi	r19,r19,255
 c00b8b4:	11809636 	bltu	r2,r6,c00bb10 <__divdf3+0x334>
 c00b8b8:	300c90ba 	slli	r6,r6,2
 c00b8bc:	00830074 	movhi	r2,3073
 c00b8c0:	10ae3404 	addi	r2,r2,-18224
 c00b8c4:	308d883a 	add	r6,r6,r2
 c00b8c8:	30800017 	ldw	r2,0(r6)
 c00b8cc:	1000683a 	jmp	r2
 c00b8d0:	0c00bb10 	cmplti	r16,at,748
 c00b8d4:	0c00b948 	cmpgei	r16,at,741
 c00b8d8:	0c00bb00 	call	c00bb0 <__alt_mem_onchip_memory2_0+0xc00bb0>
 c00b8dc:	0c00b93c 	xorhi	r16,at,740
 c00b8e0:	0c00bb00 	call	c00bb0 <__alt_mem_onchip_memory2_0+0xc00bb0>
 c00b8e4:	0c00bad4 	ori	r16,at,747
 c00b8e8:	0c00bb00 	call	c00bb0 <__alt_mem_onchip_memory2_0+0xc00bb0>
 c00b8ec:	0c00b93c 	xorhi	r16,at,740
 c00b8f0:	0c00b948 	cmpgei	r16,at,741
 c00b8f4:	0c00b948 	cmpgei	r16,at,741
 c00b8f8:	0c00bad4 	ori	r16,at,747
 c00b8fc:	0c00b93c 	xorhi	r16,at,740
 c00b900:	0c00b92c 	andhi	r16,at,740
 c00b904:	0c00b92c 	andhi	r16,at,740
 c00b908:	0c00b92c 	andhi	r16,at,740
 c00b90c:	0c00be98 	cmpnei	r16,at,762
 c00b910:	2404b03a 	or	r2,r4,r16
 c00b914:	10006c1e 	bne	r2,zero,c00bac8 <__divdf3+0x2ec>
 c00b918:	02400204 	movi	r9,8
 c00b91c:	0021883a 	mov	r16,zero
 c00b920:	002b883a 	mov	r21,zero
 c00b924:	01400084 	movi	r5,2
 c00b928:	003fca06 	br	c00b854 <__alt_data_end+0xfc00b854>
 c00b92c:	8023883a 	mov	r17,r16
 c00b930:	a829883a 	mov	r20,r21
 c00b934:	4039883a 	mov	fp,r8
 c00b938:	280f883a 	mov	r7,r5
 c00b93c:	00800084 	movi	r2,2
 c00b940:	3881601e 	bne	r7,r2,c00bec4 <__divdf3+0x6e8>
 c00b944:	e027883a 	mov	r19,fp
 c00b948:	9900004c 	andi	r4,r19,1
 c00b94c:	0081ffc4 	movi	r2,2047
 c00b950:	0021883a 	mov	r16,zero
 c00b954:	002b883a 	mov	r21,zero
 c00b958:	1004953a 	slli	r2,r2,20
 c00b95c:	20c03fcc 	andi	r3,r4,255
 c00b960:	01400434 	movhi	r5,16
 c00b964:	297fffc4 	addi	r5,r5,-1
 c00b968:	180697fa 	slli	r3,r3,31
 c00b96c:	8160703a 	and	r16,r16,r5
 c00b970:	80a0b03a 	or	r16,r16,r2
 c00b974:	80c6b03a 	or	r3,r16,r3
 c00b978:	a805883a 	mov	r2,r21
 c00b97c:	dfc00f17 	ldw	ra,60(sp)
 c00b980:	df000e17 	ldw	fp,56(sp)
 c00b984:	ddc00d17 	ldw	r23,52(sp)
 c00b988:	dd800c17 	ldw	r22,48(sp)
 c00b98c:	dd400b17 	ldw	r21,44(sp)
 c00b990:	dd000a17 	ldw	r20,40(sp)
 c00b994:	dcc00917 	ldw	r19,36(sp)
 c00b998:	dc800817 	ldw	r18,32(sp)
 c00b99c:	dc400717 	ldw	r17,28(sp)
 c00b9a0:	dc000617 	ldw	r16,24(sp)
 c00b9a4:	dec01004 	addi	sp,sp,64
 c00b9a8:	f800283a 	ret
 c00b9ac:	2404b03a 	or	r2,r4,r16
 c00b9b0:	2023883a 	mov	r17,r4
 c00b9b4:	10003f26 	beq	r2,zero,c00bab4 <__divdf3+0x2d8>
 c00b9b8:	80015e26 	beq	r16,zero,c00bf34 <__divdf3+0x758>
 c00b9bc:	8009883a 	mov	r4,r16
 c00b9c0:	d9800215 	stw	r6,8(sp)
 c00b9c4:	d9c00515 	stw	r7,20(sp)
 c00b9c8:	da000415 	stw	r8,16(sp)
 c00b9cc:	c00d7700 	call	c00d770 <__clzsi2>
 c00b9d0:	d9800217 	ldw	r6,8(sp)
 c00b9d4:	d9c00517 	ldw	r7,20(sp)
 c00b9d8:	da000417 	ldw	r8,16(sp)
 c00b9dc:	113ffd44 	addi	r4,r2,-11
 c00b9e0:	00c00704 	movi	r3,28
 c00b9e4:	19014f16 	blt	r3,r4,c00bf24 <__divdf3+0x748>
 c00b9e8:	00c00744 	movi	r3,29
 c00b9ec:	157ffe04 	addi	r21,r2,-8
 c00b9f0:	1907c83a 	sub	r3,r3,r4
 c00b9f4:	8560983a 	sll	r16,r16,r21
 c00b9f8:	88c6d83a 	srl	r3,r17,r3
 c00b9fc:	8d6a983a 	sll	r21,r17,r21
 c00ba00:	1c20b03a 	or	r16,r3,r16
 c00ba04:	1080fcc4 	addi	r2,r2,1011
 c00ba08:	00a5c83a 	sub	r18,zero,r2
 c00ba0c:	0013883a 	mov	r9,zero
 c00ba10:	000b883a 	mov	r5,zero
 c00ba14:	003f8f06 	br	c00b854 <__alt_data_end+0xfc00b854>
 c00ba18:	3444b03a 	or	r2,r6,r17
 c00ba1c:	1000231e 	bne	r2,zero,c00baac <__divdf3+0x2d0>
 c00ba20:	0023883a 	mov	r17,zero
 c00ba24:	0029883a 	mov	r20,zero
 c00ba28:	01c00084 	movi	r7,2
 c00ba2c:	003f9b06 	br	c00b89c <__alt_data_end+0xfc00b89c>
 c00ba30:	3444b03a 	or	r2,r6,r17
 c00ba34:	10001926 	beq	r2,zero,c00ba9c <__divdf3+0x2c0>
 c00ba38:	88014b26 	beq	r17,zero,c00bf68 <__divdf3+0x78c>
 c00ba3c:	8809883a 	mov	r4,r17
 c00ba40:	d9400115 	stw	r5,4(sp)
 c00ba44:	d9800215 	stw	r6,8(sp)
 c00ba48:	da000415 	stw	r8,16(sp)
 c00ba4c:	da400315 	stw	r9,12(sp)
 c00ba50:	c00d7700 	call	c00d770 <__clzsi2>
 c00ba54:	d9400117 	ldw	r5,4(sp)
 c00ba58:	d9800217 	ldw	r6,8(sp)
 c00ba5c:	da000417 	ldw	r8,16(sp)
 c00ba60:	da400317 	ldw	r9,12(sp)
 c00ba64:	113ffd44 	addi	r4,r2,-11
 c00ba68:	00c00704 	movi	r3,28
 c00ba6c:	19013a16 	blt	r3,r4,c00bf58 <__divdf3+0x77c>
 c00ba70:	00c00744 	movi	r3,29
 c00ba74:	153ffe04 	addi	r20,r2,-8
 c00ba78:	1907c83a 	sub	r3,r3,r4
 c00ba7c:	8d22983a 	sll	r17,r17,r20
 c00ba80:	30c6d83a 	srl	r3,r6,r3
 c00ba84:	3528983a 	sll	r20,r6,r20
 c00ba88:	1c62b03a 	or	r17,r3,r17
 c00ba8c:	1080fcc4 	addi	r2,r2,1011
 c00ba90:	0087c83a 	sub	r3,zero,r2
 c00ba94:	000f883a 	mov	r7,zero
 c00ba98:	003f8006 	br	c00b89c <__alt_data_end+0xfc00b89c>
 c00ba9c:	0023883a 	mov	r17,zero
 c00baa0:	0029883a 	mov	r20,zero
 c00baa4:	01c00044 	movi	r7,1
 c00baa8:	003f7c06 	br	c00b89c <__alt_data_end+0xfc00b89c>
 c00baac:	01c000c4 	movi	r7,3
 c00bab0:	003f7a06 	br	c00b89c <__alt_data_end+0xfc00b89c>
 c00bab4:	02400104 	movi	r9,4
 c00bab8:	0021883a 	mov	r16,zero
 c00babc:	002b883a 	mov	r21,zero
 c00bac0:	01400044 	movi	r5,1
 c00bac4:	003f6306 	br	c00b854 <__alt_data_end+0xfc00b854>
 c00bac8:	02400304 	movi	r9,12
 c00bacc:	014000c4 	movi	r5,3
 c00bad0:	003f6006 	br	c00b854 <__alt_data_end+0xfc00b854>
 c00bad4:	04000434 	movhi	r16,16
 c00bad8:	0009883a 	mov	r4,zero
 c00badc:	843fffc4 	addi	r16,r16,-1
 c00bae0:	057fffc4 	movi	r21,-1
 c00bae4:	0081ffc4 	movi	r2,2047
 c00bae8:	003f9b06 	br	c00b958 <__alt_data_end+0xfc00b958>
 c00baec:	00c00044 	movi	r3,1
 c00baf0:	1887c83a 	sub	r3,r3,r2
 c00baf4:	01000e04 	movi	r4,56
 c00baf8:	20c1530e 	bge	r4,r3,c00c048 <__divdf3+0x86c>
 c00bafc:	9900004c 	andi	r4,r19,1
 c00bb00:	0005883a 	mov	r2,zero
 c00bb04:	0021883a 	mov	r16,zero
 c00bb08:	002b883a 	mov	r21,zero
 c00bb0c:	003f9206 	br	c00b958 <__alt_data_end+0xfc00b958>
 c00bb10:	8c012e36 	bltu	r17,r16,c00bfcc <__divdf3+0x7f0>
 c00bb14:	84412c26 	beq	r16,r17,c00bfc8 <__divdf3+0x7ec>
 c00bb18:	a82f883a 	mov	r23,r21
 c00bb1c:	18ffffc4 	addi	r3,r3,-1
 c00bb20:	002b883a 	mov	r21,zero
 c00bb24:	a004d63a 	srli	r2,r20,24
 c00bb28:	8822923a 	slli	r17,r17,8
 c00bb2c:	a028923a 	slli	r20,r20,8
 c00bb30:	8009883a 	mov	r4,r16
 c00bb34:	88acb03a 	or	r22,r17,r2
 c00bb38:	dd000015 	stw	r20,0(sp)
 c00bb3c:	b028d43a 	srli	r20,r22,16
 c00bb40:	d8c00215 	stw	r3,8(sp)
 c00bb44:	b4bfffcc 	andi	r18,r22,65535
 c00bb48:	a00b883a 	mov	r5,r20
 c00bb4c:	c00ae740 	call	c00ae74 <__udivsi3>
 c00bb50:	100b883a 	mov	r5,r2
 c00bb54:	9009883a 	mov	r4,r18
 c00bb58:	1023883a 	mov	r17,r2
 c00bb5c:	c0009680 	call	c000968 <__mulsi3>
 c00bb60:	8009883a 	mov	r4,r16
 c00bb64:	a00b883a 	mov	r5,r20
 c00bb68:	1039883a 	mov	fp,r2
 c00bb6c:	c00aed80 	call	c00aed8 <__umodsi3>
 c00bb70:	1004943a 	slli	r2,r2,16
 c00bb74:	b808d43a 	srli	r4,r23,16
 c00bb78:	d8c00217 	ldw	r3,8(sp)
 c00bb7c:	2084b03a 	or	r2,r4,r2
 c00bb80:	1700062e 	bgeu	r2,fp,c00bb9c <__divdf3+0x3c0>
 c00bb84:	1585883a 	add	r2,r2,r22
 c00bb88:	893fffc4 	addi	r4,r17,-1
 c00bb8c:	15811d36 	bltu	r2,r22,c00c004 <__divdf3+0x828>
 c00bb90:	17011c2e 	bgeu	r2,fp,c00c004 <__divdf3+0x828>
 c00bb94:	8c7fff84 	addi	r17,r17,-2
 c00bb98:	1585883a 	add	r2,r2,r22
 c00bb9c:	1739c83a 	sub	fp,r2,fp
 c00bba0:	a00b883a 	mov	r5,r20
 c00bba4:	e009883a 	mov	r4,fp
 c00bba8:	d8c00215 	stw	r3,8(sp)
 c00bbac:	c00ae740 	call	c00ae74 <__udivsi3>
 c00bbb0:	100b883a 	mov	r5,r2
 c00bbb4:	9009883a 	mov	r4,r18
 c00bbb8:	1021883a 	mov	r16,r2
 c00bbbc:	c0009680 	call	c000968 <__mulsi3>
 c00bbc0:	a00b883a 	mov	r5,r20
 c00bbc4:	e009883a 	mov	r4,fp
 c00bbc8:	d8800415 	stw	r2,16(sp)
 c00bbcc:	c00aed80 	call	c00aed8 <__umodsi3>
 c00bbd0:	1004943a 	slli	r2,r2,16
 c00bbd4:	da000417 	ldw	r8,16(sp)
 c00bbd8:	bdffffcc 	andi	r23,r23,65535
 c00bbdc:	b884b03a 	or	r2,r23,r2
 c00bbe0:	d8c00217 	ldw	r3,8(sp)
 c00bbe4:	1200062e 	bgeu	r2,r8,c00bc00 <__divdf3+0x424>
 c00bbe8:	1585883a 	add	r2,r2,r22
 c00bbec:	813fffc4 	addi	r4,r16,-1
 c00bbf0:	15810236 	bltu	r2,r22,c00bffc <__divdf3+0x820>
 c00bbf4:	1201012e 	bgeu	r2,r8,c00bffc <__divdf3+0x820>
 c00bbf8:	843fff84 	addi	r16,r16,-2
 c00bbfc:	1585883a 	add	r2,r2,r22
 c00bc00:	8822943a 	slli	r17,r17,16
 c00bc04:	d9800017 	ldw	r6,0(sp)
 c00bc08:	1211c83a 	sub	r8,r2,r8
 c00bc0c:	8c22b03a 	or	r17,r17,r16
 c00bc10:	373fffcc 	andi	fp,r6,65535
 c00bc14:	8abfffcc 	andi	r10,r17,65535
 c00bc18:	8820d43a 	srli	r16,r17,16
 c00bc1c:	5009883a 	mov	r4,r10
 c00bc20:	e00b883a 	mov	r5,fp
 c00bc24:	302ed43a 	srli	r23,r6,16
 c00bc28:	d8c00215 	stw	r3,8(sp)
 c00bc2c:	da000415 	stw	r8,16(sp)
 c00bc30:	da800115 	stw	r10,4(sp)
 c00bc34:	c0009680 	call	c000968 <__mulsi3>
 c00bc38:	800b883a 	mov	r5,r16
 c00bc3c:	e009883a 	mov	r4,fp
 c00bc40:	d8800515 	stw	r2,20(sp)
 c00bc44:	c0009680 	call	c000968 <__mulsi3>
 c00bc48:	8009883a 	mov	r4,r16
 c00bc4c:	b80b883a 	mov	r5,r23
 c00bc50:	d8800315 	stw	r2,12(sp)
 c00bc54:	c0009680 	call	c000968 <__mulsi3>
 c00bc58:	da800117 	ldw	r10,4(sp)
 c00bc5c:	b80b883a 	mov	r5,r23
 c00bc60:	1021883a 	mov	r16,r2
 c00bc64:	5009883a 	mov	r4,r10
 c00bc68:	c0009680 	call	c000968 <__mulsi3>
 c00bc6c:	d9c00517 	ldw	r7,20(sp)
 c00bc70:	da400317 	ldw	r9,12(sp)
 c00bc74:	d8c00217 	ldw	r3,8(sp)
 c00bc78:	3808d43a 	srli	r4,r7,16
 c00bc7c:	1245883a 	add	r2,r2,r9
 c00bc80:	da000417 	ldw	r8,16(sp)
 c00bc84:	2085883a 	add	r2,r4,r2
 c00bc88:	1240022e 	bgeu	r2,r9,c00bc94 <__divdf3+0x4b8>
 c00bc8c:	01000074 	movhi	r4,1
 c00bc90:	8121883a 	add	r16,r16,r4
 c00bc94:	1008d43a 	srli	r4,r2,16
 c00bc98:	1004943a 	slli	r2,r2,16
 c00bc9c:	39ffffcc 	andi	r7,r7,65535
 c00bca0:	2409883a 	add	r4,r4,r16
 c00bca4:	11c5883a 	add	r2,r2,r7
 c00bca8:	4100bb36 	bltu	r8,r4,c00bf98 <__divdf3+0x7bc>
 c00bcac:	4100d726 	beq	r8,r4,c00c00c <__divdf3+0x830>
 c00bcb0:	4109c83a 	sub	r4,r8,r4
 c00bcb4:	a8a1c83a 	sub	r16,r21,r2
 c00bcb8:	ac2b803a 	cmpltu	r21,r21,r16
 c00bcbc:	256bc83a 	sub	r21,r4,r21
 c00bcc0:	b540d926 	beq	r22,r21,c00c028 <__divdf3+0x84c>
 c00bcc4:	a00b883a 	mov	r5,r20
 c00bcc8:	a809883a 	mov	r4,r21
 c00bccc:	d8c00215 	stw	r3,8(sp)
 c00bcd0:	c00ae740 	call	c00ae74 <__udivsi3>
 c00bcd4:	100b883a 	mov	r5,r2
 c00bcd8:	9009883a 	mov	r4,r18
 c00bcdc:	d8800515 	stw	r2,20(sp)
 c00bce0:	c0009680 	call	c000968 <__mulsi3>
 c00bce4:	a809883a 	mov	r4,r21
 c00bce8:	a00b883a 	mov	r5,r20
 c00bcec:	d8800415 	stw	r2,16(sp)
 c00bcf0:	c00aed80 	call	c00aed8 <__umodsi3>
 c00bcf4:	1004943a 	slli	r2,r2,16
 c00bcf8:	8008d43a 	srli	r4,r16,16
 c00bcfc:	da000417 	ldw	r8,16(sp)
 c00bd00:	d8c00217 	ldw	r3,8(sp)
 c00bd04:	2084b03a 	or	r2,r4,r2
 c00bd08:	d9c00517 	ldw	r7,20(sp)
 c00bd0c:	1200062e 	bgeu	r2,r8,c00bd28 <__divdf3+0x54c>
 c00bd10:	1585883a 	add	r2,r2,r22
 c00bd14:	393fffc4 	addi	r4,r7,-1
 c00bd18:	1580c536 	bltu	r2,r22,c00c030 <__divdf3+0x854>
 c00bd1c:	1200c42e 	bgeu	r2,r8,c00c030 <__divdf3+0x854>
 c00bd20:	39ffff84 	addi	r7,r7,-2
 c00bd24:	1585883a 	add	r2,r2,r22
 c00bd28:	122bc83a 	sub	r21,r2,r8
 c00bd2c:	a00b883a 	mov	r5,r20
 c00bd30:	a809883a 	mov	r4,r21
 c00bd34:	d8c00215 	stw	r3,8(sp)
 c00bd38:	d9c00515 	stw	r7,20(sp)
 c00bd3c:	c00ae740 	call	c00ae74 <__udivsi3>
 c00bd40:	9009883a 	mov	r4,r18
 c00bd44:	100b883a 	mov	r5,r2
 c00bd48:	d8800415 	stw	r2,16(sp)
 c00bd4c:	c0009680 	call	c000968 <__mulsi3>
 c00bd50:	a809883a 	mov	r4,r21
 c00bd54:	a00b883a 	mov	r5,r20
 c00bd58:	1025883a 	mov	r18,r2
 c00bd5c:	c00aed80 	call	c00aed8 <__umodsi3>
 c00bd60:	1004943a 	slli	r2,r2,16
 c00bd64:	813fffcc 	andi	r4,r16,65535
 c00bd68:	d8c00217 	ldw	r3,8(sp)
 c00bd6c:	20a0b03a 	or	r16,r4,r2
 c00bd70:	d9c00517 	ldw	r7,20(sp)
 c00bd74:	da000417 	ldw	r8,16(sp)
 c00bd78:	8480062e 	bgeu	r16,r18,c00bd94 <__divdf3+0x5b8>
 c00bd7c:	85a1883a 	add	r16,r16,r22
 c00bd80:	40bfffc4 	addi	r2,r8,-1
 c00bd84:	8580ac36 	bltu	r16,r22,c00c038 <__divdf3+0x85c>
 c00bd88:	8480ab2e 	bgeu	r16,r18,c00c038 <__divdf3+0x85c>
 c00bd8c:	423fff84 	addi	r8,r8,-2
 c00bd90:	85a1883a 	add	r16,r16,r22
 c00bd94:	3804943a 	slli	r2,r7,16
 c00bd98:	84a1c83a 	sub	r16,r16,r18
 c00bd9c:	e009883a 	mov	r4,fp
 c00bda0:	1228b03a 	or	r20,r2,r8
 c00bda4:	a1ffffcc 	andi	r7,r20,65535
 c00bda8:	a024d43a 	srli	r18,r20,16
 c00bdac:	380b883a 	mov	r5,r7
 c00bdb0:	d8c00215 	stw	r3,8(sp)
 c00bdb4:	d9c00515 	stw	r7,20(sp)
 c00bdb8:	c0009680 	call	c000968 <__mulsi3>
 c00bdbc:	900b883a 	mov	r5,r18
 c00bdc0:	e009883a 	mov	r4,fp
 c00bdc4:	102b883a 	mov	r21,r2
 c00bdc8:	c0009680 	call	c000968 <__mulsi3>
 c00bdcc:	900b883a 	mov	r5,r18
 c00bdd0:	b809883a 	mov	r4,r23
 c00bdd4:	1039883a 	mov	fp,r2
 c00bdd8:	c0009680 	call	c000968 <__mulsi3>
 c00bddc:	d9c00517 	ldw	r7,20(sp)
 c00bde0:	b80b883a 	mov	r5,r23
 c00bde4:	1025883a 	mov	r18,r2
 c00bde8:	3809883a 	mov	r4,r7
 c00bdec:	c0009680 	call	c000968 <__mulsi3>
 c00bdf0:	a808d43a 	srli	r4,r21,16
 c00bdf4:	1705883a 	add	r2,r2,fp
 c00bdf8:	d8c00217 	ldw	r3,8(sp)
 c00bdfc:	2085883a 	add	r2,r4,r2
 c00be00:	1700022e 	bgeu	r2,fp,c00be0c <__divdf3+0x630>
 c00be04:	01000074 	movhi	r4,1
 c00be08:	9125883a 	add	r18,r18,r4
 c00be0c:	1008d43a 	srli	r4,r2,16
 c00be10:	1004943a 	slli	r2,r2,16
 c00be14:	ad7fffcc 	andi	r21,r21,65535
 c00be18:	2489883a 	add	r4,r4,r18
 c00be1c:	1545883a 	add	r2,r2,r21
 c00be20:	81003836 	bltu	r16,r4,c00bf04 <__divdf3+0x728>
 c00be24:	81003626 	beq	r16,r4,c00bf00 <__divdf3+0x724>
 c00be28:	a5000054 	ori	r20,r20,1
 c00be2c:	1880ffc4 	addi	r2,r3,1023
 c00be30:	00bf2e0e 	bge	zero,r2,c00baec <__alt_data_end+0xfc00baec>
 c00be34:	a10001cc 	andi	r4,r20,7
 c00be38:	20000726 	beq	r4,zero,c00be58 <__divdf3+0x67c>
 c00be3c:	a10003cc 	andi	r4,r20,15
 c00be40:	01400104 	movi	r5,4
 c00be44:	21400426 	beq	r4,r5,c00be58 <__divdf3+0x67c>
 c00be48:	a149883a 	add	r4,r20,r5
 c00be4c:	2529803a 	cmpltu	r20,r4,r20
 c00be50:	8d23883a 	add	r17,r17,r20
 c00be54:	2029883a 	mov	r20,r4
 c00be58:	8900402c 	andhi	r4,r17,256
 c00be5c:	20000426 	beq	r4,zero,c00be70 <__divdf3+0x694>
 c00be60:	18810004 	addi	r2,r3,1024
 c00be64:	00ffc034 	movhi	r3,65280
 c00be68:	18ffffc4 	addi	r3,r3,-1
 c00be6c:	88e2703a 	and	r17,r17,r3
 c00be70:	00c1ff84 	movi	r3,2046
 c00be74:	18beb416 	blt	r3,r2,c00b948 <__alt_data_end+0xfc00b948>
 c00be78:	a028d0fa 	srli	r20,r20,3
 c00be7c:	882a977a 	slli	r21,r17,29
 c00be80:	8820927a 	slli	r16,r17,9
 c00be84:	1081ffcc 	andi	r2,r2,2047
 c00be88:	ad2ab03a 	or	r21,r21,r20
 c00be8c:	8020d33a 	srli	r16,r16,12
 c00be90:	9900004c 	andi	r4,r19,1
 c00be94:	003eb006 	br	c00b958 <__alt_data_end+0xfc00b958>
 c00be98:	8080022c 	andhi	r2,r16,8
 c00be9c:	10001226 	beq	r2,zero,c00bee8 <__divdf3+0x70c>
 c00bea0:	8880022c 	andhi	r2,r17,8
 c00bea4:	1000101e 	bne	r2,zero,c00bee8 <__divdf3+0x70c>
 c00bea8:	00800434 	movhi	r2,16
 c00beac:	8c000234 	orhi	r16,r17,8
 c00beb0:	10bfffc4 	addi	r2,r2,-1
 c00beb4:	b809883a 	mov	r4,r23
 c00beb8:	80a0703a 	and	r16,r16,r2
 c00bebc:	a02b883a 	mov	r21,r20
 c00bec0:	003f0806 	br	c00bae4 <__alt_data_end+0xfc00bae4>
 c00bec4:	008000c4 	movi	r2,3
 c00bec8:	3880b126 	beq	r7,r2,c00c190 <__divdf3+0x9b4>
 c00becc:	00800044 	movi	r2,1
 c00bed0:	38805b1e 	bne	r7,r2,c00c040 <__divdf3+0x864>
 c00bed4:	e009883a 	mov	r4,fp
 c00bed8:	0005883a 	mov	r2,zero
 c00bedc:	0021883a 	mov	r16,zero
 c00bee0:	002b883a 	mov	r21,zero
 c00bee4:	003e9c06 	br	c00b958 <__alt_data_end+0xfc00b958>
 c00bee8:	00800434 	movhi	r2,16
 c00beec:	84000234 	orhi	r16,r16,8
 c00bef0:	10bfffc4 	addi	r2,r2,-1
 c00bef4:	b009883a 	mov	r4,r22
 c00bef8:	80a0703a 	and	r16,r16,r2
 c00befc:	003ef906 	br	c00bae4 <__alt_data_end+0xfc00bae4>
 c00bf00:	103fca26 	beq	r2,zero,c00be2c <__alt_data_end+0xfc00be2c>
 c00bf04:	b421883a 	add	r16,r22,r16
 c00bf08:	a17fffc4 	addi	r5,r20,-1
 c00bf0c:	8580422e 	bgeu	r16,r22,c00c018 <__divdf3+0x83c>
 c00bf10:	2829883a 	mov	r20,r5
 c00bf14:	813fc41e 	bne	r16,r4,c00be28 <__alt_data_end+0xfc00be28>
 c00bf18:	d9800017 	ldw	r6,0(sp)
 c00bf1c:	30bfc21e 	bne	r6,r2,c00be28 <__alt_data_end+0xfc00be28>
 c00bf20:	003fc206 	br	c00be2c <__alt_data_end+0xfc00be2c>
 c00bf24:	143ff604 	addi	r16,r2,-40
 c00bf28:	8c20983a 	sll	r16,r17,r16
 c00bf2c:	002b883a 	mov	r21,zero
 c00bf30:	003eb406 	br	c00ba04 <__alt_data_end+0xfc00ba04>
 c00bf34:	d9800215 	stw	r6,8(sp)
 c00bf38:	d9c00515 	stw	r7,20(sp)
 c00bf3c:	da000415 	stw	r8,16(sp)
 c00bf40:	c00d7700 	call	c00d770 <__clzsi2>
 c00bf44:	10800804 	addi	r2,r2,32
 c00bf48:	da000417 	ldw	r8,16(sp)
 c00bf4c:	d9c00517 	ldw	r7,20(sp)
 c00bf50:	d9800217 	ldw	r6,8(sp)
 c00bf54:	003ea106 	br	c00b9dc <__alt_data_end+0xfc00b9dc>
 c00bf58:	147ff604 	addi	r17,r2,-40
 c00bf5c:	3462983a 	sll	r17,r6,r17
 c00bf60:	0029883a 	mov	r20,zero
 c00bf64:	003ec906 	br	c00ba8c <__alt_data_end+0xfc00ba8c>
 c00bf68:	3009883a 	mov	r4,r6
 c00bf6c:	d9400115 	stw	r5,4(sp)
 c00bf70:	d9800215 	stw	r6,8(sp)
 c00bf74:	da000415 	stw	r8,16(sp)
 c00bf78:	da400315 	stw	r9,12(sp)
 c00bf7c:	c00d7700 	call	c00d770 <__clzsi2>
 c00bf80:	10800804 	addi	r2,r2,32
 c00bf84:	da400317 	ldw	r9,12(sp)
 c00bf88:	da000417 	ldw	r8,16(sp)
 c00bf8c:	d9800217 	ldw	r6,8(sp)
 c00bf90:	d9400117 	ldw	r5,4(sp)
 c00bf94:	003eb306 	br	c00ba64 <__alt_data_end+0xfc00ba64>
 c00bf98:	d9800017 	ldw	r6,0(sp)
 c00bf9c:	a9ab883a 	add	r21,r21,r6
 c00bfa0:	a98b803a 	cmpltu	r5,r21,r6
 c00bfa4:	2d8b883a 	add	r5,r5,r22
 c00bfa8:	2a11883a 	add	r8,r5,r8
 c00bfac:	897fffc4 	addi	r5,r17,-1
 c00bfb0:	b2000c2e 	bgeu	r22,r8,c00bfe4 <__divdf3+0x808>
 c00bfb4:	41003f36 	bltu	r8,r4,c00c0b4 <__divdf3+0x8d8>
 c00bfb8:	22006c26 	beq	r4,r8,c00c16c <__divdf3+0x990>
 c00bfbc:	4109c83a 	sub	r4,r8,r4
 c00bfc0:	2823883a 	mov	r17,r5
 c00bfc4:	003f3b06 	br	c00bcb4 <__alt_data_end+0xfc00bcb4>
 c00bfc8:	ad3ed336 	bltu	r21,r20,c00bb18 <__alt_data_end+0xfc00bb18>
 c00bfcc:	a804d07a 	srli	r2,r21,1
 c00bfd0:	802e97fa 	slli	r23,r16,31
 c00bfd4:	a82a97fa 	slli	r21,r21,31
 c00bfd8:	8020d07a 	srli	r16,r16,1
 c00bfdc:	b8aeb03a 	or	r23,r23,r2
 c00bfe0:	003ed006 	br	c00bb24 <__alt_data_end+0xfc00bb24>
 c00bfe4:	b23ff51e 	bne	r22,r8,c00bfbc <__alt_data_end+0xfc00bfbc>
 c00bfe8:	d9800017 	ldw	r6,0(sp)
 c00bfec:	a9bff12e 	bgeu	r21,r6,c00bfb4 <__alt_data_end+0xfc00bfb4>
 c00bff0:	b109c83a 	sub	r4,r22,r4
 c00bff4:	2823883a 	mov	r17,r5
 c00bff8:	003f2e06 	br	c00bcb4 <__alt_data_end+0xfc00bcb4>
 c00bffc:	2021883a 	mov	r16,r4
 c00c000:	003eff06 	br	c00bc00 <__alt_data_end+0xfc00bc00>
 c00c004:	2023883a 	mov	r17,r4
 c00c008:	003ee406 	br	c00bb9c <__alt_data_end+0xfc00bb9c>
 c00c00c:	a8bfe236 	bltu	r21,r2,c00bf98 <__alt_data_end+0xfc00bf98>
 c00c010:	0009883a 	mov	r4,zero
 c00c014:	003f2706 	br	c00bcb4 <__alt_data_end+0xfc00bcb4>
 c00c018:	81002d36 	bltu	r16,r4,c00c0d0 <__divdf3+0x8f4>
 c00c01c:	24005626 	beq	r4,r16,c00c178 <__divdf3+0x99c>
 c00c020:	2829883a 	mov	r20,r5
 c00c024:	003f8006 	br	c00be28 <__alt_data_end+0xfc00be28>
 c00c028:	053fffc4 	movi	r20,-1
 c00c02c:	003f7f06 	br	c00be2c <__alt_data_end+0xfc00be2c>
 c00c030:	200f883a 	mov	r7,r4
 c00c034:	003f3c06 	br	c00bd28 <__alt_data_end+0xfc00bd28>
 c00c038:	1011883a 	mov	r8,r2
 c00c03c:	003f5506 	br	c00bd94 <__alt_data_end+0xfc00bd94>
 c00c040:	e027883a 	mov	r19,fp
 c00c044:	003f7906 	br	c00be2c <__alt_data_end+0xfc00be2c>
 c00c048:	010007c4 	movi	r4,31
 c00c04c:	20c02816 	blt	r4,r3,c00c0f0 <__divdf3+0x914>
 c00c050:	00800804 	movi	r2,32
 c00c054:	10c5c83a 	sub	r2,r2,r3
 c00c058:	888a983a 	sll	r5,r17,r2
 c00c05c:	a0c8d83a 	srl	r4,r20,r3
 c00c060:	a084983a 	sll	r2,r20,r2
 c00c064:	88e2d83a 	srl	r17,r17,r3
 c00c068:	2906b03a 	or	r3,r5,r4
 c00c06c:	1004c03a 	cmpne	r2,r2,zero
 c00c070:	1886b03a 	or	r3,r3,r2
 c00c074:	188001cc 	andi	r2,r3,7
 c00c078:	10000726 	beq	r2,zero,c00c098 <__divdf3+0x8bc>
 c00c07c:	188003cc 	andi	r2,r3,15
 c00c080:	01000104 	movi	r4,4
 c00c084:	11000426 	beq	r2,r4,c00c098 <__divdf3+0x8bc>
 c00c088:	1805883a 	mov	r2,r3
 c00c08c:	10c00104 	addi	r3,r2,4
 c00c090:	1885803a 	cmpltu	r2,r3,r2
 c00c094:	88a3883a 	add	r17,r17,r2
 c00c098:	8880202c 	andhi	r2,r17,128
 c00c09c:	10002926 	beq	r2,zero,c00c144 <__divdf3+0x968>
 c00c0a0:	9900004c 	andi	r4,r19,1
 c00c0a4:	00800044 	movi	r2,1
 c00c0a8:	0021883a 	mov	r16,zero
 c00c0ac:	002b883a 	mov	r21,zero
 c00c0b0:	003e2906 	br	c00b958 <__alt_data_end+0xfc00b958>
 c00c0b4:	d9800017 	ldw	r6,0(sp)
 c00c0b8:	8c7fff84 	addi	r17,r17,-2
 c00c0bc:	a9ab883a 	add	r21,r21,r6
 c00c0c0:	a98b803a 	cmpltu	r5,r21,r6
 c00c0c4:	2d8b883a 	add	r5,r5,r22
 c00c0c8:	2a11883a 	add	r8,r5,r8
 c00c0cc:	003ef806 	br	c00bcb0 <__alt_data_end+0xfc00bcb0>
 c00c0d0:	d9800017 	ldw	r6,0(sp)
 c00c0d4:	318f883a 	add	r7,r6,r6
 c00c0d8:	398b803a 	cmpltu	r5,r7,r6
 c00c0dc:	2d8d883a 	add	r6,r5,r22
 c00c0e0:	81a1883a 	add	r16,r16,r6
 c00c0e4:	a17fff84 	addi	r5,r20,-2
 c00c0e8:	d9c00015 	stw	r7,0(sp)
 c00c0ec:	003f8806 	br	c00bf10 <__alt_data_end+0xfc00bf10>
 c00c0f0:	013ff844 	movi	r4,-31
 c00c0f4:	2085c83a 	sub	r2,r4,r2
 c00c0f8:	8888d83a 	srl	r4,r17,r2
 c00c0fc:	00800804 	movi	r2,32
 c00c100:	18802126 	beq	r3,r2,c00c188 <__divdf3+0x9ac>
 c00c104:	04001004 	movi	r16,64
 c00c108:	80c7c83a 	sub	r3,r16,r3
 c00c10c:	88e0983a 	sll	r16,r17,r3
 c00c110:	8504b03a 	or	r2,r16,r20
 c00c114:	1004c03a 	cmpne	r2,r2,zero
 c00c118:	2084b03a 	or	r2,r4,r2
 c00c11c:	144001cc 	andi	r17,r2,7
 c00c120:	88000d1e 	bne	r17,zero,c00c158 <__divdf3+0x97c>
 c00c124:	0021883a 	mov	r16,zero
 c00c128:	102ad0fa 	srli	r21,r2,3
 c00c12c:	9900004c 	andi	r4,r19,1
 c00c130:	0005883a 	mov	r2,zero
 c00c134:	ac6ab03a 	or	r21,r21,r17
 c00c138:	003e0706 	br	c00b958 <__alt_data_end+0xfc00b958>
 c00c13c:	1007883a 	mov	r3,r2
 c00c140:	0023883a 	mov	r17,zero
 c00c144:	8820927a 	slli	r16,r17,9
 c00c148:	1805883a 	mov	r2,r3
 c00c14c:	8822977a 	slli	r17,r17,29
 c00c150:	8020d33a 	srli	r16,r16,12
 c00c154:	003ff406 	br	c00c128 <__alt_data_end+0xfc00c128>
 c00c158:	10c003cc 	andi	r3,r2,15
 c00c15c:	01000104 	movi	r4,4
 c00c160:	193ff626 	beq	r3,r4,c00c13c <__alt_data_end+0xfc00c13c>
 c00c164:	0023883a 	mov	r17,zero
 c00c168:	003fc806 	br	c00c08c <__alt_data_end+0xfc00c08c>
 c00c16c:	a8bfd136 	bltu	r21,r2,c00c0b4 <__alt_data_end+0xfc00c0b4>
 c00c170:	2823883a 	mov	r17,r5
 c00c174:	003fa606 	br	c00c010 <__alt_data_end+0xfc00c010>
 c00c178:	d9800017 	ldw	r6,0(sp)
 c00c17c:	30bfd436 	bltu	r6,r2,c00c0d0 <__alt_data_end+0xfc00c0d0>
 c00c180:	2829883a 	mov	r20,r5
 c00c184:	003f6406 	br	c00bf18 <__alt_data_end+0xfc00bf18>
 c00c188:	0021883a 	mov	r16,zero
 c00c18c:	003fe006 	br	c00c110 <__alt_data_end+0xfc00c110>
 c00c190:	00800434 	movhi	r2,16
 c00c194:	8c000234 	orhi	r16,r17,8
 c00c198:	10bfffc4 	addi	r2,r2,-1
 c00c19c:	e009883a 	mov	r4,fp
 c00c1a0:	80a0703a 	and	r16,r16,r2
 c00c1a4:	a02b883a 	mov	r21,r20
 c00c1a8:	003e4e06 	br	c00bae4 <__alt_data_end+0xfc00bae4>

0c00c1ac <__eqdf2>:
 c00c1ac:	2804d53a 	srli	r2,r5,20
 c00c1b0:	3806d53a 	srli	r3,r7,20
 c00c1b4:	02000434 	movhi	r8,16
 c00c1b8:	423fffc4 	addi	r8,r8,-1
 c00c1bc:	1081ffcc 	andi	r2,r2,2047
 c00c1c0:	0281ffc4 	movi	r10,2047
 c00c1c4:	2a12703a 	and	r9,r5,r8
 c00c1c8:	18c1ffcc 	andi	r3,r3,2047
 c00c1cc:	3a10703a 	and	r8,r7,r8
 c00c1d0:	280ad7fa 	srli	r5,r5,31
 c00c1d4:	380ed7fa 	srli	r7,r7,31
 c00c1d8:	12801026 	beq	r2,r10,c00c21c <__eqdf2+0x70>
 c00c1dc:	0281ffc4 	movi	r10,2047
 c00c1e0:	1a800a26 	beq	r3,r10,c00c20c <__eqdf2+0x60>
 c00c1e4:	10c00226 	beq	r2,r3,c00c1f0 <__eqdf2+0x44>
 c00c1e8:	00800044 	movi	r2,1
 c00c1ec:	f800283a 	ret
 c00c1f0:	4a3ffd1e 	bne	r9,r8,c00c1e8 <__alt_data_end+0xfc00c1e8>
 c00c1f4:	21bffc1e 	bne	r4,r6,c00c1e8 <__alt_data_end+0xfc00c1e8>
 c00c1f8:	29c00c26 	beq	r5,r7,c00c22c <__eqdf2+0x80>
 c00c1fc:	103ffa1e 	bne	r2,zero,c00c1e8 <__alt_data_end+0xfc00c1e8>
 c00c200:	2244b03a 	or	r2,r4,r9
 c00c204:	1004c03a 	cmpne	r2,r2,zero
 c00c208:	f800283a 	ret
 c00c20c:	3214b03a 	or	r10,r6,r8
 c00c210:	503ff426 	beq	r10,zero,c00c1e4 <__alt_data_end+0xfc00c1e4>
 c00c214:	00800044 	movi	r2,1
 c00c218:	f800283a 	ret
 c00c21c:	2254b03a 	or	r10,r4,r9
 c00c220:	503fee26 	beq	r10,zero,c00c1dc <__alt_data_end+0xfc00c1dc>
 c00c224:	00800044 	movi	r2,1
 c00c228:	f800283a 	ret
 c00c22c:	0005883a 	mov	r2,zero
 c00c230:	f800283a 	ret

0c00c234 <__gedf2>:
 c00c234:	2804d53a 	srli	r2,r5,20
 c00c238:	3806d53a 	srli	r3,r7,20
 c00c23c:	02000434 	movhi	r8,16
 c00c240:	423fffc4 	addi	r8,r8,-1
 c00c244:	1081ffcc 	andi	r2,r2,2047
 c00c248:	0241ffc4 	movi	r9,2047
 c00c24c:	2a14703a 	and	r10,r5,r8
 c00c250:	18c1ffcc 	andi	r3,r3,2047
 c00c254:	3a10703a 	and	r8,r7,r8
 c00c258:	280ad7fa 	srli	r5,r5,31
 c00c25c:	380ed7fa 	srli	r7,r7,31
 c00c260:	12401d26 	beq	r2,r9,c00c2d8 <__gedf2+0xa4>
 c00c264:	0241ffc4 	movi	r9,2047
 c00c268:	1a401226 	beq	r3,r9,c00c2b4 <__gedf2+0x80>
 c00c26c:	1000081e 	bne	r2,zero,c00c290 <__gedf2+0x5c>
 c00c270:	2296b03a 	or	r11,r4,r10
 c00c274:	5813003a 	cmpeq	r9,r11,zero
 c00c278:	1800091e 	bne	r3,zero,c00c2a0 <__gedf2+0x6c>
 c00c27c:	3218b03a 	or	r12,r6,r8
 c00c280:	6000071e 	bne	r12,zero,c00c2a0 <__gedf2+0x6c>
 c00c284:	0005883a 	mov	r2,zero
 c00c288:	5800101e 	bne	r11,zero,c00c2cc <__gedf2+0x98>
 c00c28c:	f800283a 	ret
 c00c290:	18000c1e 	bne	r3,zero,c00c2c4 <__gedf2+0x90>
 c00c294:	3212b03a 	or	r9,r6,r8
 c00c298:	48000c26 	beq	r9,zero,c00c2cc <__gedf2+0x98>
 c00c29c:	0013883a 	mov	r9,zero
 c00c2a0:	39c03fcc 	andi	r7,r7,255
 c00c2a4:	48000826 	beq	r9,zero,c00c2c8 <__gedf2+0x94>
 c00c2a8:	38000926 	beq	r7,zero,c00c2d0 <__gedf2+0x9c>
 c00c2ac:	00800044 	movi	r2,1
 c00c2b0:	f800283a 	ret
 c00c2b4:	3212b03a 	or	r9,r6,r8
 c00c2b8:	483fec26 	beq	r9,zero,c00c26c <__alt_data_end+0xfc00c26c>
 c00c2bc:	00bfff84 	movi	r2,-2
 c00c2c0:	f800283a 	ret
 c00c2c4:	39c03fcc 	andi	r7,r7,255
 c00c2c8:	29c00626 	beq	r5,r7,c00c2e4 <__gedf2+0xb0>
 c00c2cc:	283ff726 	beq	r5,zero,c00c2ac <__alt_data_end+0xfc00c2ac>
 c00c2d0:	00bfffc4 	movi	r2,-1
 c00c2d4:	f800283a 	ret
 c00c2d8:	2292b03a 	or	r9,r4,r10
 c00c2dc:	483fe126 	beq	r9,zero,c00c264 <__alt_data_end+0xfc00c264>
 c00c2e0:	003ff606 	br	c00c2bc <__alt_data_end+0xfc00c2bc>
 c00c2e4:	18bff916 	blt	r3,r2,c00c2cc <__alt_data_end+0xfc00c2cc>
 c00c2e8:	10c00316 	blt	r2,r3,c00c2f8 <__gedf2+0xc4>
 c00c2ec:	42bff736 	bltu	r8,r10,c00c2cc <__alt_data_end+0xfc00c2cc>
 c00c2f0:	52000326 	beq	r10,r8,c00c300 <__gedf2+0xcc>
 c00c2f4:	5200042e 	bgeu	r10,r8,c00c308 <__gedf2+0xd4>
 c00c2f8:	283fec1e 	bne	r5,zero,c00c2ac <__alt_data_end+0xfc00c2ac>
 c00c2fc:	003ff406 	br	c00c2d0 <__alt_data_end+0xfc00c2d0>
 c00c300:	313ff236 	bltu	r6,r4,c00c2cc <__alt_data_end+0xfc00c2cc>
 c00c304:	21bffc36 	bltu	r4,r6,c00c2f8 <__alt_data_end+0xfc00c2f8>
 c00c308:	0005883a 	mov	r2,zero
 c00c30c:	f800283a 	ret

0c00c310 <__ledf2>:
 c00c310:	2804d53a 	srli	r2,r5,20
 c00c314:	3810d53a 	srli	r8,r7,20
 c00c318:	00c00434 	movhi	r3,16
 c00c31c:	18ffffc4 	addi	r3,r3,-1
 c00c320:	1081ffcc 	andi	r2,r2,2047
 c00c324:	0241ffc4 	movi	r9,2047
 c00c328:	28d4703a 	and	r10,r5,r3
 c00c32c:	4201ffcc 	andi	r8,r8,2047
 c00c330:	38c6703a 	and	r3,r7,r3
 c00c334:	280ad7fa 	srli	r5,r5,31
 c00c338:	380ed7fa 	srli	r7,r7,31
 c00c33c:	12401f26 	beq	r2,r9,c00c3bc <__ledf2+0xac>
 c00c340:	0241ffc4 	movi	r9,2047
 c00c344:	42401426 	beq	r8,r9,c00c398 <__ledf2+0x88>
 c00c348:	1000091e 	bne	r2,zero,c00c370 <__ledf2+0x60>
 c00c34c:	2296b03a 	or	r11,r4,r10
 c00c350:	5813003a 	cmpeq	r9,r11,zero
 c00c354:	29403fcc 	andi	r5,r5,255
 c00c358:	40000a1e 	bne	r8,zero,c00c384 <__ledf2+0x74>
 c00c35c:	30d8b03a 	or	r12,r6,r3
 c00c360:	6000081e 	bne	r12,zero,c00c384 <__ledf2+0x74>
 c00c364:	0005883a 	mov	r2,zero
 c00c368:	5800111e 	bne	r11,zero,c00c3b0 <__ledf2+0xa0>
 c00c36c:	f800283a 	ret
 c00c370:	29403fcc 	andi	r5,r5,255
 c00c374:	40000c1e 	bne	r8,zero,c00c3a8 <__ledf2+0x98>
 c00c378:	30d2b03a 	or	r9,r6,r3
 c00c37c:	48000c26 	beq	r9,zero,c00c3b0 <__ledf2+0xa0>
 c00c380:	0013883a 	mov	r9,zero
 c00c384:	39c03fcc 	andi	r7,r7,255
 c00c388:	48000826 	beq	r9,zero,c00c3ac <__ledf2+0x9c>
 c00c38c:	38001126 	beq	r7,zero,c00c3d4 <__ledf2+0xc4>
 c00c390:	00800044 	movi	r2,1
 c00c394:	f800283a 	ret
 c00c398:	30d2b03a 	or	r9,r6,r3
 c00c39c:	483fea26 	beq	r9,zero,c00c348 <__alt_data_end+0xfc00c348>
 c00c3a0:	00800084 	movi	r2,2
 c00c3a4:	f800283a 	ret
 c00c3a8:	39c03fcc 	andi	r7,r7,255
 c00c3ac:	39400726 	beq	r7,r5,c00c3cc <__ledf2+0xbc>
 c00c3b0:	2800081e 	bne	r5,zero,c00c3d4 <__ledf2+0xc4>
 c00c3b4:	00800044 	movi	r2,1
 c00c3b8:	f800283a 	ret
 c00c3bc:	2292b03a 	or	r9,r4,r10
 c00c3c0:	483fdf26 	beq	r9,zero,c00c340 <__alt_data_end+0xfc00c340>
 c00c3c4:	00800084 	movi	r2,2
 c00c3c8:	f800283a 	ret
 c00c3cc:	4080030e 	bge	r8,r2,c00c3dc <__ledf2+0xcc>
 c00c3d0:	383fef26 	beq	r7,zero,c00c390 <__alt_data_end+0xfc00c390>
 c00c3d4:	00bfffc4 	movi	r2,-1
 c00c3d8:	f800283a 	ret
 c00c3dc:	123feb16 	blt	r2,r8,c00c38c <__alt_data_end+0xfc00c38c>
 c00c3e0:	1abff336 	bltu	r3,r10,c00c3b0 <__alt_data_end+0xfc00c3b0>
 c00c3e4:	50c00326 	beq	r10,r3,c00c3f4 <__ledf2+0xe4>
 c00c3e8:	50c0042e 	bgeu	r10,r3,c00c3fc <__ledf2+0xec>
 c00c3ec:	283fe81e 	bne	r5,zero,c00c390 <__alt_data_end+0xfc00c390>
 c00c3f0:	003ff806 	br	c00c3d4 <__alt_data_end+0xfc00c3d4>
 c00c3f4:	313fee36 	bltu	r6,r4,c00c3b0 <__alt_data_end+0xfc00c3b0>
 c00c3f8:	21bffc36 	bltu	r4,r6,c00c3ec <__alt_data_end+0xfc00c3ec>
 c00c3fc:	0005883a 	mov	r2,zero
 c00c400:	f800283a 	ret

0c00c404 <__muldf3>:
 c00c404:	deffee04 	addi	sp,sp,-72
 c00c408:	dd000c15 	stw	r20,48(sp)
 c00c40c:	2828d53a 	srli	r20,r5,20
 c00c410:	ddc00f15 	stw	r23,60(sp)
 c00c414:	282ed7fa 	srli	r23,r5,31
 c00c418:	dc000815 	stw	r16,32(sp)
 c00c41c:	04000434 	movhi	r16,16
 c00c420:	dcc00b15 	stw	r19,44(sp)
 c00c424:	843fffc4 	addi	r16,r16,-1
 c00c428:	dfc01115 	stw	ra,68(sp)
 c00c42c:	df001015 	stw	fp,64(sp)
 c00c430:	dd800e15 	stw	r22,56(sp)
 c00c434:	dd400d15 	stw	r21,52(sp)
 c00c438:	dc800a15 	stw	r18,40(sp)
 c00c43c:	dc400915 	stw	r17,36(sp)
 c00c440:	a501ffcc 	andi	r20,r20,2047
 c00c444:	2c20703a 	and	r16,r5,r16
 c00c448:	b827883a 	mov	r19,r23
 c00c44c:	ba403fcc 	andi	r9,r23,255
 c00c450:	a0006026 	beq	r20,zero,c00c5d4 <__muldf3+0x1d0>
 c00c454:	0081ffc4 	movi	r2,2047
 c00c458:	202d883a 	mov	r22,r4
 c00c45c:	a0803626 	beq	r20,r2,c00c538 <__muldf3+0x134>
 c00c460:	84000434 	orhi	r16,r16,16
 c00c464:	200ad77a 	srli	r5,r4,29
 c00c468:	800490fa 	slli	r2,r16,3
 c00c46c:	202c90fa 	slli	r22,r4,3
 c00c470:	a53f0044 	addi	r20,r20,-1023
 c00c474:	28a0b03a 	or	r16,r5,r2
 c00c478:	002b883a 	mov	r21,zero
 c00c47c:	000b883a 	mov	r5,zero
 c00c480:	3804d53a 	srli	r2,r7,20
 c00c484:	3838d7fa 	srli	fp,r7,31
 c00c488:	04400434 	movhi	r17,16
 c00c48c:	8c7fffc4 	addi	r17,r17,-1
 c00c490:	1081ffcc 	andi	r2,r2,2047
 c00c494:	3025883a 	mov	r18,r6
 c00c498:	3c62703a 	and	r17,r7,r17
 c00c49c:	e2803fcc 	andi	r10,fp,255
 c00c4a0:	10006d26 	beq	r2,zero,c00c658 <__muldf3+0x254>
 c00c4a4:	00c1ffc4 	movi	r3,2047
 c00c4a8:	10c06526 	beq	r2,r3,c00c640 <__muldf3+0x23c>
 c00c4ac:	8c400434 	orhi	r17,r17,16
 c00c4b0:	300ed77a 	srli	r7,r6,29
 c00c4b4:	880690fa 	slli	r3,r17,3
 c00c4b8:	302490fa 	slli	r18,r6,3
 c00c4bc:	10bf0044 	addi	r2,r2,-1023
 c00c4c0:	38e2b03a 	or	r17,r7,r3
 c00c4c4:	000f883a 	mov	r7,zero
 c00c4c8:	a087883a 	add	r3,r20,r2
 c00c4cc:	010003c4 	movi	r4,15
 c00c4d0:	3d44b03a 	or	r2,r7,r21
 c00c4d4:	e5ccf03a 	xor	r6,fp,r23
 c00c4d8:	1a000044 	addi	r8,r3,1
 c00c4dc:	20809b36 	bltu	r4,r2,c00c74c <__muldf3+0x348>
 c00c4e0:	100490ba 	slli	r2,r2,2
 c00c4e4:	01030074 	movhi	r4,3073
 c00c4e8:	21313e04 	addi	r4,r4,-15112
 c00c4ec:	1105883a 	add	r2,r2,r4
 c00c4f0:	10800017 	ldw	r2,0(r2)
 c00c4f4:	1000683a 	jmp	r2
 c00c4f8:	0c00c74c 	andi	r16,at,797
 c00c4fc:	0c00c558 	cmpnei	r16,at,789
 c00c500:	0c00c558 	cmpnei	r16,at,789
 c00c504:	0c00c554 	ori	r16,at,789
 c00c508:	0c00c728 	cmpgeui	r16,at,796
 c00c50c:	0c00c728 	cmpgeui	r16,at,796
 c00c510:	0c00c710 	cmplti	r16,at,796
 c00c514:	0c00c554 	ori	r16,at,789
 c00c518:	0c00c728 	cmpgeui	r16,at,796
 c00c51c:	0c00c710 	cmplti	r16,at,796
 c00c520:	0c00c728 	cmpgeui	r16,at,796
 c00c524:	0c00c554 	ori	r16,at,789
 c00c528:	0c00c738 	rdprs	r16,at,796
 c00c52c:	0c00c738 	rdprs	r16,at,796
 c00c530:	0c00c738 	rdprs	r16,at,796
 c00c534:	0c00ca98 	cmpnei	r16,at,810
 c00c538:	2404b03a 	or	r2,r4,r16
 c00c53c:	1000711e 	bne	r2,zero,c00c704 <__muldf3+0x300>
 c00c540:	05400204 	movi	r21,8
 c00c544:	0021883a 	mov	r16,zero
 c00c548:	002d883a 	mov	r22,zero
 c00c54c:	01400084 	movi	r5,2
 c00c550:	003fcb06 	br	c00c480 <__alt_data_end+0xfc00c480>
 c00c554:	500d883a 	mov	r6,r10
 c00c558:	00800084 	movi	r2,2
 c00c55c:	38805926 	beq	r7,r2,c00c6c4 <__muldf3+0x2c0>
 c00c560:	008000c4 	movi	r2,3
 c00c564:	3881bb26 	beq	r7,r2,c00cc54 <__muldf3+0x850>
 c00c568:	00800044 	movi	r2,1
 c00c56c:	3881961e 	bne	r7,r2,c00cbc8 <__muldf3+0x7c4>
 c00c570:	3027883a 	mov	r19,r6
 c00c574:	0005883a 	mov	r2,zero
 c00c578:	0021883a 	mov	r16,zero
 c00c57c:	002d883a 	mov	r22,zero
 c00c580:	1004953a 	slli	r2,r2,20
 c00c584:	98c03fcc 	andi	r3,r19,255
 c00c588:	04400434 	movhi	r17,16
 c00c58c:	8c7fffc4 	addi	r17,r17,-1
 c00c590:	180697fa 	slli	r3,r3,31
 c00c594:	8460703a 	and	r16,r16,r17
 c00c598:	80a0b03a 	or	r16,r16,r2
 c00c59c:	80c6b03a 	or	r3,r16,r3
 c00c5a0:	b005883a 	mov	r2,r22
 c00c5a4:	dfc01117 	ldw	ra,68(sp)
 c00c5a8:	df001017 	ldw	fp,64(sp)
 c00c5ac:	ddc00f17 	ldw	r23,60(sp)
 c00c5b0:	dd800e17 	ldw	r22,56(sp)
 c00c5b4:	dd400d17 	ldw	r21,52(sp)
 c00c5b8:	dd000c17 	ldw	r20,48(sp)
 c00c5bc:	dcc00b17 	ldw	r19,44(sp)
 c00c5c0:	dc800a17 	ldw	r18,40(sp)
 c00c5c4:	dc400917 	ldw	r17,36(sp)
 c00c5c8:	dc000817 	ldw	r16,32(sp)
 c00c5cc:	dec01204 	addi	sp,sp,72
 c00c5d0:	f800283a 	ret
 c00c5d4:	2404b03a 	or	r2,r4,r16
 c00c5d8:	202b883a 	mov	r21,r4
 c00c5dc:	10004426 	beq	r2,zero,c00c6f0 <__muldf3+0x2ec>
 c00c5e0:	80015126 	beq	r16,zero,c00cb28 <__muldf3+0x724>
 c00c5e4:	8009883a 	mov	r4,r16
 c00c5e8:	d9800715 	stw	r6,28(sp)
 c00c5ec:	d9c00215 	stw	r7,8(sp)
 c00c5f0:	da400415 	stw	r9,16(sp)
 c00c5f4:	c00d7700 	call	c00d770 <__clzsi2>
 c00c5f8:	d9800717 	ldw	r6,28(sp)
 c00c5fc:	d9c00217 	ldw	r7,8(sp)
 c00c600:	da400417 	ldw	r9,16(sp)
 c00c604:	113ffd44 	addi	r4,r2,-11
 c00c608:	00c00704 	movi	r3,28
 c00c60c:	19014216 	blt	r3,r4,c00cb18 <__muldf3+0x714>
 c00c610:	00c00744 	movi	r3,29
 c00c614:	15bffe04 	addi	r22,r2,-8
 c00c618:	1907c83a 	sub	r3,r3,r4
 c00c61c:	85a0983a 	sll	r16,r16,r22
 c00c620:	a8c6d83a 	srl	r3,r21,r3
 c00c624:	adac983a 	sll	r22,r21,r22
 c00c628:	1c20b03a 	or	r16,r3,r16
 c00c62c:	1080fcc4 	addi	r2,r2,1011
 c00c630:	00a9c83a 	sub	r20,zero,r2
 c00c634:	002b883a 	mov	r21,zero
 c00c638:	000b883a 	mov	r5,zero
 c00c63c:	003f9006 	br	c00c480 <__alt_data_end+0xfc00c480>
 c00c640:	3446b03a 	or	r3,r6,r17
 c00c644:	1800281e 	bne	r3,zero,c00c6e8 <__muldf3+0x2e4>
 c00c648:	0023883a 	mov	r17,zero
 c00c64c:	0025883a 	mov	r18,zero
 c00c650:	01c00084 	movi	r7,2
 c00c654:	003f9c06 	br	c00c4c8 <__alt_data_end+0xfc00c4c8>
 c00c658:	3446b03a 	or	r3,r6,r17
 c00c65c:	18001e26 	beq	r3,zero,c00c6d8 <__muldf3+0x2d4>
 c00c660:	88012126 	beq	r17,zero,c00cae8 <__muldf3+0x6e4>
 c00c664:	8809883a 	mov	r4,r17
 c00c668:	d9400215 	stw	r5,8(sp)
 c00c66c:	d9800715 	stw	r6,28(sp)
 c00c670:	da400415 	stw	r9,16(sp)
 c00c674:	da800315 	stw	r10,12(sp)
 c00c678:	c00d7700 	call	c00d770 <__clzsi2>
 c00c67c:	d9400217 	ldw	r5,8(sp)
 c00c680:	d9800717 	ldw	r6,28(sp)
 c00c684:	da400417 	ldw	r9,16(sp)
 c00c688:	da800317 	ldw	r10,12(sp)
 c00c68c:	113ffd44 	addi	r4,r2,-11
 c00c690:	00c00704 	movi	r3,28
 c00c694:	19011016 	blt	r3,r4,c00cad8 <__muldf3+0x6d4>
 c00c698:	00c00744 	movi	r3,29
 c00c69c:	14bffe04 	addi	r18,r2,-8
 c00c6a0:	1907c83a 	sub	r3,r3,r4
 c00c6a4:	8ca2983a 	sll	r17,r17,r18
 c00c6a8:	30c6d83a 	srl	r3,r6,r3
 c00c6ac:	34a4983a 	sll	r18,r6,r18
 c00c6b0:	1c62b03a 	or	r17,r3,r17
 c00c6b4:	1080fcc4 	addi	r2,r2,1011
 c00c6b8:	0085c83a 	sub	r2,zero,r2
 c00c6bc:	000f883a 	mov	r7,zero
 c00c6c0:	003f8106 	br	c00c4c8 <__alt_data_end+0xfc00c4c8>
 c00c6c4:	3027883a 	mov	r19,r6
 c00c6c8:	0081ffc4 	movi	r2,2047
 c00c6cc:	0021883a 	mov	r16,zero
 c00c6d0:	002d883a 	mov	r22,zero
 c00c6d4:	003faa06 	br	c00c580 <__alt_data_end+0xfc00c580>
 c00c6d8:	0023883a 	mov	r17,zero
 c00c6dc:	0025883a 	mov	r18,zero
 c00c6e0:	01c00044 	movi	r7,1
 c00c6e4:	003f7806 	br	c00c4c8 <__alt_data_end+0xfc00c4c8>
 c00c6e8:	01c000c4 	movi	r7,3
 c00c6ec:	003f7606 	br	c00c4c8 <__alt_data_end+0xfc00c4c8>
 c00c6f0:	05400104 	movi	r21,4
 c00c6f4:	0021883a 	mov	r16,zero
 c00c6f8:	002d883a 	mov	r22,zero
 c00c6fc:	01400044 	movi	r5,1
 c00c700:	003f5f06 	br	c00c480 <__alt_data_end+0xfc00c480>
 c00c704:	05400304 	movi	r21,12
 c00c708:	014000c4 	movi	r5,3
 c00c70c:	003f5c06 	br	c00c480 <__alt_data_end+0xfc00c480>
 c00c710:	04000434 	movhi	r16,16
 c00c714:	0027883a 	mov	r19,zero
 c00c718:	843fffc4 	addi	r16,r16,-1
 c00c71c:	05bfffc4 	movi	r22,-1
 c00c720:	0081ffc4 	movi	r2,2047
 c00c724:	003f9606 	br	c00c580 <__alt_data_end+0xfc00c580>
 c00c728:	8023883a 	mov	r17,r16
 c00c72c:	b025883a 	mov	r18,r22
 c00c730:	280f883a 	mov	r7,r5
 c00c734:	003f8806 	br	c00c558 <__alt_data_end+0xfc00c558>
 c00c738:	8023883a 	mov	r17,r16
 c00c73c:	b025883a 	mov	r18,r22
 c00c740:	480d883a 	mov	r6,r9
 c00c744:	280f883a 	mov	r7,r5
 c00c748:	003f8306 	br	c00c558 <__alt_data_end+0xfc00c558>
 c00c74c:	b026d43a 	srli	r19,r22,16
 c00c750:	902ed43a 	srli	r23,r18,16
 c00c754:	b5bfffcc 	andi	r22,r22,65535
 c00c758:	94bfffcc 	andi	r18,r18,65535
 c00c75c:	b00b883a 	mov	r5,r22
 c00c760:	9009883a 	mov	r4,r18
 c00c764:	d8c00515 	stw	r3,20(sp)
 c00c768:	d9800715 	stw	r6,28(sp)
 c00c76c:	da000615 	stw	r8,24(sp)
 c00c770:	c0009680 	call	c000968 <__mulsi3>
 c00c774:	980b883a 	mov	r5,r19
 c00c778:	9009883a 	mov	r4,r18
 c00c77c:	1029883a 	mov	r20,r2
 c00c780:	c0009680 	call	c000968 <__mulsi3>
 c00c784:	b80b883a 	mov	r5,r23
 c00c788:	9809883a 	mov	r4,r19
 c00c78c:	102b883a 	mov	r21,r2
 c00c790:	c0009680 	call	c000968 <__mulsi3>
 c00c794:	b809883a 	mov	r4,r23
 c00c798:	b00b883a 	mov	r5,r22
 c00c79c:	1039883a 	mov	fp,r2
 c00c7a0:	c0009680 	call	c000968 <__mulsi3>
 c00c7a4:	a008d43a 	srli	r4,r20,16
 c00c7a8:	1545883a 	add	r2,r2,r21
 c00c7ac:	d8c00517 	ldw	r3,20(sp)
 c00c7b0:	2085883a 	add	r2,r4,r2
 c00c7b4:	d9800717 	ldw	r6,28(sp)
 c00c7b8:	da000617 	ldw	r8,24(sp)
 c00c7bc:	1540022e 	bgeu	r2,r21,c00c7c8 <__muldf3+0x3c4>
 c00c7c0:	01000074 	movhi	r4,1
 c00c7c4:	e139883a 	add	fp,fp,r4
 c00c7c8:	100e943a 	slli	r7,r2,16
 c00c7cc:	1004d43a 	srli	r2,r2,16
 c00c7d0:	882ad43a 	srli	r21,r17,16
 c00c7d4:	a53fffcc 	andi	r20,r20,65535
 c00c7d8:	8c7fffcc 	andi	r17,r17,65535
 c00c7dc:	3d29883a 	add	r20,r7,r20
 c00c7e0:	b00b883a 	mov	r5,r22
 c00c7e4:	8809883a 	mov	r4,r17
 c00c7e8:	d8c00515 	stw	r3,20(sp)
 c00c7ec:	d9800715 	stw	r6,28(sp)
 c00c7f0:	da000615 	stw	r8,24(sp)
 c00c7f4:	dd000115 	stw	r20,4(sp)
 c00c7f8:	d8800015 	stw	r2,0(sp)
 c00c7fc:	c0009680 	call	c000968 <__mulsi3>
 c00c800:	980b883a 	mov	r5,r19
 c00c804:	8809883a 	mov	r4,r17
 c00c808:	d8800215 	stw	r2,8(sp)
 c00c80c:	c0009680 	call	c000968 <__mulsi3>
 c00c810:	9809883a 	mov	r4,r19
 c00c814:	a80b883a 	mov	r5,r21
 c00c818:	1029883a 	mov	r20,r2
 c00c81c:	c0009680 	call	c000968 <__mulsi3>
 c00c820:	b00b883a 	mov	r5,r22
 c00c824:	a809883a 	mov	r4,r21
 c00c828:	d8800415 	stw	r2,16(sp)
 c00c82c:	c0009680 	call	c000968 <__mulsi3>
 c00c830:	d9c00217 	ldw	r7,8(sp)
 c00c834:	1505883a 	add	r2,r2,r20
 c00c838:	d8c00517 	ldw	r3,20(sp)
 c00c83c:	3826d43a 	srli	r19,r7,16
 c00c840:	d9800717 	ldw	r6,28(sp)
 c00c844:	da000617 	ldw	r8,24(sp)
 c00c848:	9885883a 	add	r2,r19,r2
 c00c84c:	da400417 	ldw	r9,16(sp)
 c00c850:	1500022e 	bgeu	r2,r20,c00c85c <__muldf3+0x458>
 c00c854:	01000074 	movhi	r4,1
 c00c858:	4913883a 	add	r9,r9,r4
 c00c85c:	1028d43a 	srli	r20,r2,16
 c00c860:	1004943a 	slli	r2,r2,16
 c00c864:	802cd43a 	srli	r22,r16,16
 c00c868:	843fffcc 	andi	r16,r16,65535
 c00c86c:	3cffffcc 	andi	r19,r7,65535
 c00c870:	9009883a 	mov	r4,r18
 c00c874:	800b883a 	mov	r5,r16
 c00c878:	a269883a 	add	r20,r20,r9
 c00c87c:	d8c00515 	stw	r3,20(sp)
 c00c880:	d9800715 	stw	r6,28(sp)
 c00c884:	da000615 	stw	r8,24(sp)
 c00c888:	14e7883a 	add	r19,r2,r19
 c00c88c:	c0009680 	call	c000968 <__mulsi3>
 c00c890:	9009883a 	mov	r4,r18
 c00c894:	b00b883a 	mov	r5,r22
 c00c898:	d8800315 	stw	r2,12(sp)
 c00c89c:	c0009680 	call	c000968 <__mulsi3>
 c00c8a0:	b809883a 	mov	r4,r23
 c00c8a4:	b00b883a 	mov	r5,r22
 c00c8a8:	d8800215 	stw	r2,8(sp)
 c00c8ac:	c0009680 	call	c000968 <__mulsi3>
 c00c8b0:	b80b883a 	mov	r5,r23
 c00c8b4:	8009883a 	mov	r4,r16
 c00c8b8:	d8800415 	stw	r2,16(sp)
 c00c8bc:	c0009680 	call	c000968 <__mulsi3>
 c00c8c0:	da800317 	ldw	r10,12(sp)
 c00c8c4:	d9c00217 	ldw	r7,8(sp)
 c00c8c8:	d9000017 	ldw	r4,0(sp)
 c00c8cc:	502ed43a 	srli	r23,r10,16
 c00c8d0:	11c5883a 	add	r2,r2,r7
 c00c8d4:	24e5883a 	add	r18,r4,r19
 c00c8d8:	b885883a 	add	r2,r23,r2
 c00c8dc:	d8c00517 	ldw	r3,20(sp)
 c00c8e0:	d9800717 	ldw	r6,28(sp)
 c00c8e4:	da000617 	ldw	r8,24(sp)
 c00c8e8:	da400417 	ldw	r9,16(sp)
 c00c8ec:	11c0022e 	bgeu	r2,r7,c00c8f8 <__muldf3+0x4f4>
 c00c8f0:	01000074 	movhi	r4,1
 c00c8f4:	4913883a 	add	r9,r9,r4
 c00c8f8:	100ed43a 	srli	r7,r2,16
 c00c8fc:	1004943a 	slli	r2,r2,16
 c00c900:	55ffffcc 	andi	r23,r10,65535
 c00c904:	3a53883a 	add	r9,r7,r9
 c00c908:	8809883a 	mov	r4,r17
 c00c90c:	800b883a 	mov	r5,r16
 c00c910:	d8c00515 	stw	r3,20(sp)
 c00c914:	d9800715 	stw	r6,28(sp)
 c00c918:	da000615 	stw	r8,24(sp)
 c00c91c:	da400415 	stw	r9,16(sp)
 c00c920:	15ef883a 	add	r23,r2,r23
 c00c924:	c0009680 	call	c000968 <__mulsi3>
 c00c928:	8809883a 	mov	r4,r17
 c00c92c:	b00b883a 	mov	r5,r22
 c00c930:	d8800215 	stw	r2,8(sp)
 c00c934:	c0009680 	call	c000968 <__mulsi3>
 c00c938:	b00b883a 	mov	r5,r22
 c00c93c:	a809883a 	mov	r4,r21
 c00c940:	d8800315 	stw	r2,12(sp)
 c00c944:	c0009680 	call	c000968 <__mulsi3>
 c00c948:	8009883a 	mov	r4,r16
 c00c94c:	a80b883a 	mov	r5,r21
 c00c950:	1023883a 	mov	r17,r2
 c00c954:	c0009680 	call	c000968 <__mulsi3>
 c00c958:	d9c00217 	ldw	r7,8(sp)
 c00c95c:	da800317 	ldw	r10,12(sp)
 c00c960:	d8c00517 	ldw	r3,20(sp)
 c00c964:	3808d43a 	srli	r4,r7,16
 c00c968:	1285883a 	add	r2,r2,r10
 c00c96c:	d9800717 	ldw	r6,28(sp)
 c00c970:	2085883a 	add	r2,r4,r2
 c00c974:	da000617 	ldw	r8,24(sp)
 c00c978:	da400417 	ldw	r9,16(sp)
 c00c97c:	1280022e 	bgeu	r2,r10,c00c988 <__muldf3+0x584>
 c00c980:	01000074 	movhi	r4,1
 c00c984:	8923883a 	add	r17,r17,r4
 c00c988:	1008943a 	slli	r4,r2,16
 c00c98c:	39ffffcc 	andi	r7,r7,65535
 c00c990:	e4b9883a 	add	fp,fp,r18
 c00c994:	21cf883a 	add	r7,r4,r7
 c00c998:	e4e7803a 	cmpltu	r19,fp,r19
 c00c99c:	3d0f883a 	add	r7,r7,r20
 c00c9a0:	bf39883a 	add	fp,r23,fp
 c00c9a4:	99c9883a 	add	r4,r19,r7
 c00c9a8:	e5ef803a 	cmpltu	r23,fp,r23
 c00c9ac:	490b883a 	add	r5,r9,r4
 c00c9b0:	1004d43a 	srli	r2,r2,16
 c00c9b4:	b965883a 	add	r18,r23,r5
 c00c9b8:	24c9803a 	cmpltu	r4,r4,r19
 c00c9bc:	3d29803a 	cmpltu	r20,r7,r20
 c00c9c0:	a128b03a 	or	r20,r20,r4
 c00c9c4:	95ef803a 	cmpltu	r23,r18,r23
 c00c9c8:	2a53803a 	cmpltu	r9,r5,r9
 c00c9cc:	a0a9883a 	add	r20,r20,r2
 c00c9d0:	4deeb03a 	or	r23,r9,r23
 c00c9d4:	a5ef883a 	add	r23,r20,r23
 c00c9d8:	bc63883a 	add	r17,r23,r17
 c00c9dc:	e004927a 	slli	r2,fp,9
 c00c9e0:	d9000117 	ldw	r4,4(sp)
 c00c9e4:	882e927a 	slli	r23,r17,9
 c00c9e8:	9022d5fa 	srli	r17,r18,23
 c00c9ec:	e038d5fa 	srli	fp,fp,23
 c00c9f0:	1104b03a 	or	r2,r2,r4
 c00c9f4:	9024927a 	slli	r18,r18,9
 c00c9f8:	1004c03a 	cmpne	r2,r2,zero
 c00c9fc:	bc62b03a 	or	r17,r23,r17
 c00ca00:	1738b03a 	or	fp,r2,fp
 c00ca04:	8880402c 	andhi	r2,r17,256
 c00ca08:	e4a4b03a 	or	r18,fp,r18
 c00ca0c:	10000726 	beq	r2,zero,c00ca2c <__muldf3+0x628>
 c00ca10:	9006d07a 	srli	r3,r18,1
 c00ca14:	880497fa 	slli	r2,r17,31
 c00ca18:	9480004c 	andi	r18,r18,1
 c00ca1c:	8822d07a 	srli	r17,r17,1
 c00ca20:	1ca4b03a 	or	r18,r3,r18
 c00ca24:	14a4b03a 	or	r18,r2,r18
 c00ca28:	4007883a 	mov	r3,r8
 c00ca2c:	1880ffc4 	addi	r2,r3,1023
 c00ca30:	0080460e 	bge	zero,r2,c00cb4c <__muldf3+0x748>
 c00ca34:	910001cc 	andi	r4,r18,7
 c00ca38:	20000726 	beq	r4,zero,c00ca58 <__muldf3+0x654>
 c00ca3c:	910003cc 	andi	r4,r18,15
 c00ca40:	01400104 	movi	r5,4
 c00ca44:	21400426 	beq	r4,r5,c00ca58 <__muldf3+0x654>
 c00ca48:	9149883a 	add	r4,r18,r5
 c00ca4c:	24a5803a 	cmpltu	r18,r4,r18
 c00ca50:	8ca3883a 	add	r17,r17,r18
 c00ca54:	2025883a 	mov	r18,r4
 c00ca58:	8900402c 	andhi	r4,r17,256
 c00ca5c:	20000426 	beq	r4,zero,c00ca70 <__muldf3+0x66c>
 c00ca60:	18810004 	addi	r2,r3,1024
 c00ca64:	00ffc034 	movhi	r3,65280
 c00ca68:	18ffffc4 	addi	r3,r3,-1
 c00ca6c:	88e2703a 	and	r17,r17,r3
 c00ca70:	00c1ff84 	movi	r3,2046
 c00ca74:	18bf1316 	blt	r3,r2,c00c6c4 <__alt_data_end+0xfc00c6c4>
 c00ca78:	882c977a 	slli	r22,r17,29
 c00ca7c:	9024d0fa 	srli	r18,r18,3
 c00ca80:	8822927a 	slli	r17,r17,9
 c00ca84:	1081ffcc 	andi	r2,r2,2047
 c00ca88:	b4acb03a 	or	r22,r22,r18
 c00ca8c:	8820d33a 	srli	r16,r17,12
 c00ca90:	3027883a 	mov	r19,r6
 c00ca94:	003eba06 	br	c00c580 <__alt_data_end+0xfc00c580>
 c00ca98:	8080022c 	andhi	r2,r16,8
 c00ca9c:	10000926 	beq	r2,zero,c00cac4 <__muldf3+0x6c0>
 c00caa0:	8880022c 	andhi	r2,r17,8
 c00caa4:	1000071e 	bne	r2,zero,c00cac4 <__muldf3+0x6c0>
 c00caa8:	00800434 	movhi	r2,16
 c00caac:	8c000234 	orhi	r16,r17,8
 c00cab0:	10bfffc4 	addi	r2,r2,-1
 c00cab4:	e027883a 	mov	r19,fp
 c00cab8:	80a0703a 	and	r16,r16,r2
 c00cabc:	902d883a 	mov	r22,r18
 c00cac0:	003f1706 	br	c00c720 <__alt_data_end+0xfc00c720>
 c00cac4:	00800434 	movhi	r2,16
 c00cac8:	84000234 	orhi	r16,r16,8
 c00cacc:	10bfffc4 	addi	r2,r2,-1
 c00cad0:	80a0703a 	and	r16,r16,r2
 c00cad4:	003f1206 	br	c00c720 <__alt_data_end+0xfc00c720>
 c00cad8:	147ff604 	addi	r17,r2,-40
 c00cadc:	3462983a 	sll	r17,r6,r17
 c00cae0:	0025883a 	mov	r18,zero
 c00cae4:	003ef306 	br	c00c6b4 <__alt_data_end+0xfc00c6b4>
 c00cae8:	3009883a 	mov	r4,r6
 c00caec:	d9400215 	stw	r5,8(sp)
 c00caf0:	d9800715 	stw	r6,28(sp)
 c00caf4:	da400415 	stw	r9,16(sp)
 c00caf8:	da800315 	stw	r10,12(sp)
 c00cafc:	c00d7700 	call	c00d770 <__clzsi2>
 c00cb00:	10800804 	addi	r2,r2,32
 c00cb04:	da800317 	ldw	r10,12(sp)
 c00cb08:	da400417 	ldw	r9,16(sp)
 c00cb0c:	d9800717 	ldw	r6,28(sp)
 c00cb10:	d9400217 	ldw	r5,8(sp)
 c00cb14:	003edd06 	br	c00c68c <__alt_data_end+0xfc00c68c>
 c00cb18:	143ff604 	addi	r16,r2,-40
 c00cb1c:	ac20983a 	sll	r16,r21,r16
 c00cb20:	002d883a 	mov	r22,zero
 c00cb24:	003ec106 	br	c00c62c <__alt_data_end+0xfc00c62c>
 c00cb28:	d9800715 	stw	r6,28(sp)
 c00cb2c:	d9c00215 	stw	r7,8(sp)
 c00cb30:	da400415 	stw	r9,16(sp)
 c00cb34:	c00d7700 	call	c00d770 <__clzsi2>
 c00cb38:	10800804 	addi	r2,r2,32
 c00cb3c:	da400417 	ldw	r9,16(sp)
 c00cb40:	d9c00217 	ldw	r7,8(sp)
 c00cb44:	d9800717 	ldw	r6,28(sp)
 c00cb48:	003eae06 	br	c00c604 <__alt_data_end+0xfc00c604>
 c00cb4c:	00c00044 	movi	r3,1
 c00cb50:	1887c83a 	sub	r3,r3,r2
 c00cb54:	01000e04 	movi	r4,56
 c00cb58:	20fe8516 	blt	r4,r3,c00c570 <__alt_data_end+0xfc00c570>
 c00cb5c:	010007c4 	movi	r4,31
 c00cb60:	20c01b16 	blt	r4,r3,c00cbd0 <__muldf3+0x7cc>
 c00cb64:	00800804 	movi	r2,32
 c00cb68:	10c5c83a 	sub	r2,r2,r3
 c00cb6c:	888a983a 	sll	r5,r17,r2
 c00cb70:	90c8d83a 	srl	r4,r18,r3
 c00cb74:	9084983a 	sll	r2,r18,r2
 c00cb78:	88e2d83a 	srl	r17,r17,r3
 c00cb7c:	2906b03a 	or	r3,r5,r4
 c00cb80:	1004c03a 	cmpne	r2,r2,zero
 c00cb84:	1886b03a 	or	r3,r3,r2
 c00cb88:	188001cc 	andi	r2,r3,7
 c00cb8c:	10000726 	beq	r2,zero,c00cbac <__muldf3+0x7a8>
 c00cb90:	188003cc 	andi	r2,r3,15
 c00cb94:	01000104 	movi	r4,4
 c00cb98:	11000426 	beq	r2,r4,c00cbac <__muldf3+0x7a8>
 c00cb9c:	1805883a 	mov	r2,r3
 c00cba0:	10c00104 	addi	r3,r2,4
 c00cba4:	1885803a 	cmpltu	r2,r3,r2
 c00cba8:	88a3883a 	add	r17,r17,r2
 c00cbac:	8880202c 	andhi	r2,r17,128
 c00cbb0:	10001c26 	beq	r2,zero,c00cc24 <__muldf3+0x820>
 c00cbb4:	3027883a 	mov	r19,r6
 c00cbb8:	00800044 	movi	r2,1
 c00cbbc:	0021883a 	mov	r16,zero
 c00cbc0:	002d883a 	mov	r22,zero
 c00cbc4:	003e6e06 	br	c00c580 <__alt_data_end+0xfc00c580>
 c00cbc8:	4007883a 	mov	r3,r8
 c00cbcc:	003f9706 	br	c00ca2c <__alt_data_end+0xfc00ca2c>
 c00cbd0:	017ff844 	movi	r5,-31
 c00cbd4:	2885c83a 	sub	r2,r5,r2
 c00cbd8:	888ad83a 	srl	r5,r17,r2
 c00cbdc:	00800804 	movi	r2,32
 c00cbe0:	18801a26 	beq	r3,r2,c00cc4c <__muldf3+0x848>
 c00cbe4:	01001004 	movi	r4,64
 c00cbe8:	20c7c83a 	sub	r3,r4,r3
 c00cbec:	88e2983a 	sll	r17,r17,r3
 c00cbf0:	8ca4b03a 	or	r18,r17,r18
 c00cbf4:	9004c03a 	cmpne	r2,r18,zero
 c00cbf8:	2884b03a 	or	r2,r5,r2
 c00cbfc:	144001cc 	andi	r17,r2,7
 c00cc00:	88000d1e 	bne	r17,zero,c00cc38 <__muldf3+0x834>
 c00cc04:	0021883a 	mov	r16,zero
 c00cc08:	102cd0fa 	srli	r22,r2,3
 c00cc0c:	3027883a 	mov	r19,r6
 c00cc10:	0005883a 	mov	r2,zero
 c00cc14:	b46cb03a 	or	r22,r22,r17
 c00cc18:	003e5906 	br	c00c580 <__alt_data_end+0xfc00c580>
 c00cc1c:	1007883a 	mov	r3,r2
 c00cc20:	0023883a 	mov	r17,zero
 c00cc24:	8820927a 	slli	r16,r17,9
 c00cc28:	1805883a 	mov	r2,r3
 c00cc2c:	8822977a 	slli	r17,r17,29
 c00cc30:	8020d33a 	srli	r16,r16,12
 c00cc34:	003ff406 	br	c00cc08 <__alt_data_end+0xfc00cc08>
 c00cc38:	10c003cc 	andi	r3,r2,15
 c00cc3c:	01000104 	movi	r4,4
 c00cc40:	193ff626 	beq	r3,r4,c00cc1c <__alt_data_end+0xfc00cc1c>
 c00cc44:	0023883a 	mov	r17,zero
 c00cc48:	003fd506 	br	c00cba0 <__alt_data_end+0xfc00cba0>
 c00cc4c:	0023883a 	mov	r17,zero
 c00cc50:	003fe706 	br	c00cbf0 <__alt_data_end+0xfc00cbf0>
 c00cc54:	00800434 	movhi	r2,16
 c00cc58:	8c000234 	orhi	r16,r17,8
 c00cc5c:	10bfffc4 	addi	r2,r2,-1
 c00cc60:	3027883a 	mov	r19,r6
 c00cc64:	80a0703a 	and	r16,r16,r2
 c00cc68:	902d883a 	mov	r22,r18
 c00cc6c:	003eac06 	br	c00c720 <__alt_data_end+0xfc00c720>

0c00cc70 <__subdf3>:
 c00cc70:	02000434 	movhi	r8,16
 c00cc74:	423fffc4 	addi	r8,r8,-1
 c00cc78:	defffb04 	addi	sp,sp,-20
 c00cc7c:	2a14703a 	and	r10,r5,r8
 c00cc80:	3812d53a 	srli	r9,r7,20
 c00cc84:	3a10703a 	and	r8,r7,r8
 c00cc88:	2006d77a 	srli	r3,r4,29
 c00cc8c:	3004d77a 	srli	r2,r6,29
 c00cc90:	dc000015 	stw	r16,0(sp)
 c00cc94:	501490fa 	slli	r10,r10,3
 c00cc98:	2820d53a 	srli	r16,r5,20
 c00cc9c:	401090fa 	slli	r8,r8,3
 c00cca0:	dc800215 	stw	r18,8(sp)
 c00cca4:	dc400115 	stw	r17,4(sp)
 c00cca8:	dfc00415 	stw	ra,16(sp)
 c00ccac:	202290fa 	slli	r17,r4,3
 c00ccb0:	dcc00315 	stw	r19,12(sp)
 c00ccb4:	4a41ffcc 	andi	r9,r9,2047
 c00ccb8:	0101ffc4 	movi	r4,2047
 c00ccbc:	2824d7fa 	srli	r18,r5,31
 c00ccc0:	8401ffcc 	andi	r16,r16,2047
 c00ccc4:	50c6b03a 	or	r3,r10,r3
 c00ccc8:	380ed7fa 	srli	r7,r7,31
 c00cccc:	408ab03a 	or	r5,r8,r2
 c00ccd0:	300c90fa 	slli	r6,r6,3
 c00ccd4:	49009626 	beq	r9,r4,c00cf30 <__subdf3+0x2c0>
 c00ccd8:	39c0005c 	xori	r7,r7,1
 c00ccdc:	8245c83a 	sub	r2,r16,r9
 c00cce0:	3c807426 	beq	r7,r18,c00ceb4 <__subdf3+0x244>
 c00cce4:	0080af0e 	bge	zero,r2,c00cfa4 <__subdf3+0x334>
 c00cce8:	48002a1e 	bne	r9,zero,c00cd94 <__subdf3+0x124>
 c00ccec:	2988b03a 	or	r4,r5,r6
 c00ccf0:	20009a1e 	bne	r4,zero,c00cf5c <__subdf3+0x2ec>
 c00ccf4:	888001cc 	andi	r2,r17,7
 c00ccf8:	10000726 	beq	r2,zero,c00cd18 <__subdf3+0xa8>
 c00ccfc:	888003cc 	andi	r2,r17,15
 c00cd00:	01000104 	movi	r4,4
 c00cd04:	11000426 	beq	r2,r4,c00cd18 <__subdf3+0xa8>
 c00cd08:	890b883a 	add	r5,r17,r4
 c00cd0c:	2c63803a 	cmpltu	r17,r5,r17
 c00cd10:	1c47883a 	add	r3,r3,r17
 c00cd14:	2823883a 	mov	r17,r5
 c00cd18:	1880202c 	andhi	r2,r3,128
 c00cd1c:	10005926 	beq	r2,zero,c00ce84 <__subdf3+0x214>
 c00cd20:	84000044 	addi	r16,r16,1
 c00cd24:	0081ffc4 	movi	r2,2047
 c00cd28:	8080be26 	beq	r16,r2,c00d024 <__subdf3+0x3b4>
 c00cd2c:	017fe034 	movhi	r5,65408
 c00cd30:	297fffc4 	addi	r5,r5,-1
 c00cd34:	1946703a 	and	r3,r3,r5
 c00cd38:	1804977a 	slli	r2,r3,29
 c00cd3c:	1806927a 	slli	r3,r3,9
 c00cd40:	8822d0fa 	srli	r17,r17,3
 c00cd44:	8401ffcc 	andi	r16,r16,2047
 c00cd48:	180ad33a 	srli	r5,r3,12
 c00cd4c:	9100004c 	andi	r4,r18,1
 c00cd50:	1444b03a 	or	r2,r2,r17
 c00cd54:	80c1ffcc 	andi	r3,r16,2047
 c00cd58:	1820953a 	slli	r16,r3,20
 c00cd5c:	20c03fcc 	andi	r3,r4,255
 c00cd60:	180897fa 	slli	r4,r3,31
 c00cd64:	00c00434 	movhi	r3,16
 c00cd68:	18ffffc4 	addi	r3,r3,-1
 c00cd6c:	28c6703a 	and	r3,r5,r3
 c00cd70:	1c06b03a 	or	r3,r3,r16
 c00cd74:	1906b03a 	or	r3,r3,r4
 c00cd78:	dfc00417 	ldw	ra,16(sp)
 c00cd7c:	dcc00317 	ldw	r19,12(sp)
 c00cd80:	dc800217 	ldw	r18,8(sp)
 c00cd84:	dc400117 	ldw	r17,4(sp)
 c00cd88:	dc000017 	ldw	r16,0(sp)
 c00cd8c:	dec00504 	addi	sp,sp,20
 c00cd90:	f800283a 	ret
 c00cd94:	0101ffc4 	movi	r4,2047
 c00cd98:	813fd626 	beq	r16,r4,c00ccf4 <__alt_data_end+0xfc00ccf4>
 c00cd9c:	29402034 	orhi	r5,r5,128
 c00cda0:	01000e04 	movi	r4,56
 c00cda4:	2080a316 	blt	r4,r2,c00d034 <__subdf3+0x3c4>
 c00cda8:	010007c4 	movi	r4,31
 c00cdac:	2080c616 	blt	r4,r2,c00d0c8 <__subdf3+0x458>
 c00cdb0:	01000804 	movi	r4,32
 c00cdb4:	2089c83a 	sub	r4,r4,r2
 c00cdb8:	2910983a 	sll	r8,r5,r4
 c00cdbc:	308ed83a 	srl	r7,r6,r2
 c00cdc0:	3108983a 	sll	r4,r6,r4
 c00cdc4:	2884d83a 	srl	r2,r5,r2
 c00cdc8:	41ccb03a 	or	r6,r8,r7
 c00cdcc:	2008c03a 	cmpne	r4,r4,zero
 c00cdd0:	310cb03a 	or	r6,r6,r4
 c00cdd4:	898dc83a 	sub	r6,r17,r6
 c00cdd8:	89a3803a 	cmpltu	r17,r17,r6
 c00cddc:	1887c83a 	sub	r3,r3,r2
 c00cde0:	1c47c83a 	sub	r3,r3,r17
 c00cde4:	3023883a 	mov	r17,r6
 c00cde8:	1880202c 	andhi	r2,r3,128
 c00cdec:	10002326 	beq	r2,zero,c00ce7c <__subdf3+0x20c>
 c00cdf0:	04c02034 	movhi	r19,128
 c00cdf4:	9cffffc4 	addi	r19,r19,-1
 c00cdf8:	1ce6703a 	and	r19,r3,r19
 c00cdfc:	98007a26 	beq	r19,zero,c00cfe8 <__subdf3+0x378>
 c00ce00:	9809883a 	mov	r4,r19
 c00ce04:	c00d7700 	call	c00d770 <__clzsi2>
 c00ce08:	113ffe04 	addi	r4,r2,-8
 c00ce0c:	00c007c4 	movi	r3,31
 c00ce10:	19007b16 	blt	r3,r4,c00d000 <__subdf3+0x390>
 c00ce14:	00800804 	movi	r2,32
 c00ce18:	1105c83a 	sub	r2,r2,r4
 c00ce1c:	8884d83a 	srl	r2,r17,r2
 c00ce20:	9906983a 	sll	r3,r19,r4
 c00ce24:	8922983a 	sll	r17,r17,r4
 c00ce28:	10c4b03a 	or	r2,r2,r3
 c00ce2c:	24007816 	blt	r4,r16,c00d010 <__subdf3+0x3a0>
 c00ce30:	2421c83a 	sub	r16,r4,r16
 c00ce34:	80c00044 	addi	r3,r16,1
 c00ce38:	010007c4 	movi	r4,31
 c00ce3c:	20c09516 	blt	r4,r3,c00d094 <__subdf3+0x424>
 c00ce40:	01400804 	movi	r5,32
 c00ce44:	28cbc83a 	sub	r5,r5,r3
 c00ce48:	88c8d83a 	srl	r4,r17,r3
 c00ce4c:	8962983a 	sll	r17,r17,r5
 c00ce50:	114a983a 	sll	r5,r2,r5
 c00ce54:	10c6d83a 	srl	r3,r2,r3
 c00ce58:	8804c03a 	cmpne	r2,r17,zero
 c00ce5c:	290ab03a 	or	r5,r5,r4
 c00ce60:	28a2b03a 	or	r17,r5,r2
 c00ce64:	0021883a 	mov	r16,zero
 c00ce68:	003fa206 	br	c00ccf4 <__alt_data_end+0xfc00ccf4>
 c00ce6c:	2090b03a 	or	r8,r4,r2
 c00ce70:	40018e26 	beq	r8,zero,c00d4ac <__subdf3+0x83c>
 c00ce74:	1007883a 	mov	r3,r2
 c00ce78:	2023883a 	mov	r17,r4
 c00ce7c:	888001cc 	andi	r2,r17,7
 c00ce80:	103f9e1e 	bne	r2,zero,c00ccfc <__alt_data_end+0xfc00ccfc>
 c00ce84:	1804977a 	slli	r2,r3,29
 c00ce88:	8822d0fa 	srli	r17,r17,3
 c00ce8c:	1810d0fa 	srli	r8,r3,3
 c00ce90:	9100004c 	andi	r4,r18,1
 c00ce94:	1444b03a 	or	r2,r2,r17
 c00ce98:	00c1ffc4 	movi	r3,2047
 c00ce9c:	80c02826 	beq	r16,r3,c00cf40 <__subdf3+0x2d0>
 c00cea0:	01400434 	movhi	r5,16
 c00cea4:	297fffc4 	addi	r5,r5,-1
 c00cea8:	80e0703a 	and	r16,r16,r3
 c00ceac:	414a703a 	and	r5,r8,r5
 c00ceb0:	003fa806 	br	c00cd54 <__alt_data_end+0xfc00cd54>
 c00ceb4:	0080630e 	bge	zero,r2,c00d044 <__subdf3+0x3d4>
 c00ceb8:	48003026 	beq	r9,zero,c00cf7c <__subdf3+0x30c>
 c00cebc:	0101ffc4 	movi	r4,2047
 c00cec0:	813f8c26 	beq	r16,r4,c00ccf4 <__alt_data_end+0xfc00ccf4>
 c00cec4:	29402034 	orhi	r5,r5,128
 c00cec8:	01000e04 	movi	r4,56
 c00cecc:	2080a90e 	bge	r4,r2,c00d174 <__subdf3+0x504>
 c00ced0:	298cb03a 	or	r6,r5,r6
 c00ced4:	3012c03a 	cmpne	r9,r6,zero
 c00ced8:	0005883a 	mov	r2,zero
 c00cedc:	4c53883a 	add	r9,r9,r17
 c00cee0:	4c63803a 	cmpltu	r17,r9,r17
 c00cee4:	10c7883a 	add	r3,r2,r3
 c00cee8:	88c7883a 	add	r3,r17,r3
 c00ceec:	4823883a 	mov	r17,r9
 c00cef0:	1880202c 	andhi	r2,r3,128
 c00cef4:	1000d026 	beq	r2,zero,c00d238 <__subdf3+0x5c8>
 c00cef8:	84000044 	addi	r16,r16,1
 c00cefc:	0081ffc4 	movi	r2,2047
 c00cf00:	8080fe26 	beq	r16,r2,c00d2fc <__subdf3+0x68c>
 c00cf04:	00bfe034 	movhi	r2,65408
 c00cf08:	10bfffc4 	addi	r2,r2,-1
 c00cf0c:	1886703a 	and	r3,r3,r2
 c00cf10:	880ad07a 	srli	r5,r17,1
 c00cf14:	180497fa 	slli	r2,r3,31
 c00cf18:	8900004c 	andi	r4,r17,1
 c00cf1c:	2922b03a 	or	r17,r5,r4
 c00cf20:	1806d07a 	srli	r3,r3,1
 c00cf24:	1462b03a 	or	r17,r2,r17
 c00cf28:	3825883a 	mov	r18,r7
 c00cf2c:	003f7106 	br	c00ccf4 <__alt_data_end+0xfc00ccf4>
 c00cf30:	2984b03a 	or	r2,r5,r6
 c00cf34:	103f6826 	beq	r2,zero,c00ccd8 <__alt_data_end+0xfc00ccd8>
 c00cf38:	39c03fcc 	andi	r7,r7,255
 c00cf3c:	003f6706 	br	c00ccdc <__alt_data_end+0xfc00ccdc>
 c00cf40:	4086b03a 	or	r3,r8,r2
 c00cf44:	18015226 	beq	r3,zero,c00d490 <__subdf3+0x820>
 c00cf48:	00c00434 	movhi	r3,16
 c00cf4c:	41400234 	orhi	r5,r8,8
 c00cf50:	18ffffc4 	addi	r3,r3,-1
 c00cf54:	28ca703a 	and	r5,r5,r3
 c00cf58:	003f7e06 	br	c00cd54 <__alt_data_end+0xfc00cd54>
 c00cf5c:	10bfffc4 	addi	r2,r2,-1
 c00cf60:	1000491e 	bne	r2,zero,c00d088 <__subdf3+0x418>
 c00cf64:	898fc83a 	sub	r7,r17,r6
 c00cf68:	89e3803a 	cmpltu	r17,r17,r7
 c00cf6c:	1947c83a 	sub	r3,r3,r5
 c00cf70:	1c47c83a 	sub	r3,r3,r17
 c00cf74:	3823883a 	mov	r17,r7
 c00cf78:	003f9b06 	br	c00cde8 <__alt_data_end+0xfc00cde8>
 c00cf7c:	2988b03a 	or	r4,r5,r6
 c00cf80:	203f5c26 	beq	r4,zero,c00ccf4 <__alt_data_end+0xfc00ccf4>
 c00cf84:	10bfffc4 	addi	r2,r2,-1
 c00cf88:	1000931e 	bne	r2,zero,c00d1d8 <__subdf3+0x568>
 c00cf8c:	898d883a 	add	r6,r17,r6
 c00cf90:	3463803a 	cmpltu	r17,r6,r17
 c00cf94:	1947883a 	add	r3,r3,r5
 c00cf98:	88c7883a 	add	r3,r17,r3
 c00cf9c:	3023883a 	mov	r17,r6
 c00cfa0:	003fd306 	br	c00cef0 <__alt_data_end+0xfc00cef0>
 c00cfa4:	1000541e 	bne	r2,zero,c00d0f8 <__subdf3+0x488>
 c00cfa8:	80800044 	addi	r2,r16,1
 c00cfac:	1081ffcc 	andi	r2,r2,2047
 c00cfb0:	01000044 	movi	r4,1
 c00cfb4:	2080a20e 	bge	r4,r2,c00d240 <__subdf3+0x5d0>
 c00cfb8:	8989c83a 	sub	r4,r17,r6
 c00cfbc:	8905803a 	cmpltu	r2,r17,r4
 c00cfc0:	1967c83a 	sub	r19,r3,r5
 c00cfc4:	98a7c83a 	sub	r19,r19,r2
 c00cfc8:	9880202c 	andhi	r2,r19,128
 c00cfcc:	10006326 	beq	r2,zero,c00d15c <__subdf3+0x4ec>
 c00cfd0:	3463c83a 	sub	r17,r6,r17
 c00cfd4:	28c7c83a 	sub	r3,r5,r3
 c00cfd8:	344d803a 	cmpltu	r6,r6,r17
 c00cfdc:	19a7c83a 	sub	r19,r3,r6
 c00cfe0:	3825883a 	mov	r18,r7
 c00cfe4:	983f861e 	bne	r19,zero,c00ce00 <__alt_data_end+0xfc00ce00>
 c00cfe8:	8809883a 	mov	r4,r17
 c00cfec:	c00d7700 	call	c00d770 <__clzsi2>
 c00cff0:	10800804 	addi	r2,r2,32
 c00cff4:	113ffe04 	addi	r4,r2,-8
 c00cff8:	00c007c4 	movi	r3,31
 c00cffc:	193f850e 	bge	r3,r4,c00ce14 <__alt_data_end+0xfc00ce14>
 c00d000:	10bff604 	addi	r2,r2,-40
 c00d004:	8884983a 	sll	r2,r17,r2
 c00d008:	0023883a 	mov	r17,zero
 c00d00c:	243f880e 	bge	r4,r16,c00ce30 <__alt_data_end+0xfc00ce30>
 c00d010:	00ffe034 	movhi	r3,65408
 c00d014:	18ffffc4 	addi	r3,r3,-1
 c00d018:	8121c83a 	sub	r16,r16,r4
 c00d01c:	10c6703a 	and	r3,r2,r3
 c00d020:	003f3406 	br	c00ccf4 <__alt_data_end+0xfc00ccf4>
 c00d024:	9100004c 	andi	r4,r18,1
 c00d028:	000b883a 	mov	r5,zero
 c00d02c:	0005883a 	mov	r2,zero
 c00d030:	003f4806 	br	c00cd54 <__alt_data_end+0xfc00cd54>
 c00d034:	298cb03a 	or	r6,r5,r6
 c00d038:	300cc03a 	cmpne	r6,r6,zero
 c00d03c:	0005883a 	mov	r2,zero
 c00d040:	003f6406 	br	c00cdd4 <__alt_data_end+0xfc00cdd4>
 c00d044:	10009a1e 	bne	r2,zero,c00d2b0 <__subdf3+0x640>
 c00d048:	82400044 	addi	r9,r16,1
 c00d04c:	4881ffcc 	andi	r2,r9,2047
 c00d050:	02800044 	movi	r10,1
 c00d054:	5080670e 	bge	r10,r2,c00d1f4 <__subdf3+0x584>
 c00d058:	0081ffc4 	movi	r2,2047
 c00d05c:	4880af26 	beq	r9,r2,c00d31c <__subdf3+0x6ac>
 c00d060:	898d883a 	add	r6,r17,r6
 c00d064:	1945883a 	add	r2,r3,r5
 c00d068:	3447803a 	cmpltu	r3,r6,r17
 c00d06c:	1887883a 	add	r3,r3,r2
 c00d070:	182297fa 	slli	r17,r3,31
 c00d074:	300cd07a 	srli	r6,r6,1
 c00d078:	1806d07a 	srli	r3,r3,1
 c00d07c:	4821883a 	mov	r16,r9
 c00d080:	89a2b03a 	or	r17,r17,r6
 c00d084:	003f1b06 	br	c00ccf4 <__alt_data_end+0xfc00ccf4>
 c00d088:	0101ffc4 	movi	r4,2047
 c00d08c:	813f441e 	bne	r16,r4,c00cda0 <__alt_data_end+0xfc00cda0>
 c00d090:	003f1806 	br	c00ccf4 <__alt_data_end+0xfc00ccf4>
 c00d094:	843ff844 	addi	r16,r16,-31
 c00d098:	01400804 	movi	r5,32
 c00d09c:	1408d83a 	srl	r4,r2,r16
 c00d0a0:	19405026 	beq	r3,r5,c00d1e4 <__subdf3+0x574>
 c00d0a4:	01401004 	movi	r5,64
 c00d0a8:	28c7c83a 	sub	r3,r5,r3
 c00d0ac:	10c4983a 	sll	r2,r2,r3
 c00d0b0:	88a2b03a 	or	r17,r17,r2
 c00d0b4:	8822c03a 	cmpne	r17,r17,zero
 c00d0b8:	2462b03a 	or	r17,r4,r17
 c00d0bc:	0007883a 	mov	r3,zero
 c00d0c0:	0021883a 	mov	r16,zero
 c00d0c4:	003f6d06 	br	c00ce7c <__alt_data_end+0xfc00ce7c>
 c00d0c8:	11fff804 	addi	r7,r2,-32
 c00d0cc:	01000804 	movi	r4,32
 c00d0d0:	29ced83a 	srl	r7,r5,r7
 c00d0d4:	11004526 	beq	r2,r4,c00d1ec <__subdf3+0x57c>
 c00d0d8:	01001004 	movi	r4,64
 c00d0dc:	2089c83a 	sub	r4,r4,r2
 c00d0e0:	2904983a 	sll	r2,r5,r4
 c00d0e4:	118cb03a 	or	r6,r2,r6
 c00d0e8:	300cc03a 	cmpne	r6,r6,zero
 c00d0ec:	398cb03a 	or	r6,r7,r6
 c00d0f0:	0005883a 	mov	r2,zero
 c00d0f4:	003f3706 	br	c00cdd4 <__alt_data_end+0xfc00cdd4>
 c00d0f8:	80002a26 	beq	r16,zero,c00d1a4 <__subdf3+0x534>
 c00d0fc:	0101ffc4 	movi	r4,2047
 c00d100:	49006626 	beq	r9,r4,c00d29c <__subdf3+0x62c>
 c00d104:	0085c83a 	sub	r2,zero,r2
 c00d108:	18c02034 	orhi	r3,r3,128
 c00d10c:	01000e04 	movi	r4,56
 c00d110:	20807e16 	blt	r4,r2,c00d30c <__subdf3+0x69c>
 c00d114:	010007c4 	movi	r4,31
 c00d118:	2080e716 	blt	r4,r2,c00d4b8 <__subdf3+0x848>
 c00d11c:	01000804 	movi	r4,32
 c00d120:	2089c83a 	sub	r4,r4,r2
 c00d124:	1914983a 	sll	r10,r3,r4
 c00d128:	8890d83a 	srl	r8,r17,r2
 c00d12c:	8908983a 	sll	r4,r17,r4
 c00d130:	1884d83a 	srl	r2,r3,r2
 c00d134:	5222b03a 	or	r17,r10,r8
 c00d138:	2006c03a 	cmpne	r3,r4,zero
 c00d13c:	88e2b03a 	or	r17,r17,r3
 c00d140:	3463c83a 	sub	r17,r6,r17
 c00d144:	2885c83a 	sub	r2,r5,r2
 c00d148:	344d803a 	cmpltu	r6,r6,r17
 c00d14c:	1187c83a 	sub	r3,r2,r6
 c00d150:	4821883a 	mov	r16,r9
 c00d154:	3825883a 	mov	r18,r7
 c00d158:	003f2306 	br	c00cde8 <__alt_data_end+0xfc00cde8>
 c00d15c:	24d0b03a 	or	r8,r4,r19
 c00d160:	40001b1e 	bne	r8,zero,c00d1d0 <__subdf3+0x560>
 c00d164:	0005883a 	mov	r2,zero
 c00d168:	0009883a 	mov	r4,zero
 c00d16c:	0021883a 	mov	r16,zero
 c00d170:	003f4906 	br	c00ce98 <__alt_data_end+0xfc00ce98>
 c00d174:	010007c4 	movi	r4,31
 c00d178:	20803a16 	blt	r4,r2,c00d264 <__subdf3+0x5f4>
 c00d17c:	01000804 	movi	r4,32
 c00d180:	2089c83a 	sub	r4,r4,r2
 c00d184:	2912983a 	sll	r9,r5,r4
 c00d188:	3090d83a 	srl	r8,r6,r2
 c00d18c:	3108983a 	sll	r4,r6,r4
 c00d190:	2884d83a 	srl	r2,r5,r2
 c00d194:	4a12b03a 	or	r9,r9,r8
 c00d198:	2008c03a 	cmpne	r4,r4,zero
 c00d19c:	4912b03a 	or	r9,r9,r4
 c00d1a0:	003f4e06 	br	c00cedc <__alt_data_end+0xfc00cedc>
 c00d1a4:	1c48b03a 	or	r4,r3,r17
 c00d1a8:	20003c26 	beq	r4,zero,c00d29c <__subdf3+0x62c>
 c00d1ac:	0084303a 	nor	r2,zero,r2
 c00d1b0:	1000381e 	bne	r2,zero,c00d294 <__subdf3+0x624>
 c00d1b4:	3463c83a 	sub	r17,r6,r17
 c00d1b8:	28c5c83a 	sub	r2,r5,r3
 c00d1bc:	344d803a 	cmpltu	r6,r6,r17
 c00d1c0:	1187c83a 	sub	r3,r2,r6
 c00d1c4:	4821883a 	mov	r16,r9
 c00d1c8:	3825883a 	mov	r18,r7
 c00d1cc:	003f0606 	br	c00cde8 <__alt_data_end+0xfc00cde8>
 c00d1d0:	2023883a 	mov	r17,r4
 c00d1d4:	003f0906 	br	c00cdfc <__alt_data_end+0xfc00cdfc>
 c00d1d8:	0101ffc4 	movi	r4,2047
 c00d1dc:	813f3a1e 	bne	r16,r4,c00cec8 <__alt_data_end+0xfc00cec8>
 c00d1e0:	003ec406 	br	c00ccf4 <__alt_data_end+0xfc00ccf4>
 c00d1e4:	0005883a 	mov	r2,zero
 c00d1e8:	003fb106 	br	c00d0b0 <__alt_data_end+0xfc00d0b0>
 c00d1ec:	0005883a 	mov	r2,zero
 c00d1f0:	003fbc06 	br	c00d0e4 <__alt_data_end+0xfc00d0e4>
 c00d1f4:	1c44b03a 	or	r2,r3,r17
 c00d1f8:	80008e1e 	bne	r16,zero,c00d434 <__subdf3+0x7c4>
 c00d1fc:	1000c826 	beq	r2,zero,c00d520 <__subdf3+0x8b0>
 c00d200:	2984b03a 	or	r2,r5,r6
 c00d204:	103ebb26 	beq	r2,zero,c00ccf4 <__alt_data_end+0xfc00ccf4>
 c00d208:	8989883a 	add	r4,r17,r6
 c00d20c:	1945883a 	add	r2,r3,r5
 c00d210:	2447803a 	cmpltu	r3,r4,r17
 c00d214:	1887883a 	add	r3,r3,r2
 c00d218:	1880202c 	andhi	r2,r3,128
 c00d21c:	2023883a 	mov	r17,r4
 c00d220:	103f1626 	beq	r2,zero,c00ce7c <__alt_data_end+0xfc00ce7c>
 c00d224:	00bfe034 	movhi	r2,65408
 c00d228:	10bfffc4 	addi	r2,r2,-1
 c00d22c:	5021883a 	mov	r16,r10
 c00d230:	1886703a 	and	r3,r3,r2
 c00d234:	003eaf06 	br	c00ccf4 <__alt_data_end+0xfc00ccf4>
 c00d238:	3825883a 	mov	r18,r7
 c00d23c:	003f0f06 	br	c00ce7c <__alt_data_end+0xfc00ce7c>
 c00d240:	1c44b03a 	or	r2,r3,r17
 c00d244:	8000251e 	bne	r16,zero,c00d2dc <__subdf3+0x66c>
 c00d248:	1000661e 	bne	r2,zero,c00d3e4 <__subdf3+0x774>
 c00d24c:	2990b03a 	or	r8,r5,r6
 c00d250:	40009626 	beq	r8,zero,c00d4ac <__subdf3+0x83c>
 c00d254:	2807883a 	mov	r3,r5
 c00d258:	3023883a 	mov	r17,r6
 c00d25c:	3825883a 	mov	r18,r7
 c00d260:	003ea406 	br	c00ccf4 <__alt_data_end+0xfc00ccf4>
 c00d264:	127ff804 	addi	r9,r2,-32
 c00d268:	01000804 	movi	r4,32
 c00d26c:	2a52d83a 	srl	r9,r5,r9
 c00d270:	11008c26 	beq	r2,r4,c00d4a4 <__subdf3+0x834>
 c00d274:	01001004 	movi	r4,64
 c00d278:	2085c83a 	sub	r2,r4,r2
 c00d27c:	2884983a 	sll	r2,r5,r2
 c00d280:	118cb03a 	or	r6,r2,r6
 c00d284:	300cc03a 	cmpne	r6,r6,zero
 c00d288:	4992b03a 	or	r9,r9,r6
 c00d28c:	0005883a 	mov	r2,zero
 c00d290:	003f1206 	br	c00cedc <__alt_data_end+0xfc00cedc>
 c00d294:	0101ffc4 	movi	r4,2047
 c00d298:	493f9c1e 	bne	r9,r4,c00d10c <__alt_data_end+0xfc00d10c>
 c00d29c:	2807883a 	mov	r3,r5
 c00d2a0:	3023883a 	mov	r17,r6
 c00d2a4:	4821883a 	mov	r16,r9
 c00d2a8:	3825883a 	mov	r18,r7
 c00d2ac:	003e9106 	br	c00ccf4 <__alt_data_end+0xfc00ccf4>
 c00d2b0:	80001f1e 	bne	r16,zero,c00d330 <__subdf3+0x6c0>
 c00d2b4:	1c48b03a 	or	r4,r3,r17
 c00d2b8:	20005a26 	beq	r4,zero,c00d424 <__subdf3+0x7b4>
 c00d2bc:	0084303a 	nor	r2,zero,r2
 c00d2c0:	1000561e 	bne	r2,zero,c00d41c <__subdf3+0x7ac>
 c00d2c4:	89a3883a 	add	r17,r17,r6
 c00d2c8:	1945883a 	add	r2,r3,r5
 c00d2cc:	898d803a 	cmpltu	r6,r17,r6
 c00d2d0:	3087883a 	add	r3,r6,r2
 c00d2d4:	4821883a 	mov	r16,r9
 c00d2d8:	003f0506 	br	c00cef0 <__alt_data_end+0xfc00cef0>
 c00d2dc:	10002b1e 	bne	r2,zero,c00d38c <__subdf3+0x71c>
 c00d2e0:	2984b03a 	or	r2,r5,r6
 c00d2e4:	10008026 	beq	r2,zero,c00d4e8 <__subdf3+0x878>
 c00d2e8:	2807883a 	mov	r3,r5
 c00d2ec:	3023883a 	mov	r17,r6
 c00d2f0:	3825883a 	mov	r18,r7
 c00d2f4:	0401ffc4 	movi	r16,2047
 c00d2f8:	003e7e06 	br	c00ccf4 <__alt_data_end+0xfc00ccf4>
 c00d2fc:	3809883a 	mov	r4,r7
 c00d300:	0011883a 	mov	r8,zero
 c00d304:	0005883a 	mov	r2,zero
 c00d308:	003ee306 	br	c00ce98 <__alt_data_end+0xfc00ce98>
 c00d30c:	1c62b03a 	or	r17,r3,r17
 c00d310:	8822c03a 	cmpne	r17,r17,zero
 c00d314:	0005883a 	mov	r2,zero
 c00d318:	003f8906 	br	c00d140 <__alt_data_end+0xfc00d140>
 c00d31c:	3809883a 	mov	r4,r7
 c00d320:	4821883a 	mov	r16,r9
 c00d324:	0011883a 	mov	r8,zero
 c00d328:	0005883a 	mov	r2,zero
 c00d32c:	003eda06 	br	c00ce98 <__alt_data_end+0xfc00ce98>
 c00d330:	0101ffc4 	movi	r4,2047
 c00d334:	49003b26 	beq	r9,r4,c00d424 <__subdf3+0x7b4>
 c00d338:	0085c83a 	sub	r2,zero,r2
 c00d33c:	18c02034 	orhi	r3,r3,128
 c00d340:	01000e04 	movi	r4,56
 c00d344:	20806e16 	blt	r4,r2,c00d500 <__subdf3+0x890>
 c00d348:	010007c4 	movi	r4,31
 c00d34c:	20807716 	blt	r4,r2,c00d52c <__subdf3+0x8bc>
 c00d350:	01000804 	movi	r4,32
 c00d354:	2089c83a 	sub	r4,r4,r2
 c00d358:	1914983a 	sll	r10,r3,r4
 c00d35c:	8890d83a 	srl	r8,r17,r2
 c00d360:	8908983a 	sll	r4,r17,r4
 c00d364:	1884d83a 	srl	r2,r3,r2
 c00d368:	5222b03a 	or	r17,r10,r8
 c00d36c:	2006c03a 	cmpne	r3,r4,zero
 c00d370:	88e2b03a 	or	r17,r17,r3
 c00d374:	89a3883a 	add	r17,r17,r6
 c00d378:	1145883a 	add	r2,r2,r5
 c00d37c:	898d803a 	cmpltu	r6,r17,r6
 c00d380:	3087883a 	add	r3,r6,r2
 c00d384:	4821883a 	mov	r16,r9
 c00d388:	003ed906 	br	c00cef0 <__alt_data_end+0xfc00cef0>
 c00d38c:	2984b03a 	or	r2,r5,r6
 c00d390:	10004226 	beq	r2,zero,c00d49c <__subdf3+0x82c>
 c00d394:	1808d0fa 	srli	r4,r3,3
 c00d398:	8822d0fa 	srli	r17,r17,3
 c00d39c:	1806977a 	slli	r3,r3,29
 c00d3a0:	2080022c 	andhi	r2,r4,8
 c00d3a4:	1c62b03a 	or	r17,r3,r17
 c00d3a8:	10000826 	beq	r2,zero,c00d3cc <__subdf3+0x75c>
 c00d3ac:	2812d0fa 	srli	r9,r5,3
 c00d3b0:	4880022c 	andhi	r2,r9,8
 c00d3b4:	1000051e 	bne	r2,zero,c00d3cc <__subdf3+0x75c>
 c00d3b8:	300cd0fa 	srli	r6,r6,3
 c00d3bc:	2804977a 	slli	r2,r5,29
 c00d3c0:	4809883a 	mov	r4,r9
 c00d3c4:	3825883a 	mov	r18,r7
 c00d3c8:	11a2b03a 	or	r17,r2,r6
 c00d3cc:	8806d77a 	srli	r3,r17,29
 c00d3d0:	200890fa 	slli	r4,r4,3
 c00d3d4:	882290fa 	slli	r17,r17,3
 c00d3d8:	0401ffc4 	movi	r16,2047
 c00d3dc:	1906b03a 	or	r3,r3,r4
 c00d3e0:	003e4406 	br	c00ccf4 <__alt_data_end+0xfc00ccf4>
 c00d3e4:	2984b03a 	or	r2,r5,r6
 c00d3e8:	103e4226 	beq	r2,zero,c00ccf4 <__alt_data_end+0xfc00ccf4>
 c00d3ec:	8989c83a 	sub	r4,r17,r6
 c00d3f0:	8911803a 	cmpltu	r8,r17,r4
 c00d3f4:	1945c83a 	sub	r2,r3,r5
 c00d3f8:	1205c83a 	sub	r2,r2,r8
 c00d3fc:	1200202c 	andhi	r8,r2,128
 c00d400:	403e9a26 	beq	r8,zero,c00ce6c <__alt_data_end+0xfc00ce6c>
 c00d404:	3463c83a 	sub	r17,r6,r17
 c00d408:	28c5c83a 	sub	r2,r5,r3
 c00d40c:	344d803a 	cmpltu	r6,r6,r17
 c00d410:	1187c83a 	sub	r3,r2,r6
 c00d414:	3825883a 	mov	r18,r7
 c00d418:	003e3606 	br	c00ccf4 <__alt_data_end+0xfc00ccf4>
 c00d41c:	0101ffc4 	movi	r4,2047
 c00d420:	493fc71e 	bne	r9,r4,c00d340 <__alt_data_end+0xfc00d340>
 c00d424:	2807883a 	mov	r3,r5
 c00d428:	3023883a 	mov	r17,r6
 c00d42c:	4821883a 	mov	r16,r9
 c00d430:	003e3006 	br	c00ccf4 <__alt_data_end+0xfc00ccf4>
 c00d434:	10003626 	beq	r2,zero,c00d510 <__subdf3+0x8a0>
 c00d438:	2984b03a 	or	r2,r5,r6
 c00d43c:	10001726 	beq	r2,zero,c00d49c <__subdf3+0x82c>
 c00d440:	1808d0fa 	srli	r4,r3,3
 c00d444:	8822d0fa 	srli	r17,r17,3
 c00d448:	1806977a 	slli	r3,r3,29
 c00d44c:	2080022c 	andhi	r2,r4,8
 c00d450:	1c62b03a 	or	r17,r3,r17
 c00d454:	10000726 	beq	r2,zero,c00d474 <__subdf3+0x804>
 c00d458:	2812d0fa 	srli	r9,r5,3
 c00d45c:	4880022c 	andhi	r2,r9,8
 c00d460:	1000041e 	bne	r2,zero,c00d474 <__subdf3+0x804>
 c00d464:	300cd0fa 	srli	r6,r6,3
 c00d468:	2804977a 	slli	r2,r5,29
 c00d46c:	4809883a 	mov	r4,r9
 c00d470:	11a2b03a 	or	r17,r2,r6
 c00d474:	8806d77a 	srli	r3,r17,29
 c00d478:	200890fa 	slli	r4,r4,3
 c00d47c:	882290fa 	slli	r17,r17,3
 c00d480:	3825883a 	mov	r18,r7
 c00d484:	1906b03a 	or	r3,r3,r4
 c00d488:	0401ffc4 	movi	r16,2047
 c00d48c:	003e1906 	br	c00ccf4 <__alt_data_end+0xfc00ccf4>
 c00d490:	000b883a 	mov	r5,zero
 c00d494:	0005883a 	mov	r2,zero
 c00d498:	003e2e06 	br	c00cd54 <__alt_data_end+0xfc00cd54>
 c00d49c:	0401ffc4 	movi	r16,2047
 c00d4a0:	003e1406 	br	c00ccf4 <__alt_data_end+0xfc00ccf4>
 c00d4a4:	0005883a 	mov	r2,zero
 c00d4a8:	003f7506 	br	c00d280 <__alt_data_end+0xfc00d280>
 c00d4ac:	0005883a 	mov	r2,zero
 c00d4b0:	0009883a 	mov	r4,zero
 c00d4b4:	003e7806 	br	c00ce98 <__alt_data_end+0xfc00ce98>
 c00d4b8:	123ff804 	addi	r8,r2,-32
 c00d4bc:	01000804 	movi	r4,32
 c00d4c0:	1a10d83a 	srl	r8,r3,r8
 c00d4c4:	11002526 	beq	r2,r4,c00d55c <__subdf3+0x8ec>
 c00d4c8:	01001004 	movi	r4,64
 c00d4cc:	2085c83a 	sub	r2,r4,r2
 c00d4d0:	1884983a 	sll	r2,r3,r2
 c00d4d4:	1444b03a 	or	r2,r2,r17
 c00d4d8:	1004c03a 	cmpne	r2,r2,zero
 c00d4dc:	40a2b03a 	or	r17,r8,r2
 c00d4e0:	0005883a 	mov	r2,zero
 c00d4e4:	003f1606 	br	c00d140 <__alt_data_end+0xfc00d140>
 c00d4e8:	02000434 	movhi	r8,16
 c00d4ec:	0009883a 	mov	r4,zero
 c00d4f0:	423fffc4 	addi	r8,r8,-1
 c00d4f4:	00bfffc4 	movi	r2,-1
 c00d4f8:	0401ffc4 	movi	r16,2047
 c00d4fc:	003e6606 	br	c00ce98 <__alt_data_end+0xfc00ce98>
 c00d500:	1c62b03a 	or	r17,r3,r17
 c00d504:	8822c03a 	cmpne	r17,r17,zero
 c00d508:	0005883a 	mov	r2,zero
 c00d50c:	003f9906 	br	c00d374 <__alt_data_end+0xfc00d374>
 c00d510:	2807883a 	mov	r3,r5
 c00d514:	3023883a 	mov	r17,r6
 c00d518:	0401ffc4 	movi	r16,2047
 c00d51c:	003df506 	br	c00ccf4 <__alt_data_end+0xfc00ccf4>
 c00d520:	2807883a 	mov	r3,r5
 c00d524:	3023883a 	mov	r17,r6
 c00d528:	003df206 	br	c00ccf4 <__alt_data_end+0xfc00ccf4>
 c00d52c:	123ff804 	addi	r8,r2,-32
 c00d530:	01000804 	movi	r4,32
 c00d534:	1a10d83a 	srl	r8,r3,r8
 c00d538:	11000a26 	beq	r2,r4,c00d564 <__subdf3+0x8f4>
 c00d53c:	01001004 	movi	r4,64
 c00d540:	2085c83a 	sub	r2,r4,r2
 c00d544:	1884983a 	sll	r2,r3,r2
 c00d548:	1444b03a 	or	r2,r2,r17
 c00d54c:	1004c03a 	cmpne	r2,r2,zero
 c00d550:	40a2b03a 	or	r17,r8,r2
 c00d554:	0005883a 	mov	r2,zero
 c00d558:	003f8606 	br	c00d374 <__alt_data_end+0xfc00d374>
 c00d55c:	0005883a 	mov	r2,zero
 c00d560:	003fdc06 	br	c00d4d4 <__alt_data_end+0xfc00d4d4>
 c00d564:	0005883a 	mov	r2,zero
 c00d568:	003ff706 	br	c00d548 <__alt_data_end+0xfc00d548>

0c00d56c <__fixdfsi>:
 c00d56c:	280cd53a 	srli	r6,r5,20
 c00d570:	00c00434 	movhi	r3,16
 c00d574:	18ffffc4 	addi	r3,r3,-1
 c00d578:	3181ffcc 	andi	r6,r6,2047
 c00d57c:	01c0ff84 	movi	r7,1022
 c00d580:	28c6703a 	and	r3,r5,r3
 c00d584:	280ad7fa 	srli	r5,r5,31
 c00d588:	3980120e 	bge	r7,r6,c00d5d4 <__fixdfsi+0x68>
 c00d58c:	00810744 	movi	r2,1053
 c00d590:	11800c16 	blt	r2,r6,c00d5c4 <__fixdfsi+0x58>
 c00d594:	00810cc4 	movi	r2,1075
 c00d598:	1185c83a 	sub	r2,r2,r6
 c00d59c:	01c007c4 	movi	r7,31
 c00d5a0:	18c00434 	orhi	r3,r3,16
 c00d5a4:	38800d16 	blt	r7,r2,c00d5dc <__fixdfsi+0x70>
 c00d5a8:	31befb44 	addi	r6,r6,-1043
 c00d5ac:	2084d83a 	srl	r2,r4,r2
 c00d5b0:	1986983a 	sll	r3,r3,r6
 c00d5b4:	1884b03a 	or	r2,r3,r2
 c00d5b8:	28000726 	beq	r5,zero,c00d5d8 <__fixdfsi+0x6c>
 c00d5bc:	0085c83a 	sub	r2,zero,r2
 c00d5c0:	f800283a 	ret
 c00d5c4:	00a00034 	movhi	r2,32768
 c00d5c8:	10bfffc4 	addi	r2,r2,-1
 c00d5cc:	2885883a 	add	r2,r5,r2
 c00d5d0:	f800283a 	ret
 c00d5d4:	0005883a 	mov	r2,zero
 c00d5d8:	f800283a 	ret
 c00d5dc:	008104c4 	movi	r2,1043
 c00d5e0:	1185c83a 	sub	r2,r2,r6
 c00d5e4:	1884d83a 	srl	r2,r3,r2
 c00d5e8:	003ff306 	br	c00d5b8 <__alt_data_end+0xfc00d5b8>

0c00d5ec <__floatsidf>:
 c00d5ec:	defffd04 	addi	sp,sp,-12
 c00d5f0:	dfc00215 	stw	ra,8(sp)
 c00d5f4:	dc400115 	stw	r17,4(sp)
 c00d5f8:	dc000015 	stw	r16,0(sp)
 c00d5fc:	20002b26 	beq	r4,zero,c00d6ac <__floatsidf+0xc0>
 c00d600:	2023883a 	mov	r17,r4
 c00d604:	2020d7fa 	srli	r16,r4,31
 c00d608:	20002d16 	blt	r4,zero,c00d6c0 <__floatsidf+0xd4>
 c00d60c:	8809883a 	mov	r4,r17
 c00d610:	c00d7700 	call	c00d770 <__clzsi2>
 c00d614:	01410784 	movi	r5,1054
 c00d618:	288bc83a 	sub	r5,r5,r2
 c00d61c:	01010cc4 	movi	r4,1075
 c00d620:	2149c83a 	sub	r4,r4,r5
 c00d624:	00c007c4 	movi	r3,31
 c00d628:	1900160e 	bge	r3,r4,c00d684 <__floatsidf+0x98>
 c00d62c:	00c104c4 	movi	r3,1043
 c00d630:	1947c83a 	sub	r3,r3,r5
 c00d634:	88c6983a 	sll	r3,r17,r3
 c00d638:	00800434 	movhi	r2,16
 c00d63c:	10bfffc4 	addi	r2,r2,-1
 c00d640:	1886703a 	and	r3,r3,r2
 c00d644:	2941ffcc 	andi	r5,r5,2047
 c00d648:	800d883a 	mov	r6,r16
 c00d64c:	0005883a 	mov	r2,zero
 c00d650:	280a953a 	slli	r5,r5,20
 c00d654:	31803fcc 	andi	r6,r6,255
 c00d658:	01000434 	movhi	r4,16
 c00d65c:	300c97fa 	slli	r6,r6,31
 c00d660:	213fffc4 	addi	r4,r4,-1
 c00d664:	1906703a 	and	r3,r3,r4
 c00d668:	1946b03a 	or	r3,r3,r5
 c00d66c:	1986b03a 	or	r3,r3,r6
 c00d670:	dfc00217 	ldw	ra,8(sp)
 c00d674:	dc400117 	ldw	r17,4(sp)
 c00d678:	dc000017 	ldw	r16,0(sp)
 c00d67c:	dec00304 	addi	sp,sp,12
 c00d680:	f800283a 	ret
 c00d684:	00c002c4 	movi	r3,11
 c00d688:	1887c83a 	sub	r3,r3,r2
 c00d68c:	88c6d83a 	srl	r3,r17,r3
 c00d690:	8904983a 	sll	r2,r17,r4
 c00d694:	01000434 	movhi	r4,16
 c00d698:	213fffc4 	addi	r4,r4,-1
 c00d69c:	2941ffcc 	andi	r5,r5,2047
 c00d6a0:	1906703a 	and	r3,r3,r4
 c00d6a4:	800d883a 	mov	r6,r16
 c00d6a8:	003fe906 	br	c00d650 <__alt_data_end+0xfc00d650>
 c00d6ac:	000d883a 	mov	r6,zero
 c00d6b0:	000b883a 	mov	r5,zero
 c00d6b4:	0007883a 	mov	r3,zero
 c00d6b8:	0005883a 	mov	r2,zero
 c00d6bc:	003fe406 	br	c00d650 <__alt_data_end+0xfc00d650>
 c00d6c0:	0123c83a 	sub	r17,zero,r4
 c00d6c4:	003fd106 	br	c00d60c <__alt_data_end+0xfc00d60c>

0c00d6c8 <__floatunsidf>:
 c00d6c8:	defffe04 	addi	sp,sp,-8
 c00d6cc:	dc000015 	stw	r16,0(sp)
 c00d6d0:	dfc00115 	stw	ra,4(sp)
 c00d6d4:	2021883a 	mov	r16,r4
 c00d6d8:	20002226 	beq	r4,zero,c00d764 <__floatunsidf+0x9c>
 c00d6dc:	c00d7700 	call	c00d770 <__clzsi2>
 c00d6e0:	01010784 	movi	r4,1054
 c00d6e4:	2089c83a 	sub	r4,r4,r2
 c00d6e8:	01810cc4 	movi	r6,1075
 c00d6ec:	310dc83a 	sub	r6,r6,r4
 c00d6f0:	00c007c4 	movi	r3,31
 c00d6f4:	1980120e 	bge	r3,r6,c00d740 <__floatunsidf+0x78>
 c00d6f8:	00c104c4 	movi	r3,1043
 c00d6fc:	1907c83a 	sub	r3,r3,r4
 c00d700:	80ca983a 	sll	r5,r16,r3
 c00d704:	00800434 	movhi	r2,16
 c00d708:	10bfffc4 	addi	r2,r2,-1
 c00d70c:	2101ffcc 	andi	r4,r4,2047
 c00d710:	0021883a 	mov	r16,zero
 c00d714:	288a703a 	and	r5,r5,r2
 c00d718:	2008953a 	slli	r4,r4,20
 c00d71c:	00c00434 	movhi	r3,16
 c00d720:	18ffffc4 	addi	r3,r3,-1
 c00d724:	28c6703a 	and	r3,r5,r3
 c00d728:	8005883a 	mov	r2,r16
 c00d72c:	1906b03a 	or	r3,r3,r4
 c00d730:	dfc00117 	ldw	ra,4(sp)
 c00d734:	dc000017 	ldw	r16,0(sp)
 c00d738:	dec00204 	addi	sp,sp,8
 c00d73c:	f800283a 	ret
 c00d740:	00c002c4 	movi	r3,11
 c00d744:	188bc83a 	sub	r5,r3,r2
 c00d748:	814ad83a 	srl	r5,r16,r5
 c00d74c:	00c00434 	movhi	r3,16
 c00d750:	18ffffc4 	addi	r3,r3,-1
 c00d754:	81a0983a 	sll	r16,r16,r6
 c00d758:	2101ffcc 	andi	r4,r4,2047
 c00d75c:	28ca703a 	and	r5,r5,r3
 c00d760:	003fed06 	br	c00d718 <__alt_data_end+0xfc00d718>
 c00d764:	0009883a 	mov	r4,zero
 c00d768:	000b883a 	mov	r5,zero
 c00d76c:	003fea06 	br	c00d718 <__alt_data_end+0xfc00d718>

0c00d770 <__clzsi2>:
 c00d770:	00bfffd4 	movui	r2,65535
 c00d774:	11000536 	bltu	r2,r4,c00d78c <__clzsi2+0x1c>
 c00d778:	00803fc4 	movi	r2,255
 c00d77c:	11000f36 	bltu	r2,r4,c00d7bc <__clzsi2+0x4c>
 c00d780:	00800804 	movi	r2,32
 c00d784:	0007883a 	mov	r3,zero
 c00d788:	00000506 	br	c00d7a0 <__clzsi2+0x30>
 c00d78c:	00804034 	movhi	r2,256
 c00d790:	10bfffc4 	addi	r2,r2,-1
 c00d794:	11000c2e 	bgeu	r2,r4,c00d7c8 <__clzsi2+0x58>
 c00d798:	00800204 	movi	r2,8
 c00d79c:	00c00604 	movi	r3,24
 c00d7a0:	20c8d83a 	srl	r4,r4,r3
 c00d7a4:	00c30074 	movhi	r3,3073
 c00d7a8:	18c0f904 	addi	r3,r3,996
 c00d7ac:	1909883a 	add	r4,r3,r4
 c00d7b0:	20c00003 	ldbu	r3,0(r4)
 c00d7b4:	10c5c83a 	sub	r2,r2,r3
 c00d7b8:	f800283a 	ret
 c00d7bc:	00800604 	movi	r2,24
 c00d7c0:	00c00204 	movi	r3,8
 c00d7c4:	003ff606 	br	c00d7a0 <__alt_data_end+0xfc00d7a0>
 c00d7c8:	00800404 	movi	r2,16
 c00d7cc:	1007883a 	mov	r3,r2
 c00d7d0:	003ff306 	br	c00d7a0 <__alt_data_end+0xfc00d7a0>

0c00d7d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c00d7d4:	defffe04 	addi	sp,sp,-8
 c00d7d8:	dfc00115 	stw	ra,4(sp)
 c00d7dc:	df000015 	stw	fp,0(sp)
 c00d7e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c00d7e4:	d0a00d17 	ldw	r2,-32716(gp)
 c00d7e8:	10000326 	beq	r2,zero,c00d7f8 <alt_get_errno+0x24>
 c00d7ec:	d0a00d17 	ldw	r2,-32716(gp)
 c00d7f0:	103ee83a 	callr	r2
 c00d7f4:	00000106 	br	c00d7fc <alt_get_errno+0x28>
 c00d7f8:	d0a6d504 	addi	r2,gp,-25772
}
 c00d7fc:	e037883a 	mov	sp,fp
 c00d800:	dfc00117 	ldw	ra,4(sp)
 c00d804:	df000017 	ldw	fp,0(sp)
 c00d808:	dec00204 	addi	sp,sp,8
 c00d80c:	f800283a 	ret

0c00d810 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 c00d810:	defffb04 	addi	sp,sp,-20
 c00d814:	dfc00415 	stw	ra,16(sp)
 c00d818:	df000315 	stw	fp,12(sp)
 c00d81c:	df000304 	addi	fp,sp,12
 c00d820:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 c00d824:	e0bfff17 	ldw	r2,-4(fp)
 c00d828:	10000816 	blt	r2,zero,c00d84c <close+0x3c>
 c00d82c:	01400304 	movi	r5,12
 c00d830:	e13fff17 	ldw	r4,-4(fp)
 c00d834:	c0009680 	call	c000968 <__mulsi3>
 c00d838:	1007883a 	mov	r3,r2
 c00d83c:	00830074 	movhi	r2,3073
 c00d840:	10837904 	addi	r2,r2,3556
 c00d844:	1885883a 	add	r2,r3,r2
 c00d848:	00000106 	br	c00d850 <close+0x40>
 c00d84c:	0005883a 	mov	r2,zero
 c00d850:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 c00d854:	e0bffd17 	ldw	r2,-12(fp)
 c00d858:	10001926 	beq	r2,zero,c00d8c0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 c00d85c:	e0bffd17 	ldw	r2,-12(fp)
 c00d860:	10800017 	ldw	r2,0(r2)
 c00d864:	10800417 	ldw	r2,16(r2)
 c00d868:	10000626 	beq	r2,zero,c00d884 <close+0x74>
 c00d86c:	e0bffd17 	ldw	r2,-12(fp)
 c00d870:	10800017 	ldw	r2,0(r2)
 c00d874:	10800417 	ldw	r2,16(r2)
 c00d878:	e13ffd17 	ldw	r4,-12(fp)
 c00d87c:	103ee83a 	callr	r2
 c00d880:	00000106 	br	c00d888 <close+0x78>
 c00d884:	0005883a 	mov	r2,zero
 c00d888:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 c00d88c:	e13fff17 	ldw	r4,-4(fp)
 c00d890:	c00def80 	call	c00def8 <alt_release_fd>
    if (rval < 0)
 c00d894:	e0bffe17 	ldw	r2,-8(fp)
 c00d898:	1000070e 	bge	r2,zero,c00d8b8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 c00d89c:	c00d7d40 	call	c00d7d4 <alt_get_errno>
 c00d8a0:	1007883a 	mov	r3,r2
 c00d8a4:	e0bffe17 	ldw	r2,-8(fp)
 c00d8a8:	0085c83a 	sub	r2,zero,r2
 c00d8ac:	18800015 	stw	r2,0(r3)
      return -1;
 c00d8b0:	00bfffc4 	movi	r2,-1
 c00d8b4:	00000706 	br	c00d8d4 <close+0xc4>
    }
    return 0;
 c00d8b8:	0005883a 	mov	r2,zero
 c00d8bc:	00000506 	br	c00d8d4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c00d8c0:	c00d7d40 	call	c00d7d4 <alt_get_errno>
 c00d8c4:	1007883a 	mov	r3,r2
 c00d8c8:	00801444 	movi	r2,81
 c00d8cc:	18800015 	stw	r2,0(r3)
    return -1;
 c00d8d0:	00bfffc4 	movi	r2,-1
  }
}
 c00d8d4:	e037883a 	mov	sp,fp
 c00d8d8:	dfc00117 	ldw	ra,4(sp)
 c00d8dc:	df000017 	ldw	fp,0(sp)
 c00d8e0:	dec00204 	addi	sp,sp,8
 c00d8e4:	f800283a 	ret

0c00d8e8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 c00d8e8:	defffc04 	addi	sp,sp,-16
 c00d8ec:	df000315 	stw	fp,12(sp)
 c00d8f0:	df000304 	addi	fp,sp,12
 c00d8f4:	e13ffd15 	stw	r4,-12(fp)
 c00d8f8:	e17ffe15 	stw	r5,-8(fp)
 c00d8fc:	e1bfff15 	stw	r6,-4(fp)
  return len;
 c00d900:	e0bfff17 	ldw	r2,-4(fp)
}
 c00d904:	e037883a 	mov	sp,fp
 c00d908:	df000017 	ldw	fp,0(sp)
 c00d90c:	dec00104 	addi	sp,sp,4
 c00d910:	f800283a 	ret

0c00d914 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c00d914:	defffe04 	addi	sp,sp,-8
 c00d918:	dfc00115 	stw	ra,4(sp)
 c00d91c:	df000015 	stw	fp,0(sp)
 c00d920:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c00d924:	d0a00d17 	ldw	r2,-32716(gp)
 c00d928:	10000326 	beq	r2,zero,c00d938 <alt_get_errno+0x24>
 c00d92c:	d0a00d17 	ldw	r2,-32716(gp)
 c00d930:	103ee83a 	callr	r2
 c00d934:	00000106 	br	c00d93c <alt_get_errno+0x28>
 c00d938:	d0a6d504 	addi	r2,gp,-25772
}
 c00d93c:	e037883a 	mov	sp,fp
 c00d940:	dfc00117 	ldw	ra,4(sp)
 c00d944:	df000017 	ldw	fp,0(sp)
 c00d948:	dec00204 	addi	sp,sp,8
 c00d94c:	f800283a 	ret

0c00d950 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 c00d950:	defffb04 	addi	sp,sp,-20
 c00d954:	dfc00415 	stw	ra,16(sp)
 c00d958:	df000315 	stw	fp,12(sp)
 c00d95c:	df000304 	addi	fp,sp,12
 c00d960:	e13ffe15 	stw	r4,-8(fp)
 c00d964:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c00d968:	e0bffe17 	ldw	r2,-8(fp)
 c00d96c:	10000816 	blt	r2,zero,c00d990 <fstat+0x40>
 c00d970:	01400304 	movi	r5,12
 c00d974:	e13ffe17 	ldw	r4,-8(fp)
 c00d978:	c0009680 	call	c000968 <__mulsi3>
 c00d97c:	1007883a 	mov	r3,r2
 c00d980:	00830074 	movhi	r2,3073
 c00d984:	10837904 	addi	r2,r2,3556
 c00d988:	1885883a 	add	r2,r3,r2
 c00d98c:	00000106 	br	c00d994 <fstat+0x44>
 c00d990:	0005883a 	mov	r2,zero
 c00d994:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 c00d998:	e0bffd17 	ldw	r2,-12(fp)
 c00d99c:	10001026 	beq	r2,zero,c00d9e0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 c00d9a0:	e0bffd17 	ldw	r2,-12(fp)
 c00d9a4:	10800017 	ldw	r2,0(r2)
 c00d9a8:	10800817 	ldw	r2,32(r2)
 c00d9ac:	10000726 	beq	r2,zero,c00d9cc <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 c00d9b0:	e0bffd17 	ldw	r2,-12(fp)
 c00d9b4:	10800017 	ldw	r2,0(r2)
 c00d9b8:	10800817 	ldw	r2,32(r2)
 c00d9bc:	e17fff17 	ldw	r5,-4(fp)
 c00d9c0:	e13ffd17 	ldw	r4,-12(fp)
 c00d9c4:	103ee83a 	callr	r2
 c00d9c8:	00000a06 	br	c00d9f4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 c00d9cc:	e0bfff17 	ldw	r2,-4(fp)
 c00d9d0:	00c80004 	movi	r3,8192
 c00d9d4:	10c00115 	stw	r3,4(r2)
      return 0;
 c00d9d8:	0005883a 	mov	r2,zero
 c00d9dc:	00000506 	br	c00d9f4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c00d9e0:	c00d9140 	call	c00d914 <alt_get_errno>
 c00d9e4:	1007883a 	mov	r3,r2
 c00d9e8:	00801444 	movi	r2,81
 c00d9ec:	18800015 	stw	r2,0(r3)
    return -1;
 c00d9f0:	00bfffc4 	movi	r2,-1
  }
}
 c00d9f4:	e037883a 	mov	sp,fp
 c00d9f8:	dfc00117 	ldw	ra,4(sp)
 c00d9fc:	df000017 	ldw	fp,0(sp)
 c00da00:	dec00204 	addi	sp,sp,8
 c00da04:	f800283a 	ret

0c00da08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c00da08:	defffe04 	addi	sp,sp,-8
 c00da0c:	dfc00115 	stw	ra,4(sp)
 c00da10:	df000015 	stw	fp,0(sp)
 c00da14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c00da18:	d0a00d17 	ldw	r2,-32716(gp)
 c00da1c:	10000326 	beq	r2,zero,c00da2c <alt_get_errno+0x24>
 c00da20:	d0a00d17 	ldw	r2,-32716(gp)
 c00da24:	103ee83a 	callr	r2
 c00da28:	00000106 	br	c00da30 <alt_get_errno+0x28>
 c00da2c:	d0a6d504 	addi	r2,gp,-25772
}
 c00da30:	e037883a 	mov	sp,fp
 c00da34:	dfc00117 	ldw	ra,4(sp)
 c00da38:	df000017 	ldw	fp,0(sp)
 c00da3c:	dec00204 	addi	sp,sp,8
 c00da40:	f800283a 	ret

0c00da44 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 c00da44:	deffed04 	addi	sp,sp,-76
 c00da48:	dfc01215 	stw	ra,72(sp)
 c00da4c:	df001115 	stw	fp,68(sp)
 c00da50:	df001104 	addi	fp,sp,68
 c00da54:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c00da58:	e0bfff17 	ldw	r2,-4(fp)
 c00da5c:	10000816 	blt	r2,zero,c00da80 <isatty+0x3c>
 c00da60:	01400304 	movi	r5,12
 c00da64:	e13fff17 	ldw	r4,-4(fp)
 c00da68:	c0009680 	call	c000968 <__mulsi3>
 c00da6c:	1007883a 	mov	r3,r2
 c00da70:	00830074 	movhi	r2,3073
 c00da74:	10837904 	addi	r2,r2,3556
 c00da78:	1885883a 	add	r2,r3,r2
 c00da7c:	00000106 	br	c00da84 <isatty+0x40>
 c00da80:	0005883a 	mov	r2,zero
 c00da84:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 c00da88:	e0bfef17 	ldw	r2,-68(fp)
 c00da8c:	10000e26 	beq	r2,zero,c00dac8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 c00da90:	e0bfef17 	ldw	r2,-68(fp)
 c00da94:	10800017 	ldw	r2,0(r2)
 c00da98:	10800817 	ldw	r2,32(r2)
 c00da9c:	1000021e 	bne	r2,zero,c00daa8 <isatty+0x64>
    {
      return 1;
 c00daa0:	00800044 	movi	r2,1
 c00daa4:	00000d06 	br	c00dadc <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 c00daa8:	e0bff004 	addi	r2,fp,-64
 c00daac:	100b883a 	mov	r5,r2
 c00dab0:	e13fff17 	ldw	r4,-4(fp)
 c00dab4:	c00d9500 	call	c00d950 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 c00dab8:	e0bff117 	ldw	r2,-60(fp)
 c00dabc:	10880020 	cmpeqi	r2,r2,8192
 c00dac0:	10803fcc 	andi	r2,r2,255
 c00dac4:	00000506 	br	c00dadc <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c00dac8:	c00da080 	call	c00da08 <alt_get_errno>
 c00dacc:	1007883a 	mov	r3,r2
 c00dad0:	00801444 	movi	r2,81
 c00dad4:	18800015 	stw	r2,0(r3)
    return 0;
 c00dad8:	0005883a 	mov	r2,zero
  }
}
 c00dadc:	e037883a 	mov	sp,fp
 c00dae0:	dfc00117 	ldw	ra,4(sp)
 c00dae4:	df000017 	ldw	fp,0(sp)
 c00dae8:	dec00204 	addi	sp,sp,8
 c00daec:	f800283a 	ret

0c00daf0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 c00daf0:	defffc04 	addi	sp,sp,-16
 c00daf4:	df000315 	stw	fp,12(sp)
 c00daf8:	df000304 	addi	fp,sp,12
 c00dafc:	e13ffd15 	stw	r4,-12(fp)
 c00db00:	e17ffe15 	stw	r5,-8(fp)
 c00db04:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 c00db08:	e0fffe17 	ldw	r3,-8(fp)
 c00db0c:	e0bffd17 	ldw	r2,-12(fp)
 c00db10:	18800c26 	beq	r3,r2,c00db44 <alt_load_section+0x54>
  {
    while( to != end )
 c00db14:	00000806 	br	c00db38 <alt_load_section+0x48>
    {
      *to++ = *from++;
 c00db18:	e0bffe17 	ldw	r2,-8(fp)
 c00db1c:	10c00104 	addi	r3,r2,4
 c00db20:	e0fffe15 	stw	r3,-8(fp)
 c00db24:	e0fffd17 	ldw	r3,-12(fp)
 c00db28:	19000104 	addi	r4,r3,4
 c00db2c:	e13ffd15 	stw	r4,-12(fp)
 c00db30:	18c00017 	ldw	r3,0(r3)
 c00db34:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 c00db38:	e0fffe17 	ldw	r3,-8(fp)
 c00db3c:	e0bfff17 	ldw	r2,-4(fp)
 c00db40:	18bff51e 	bne	r3,r2,c00db18 <__alt_data_end+0xfc00db18>
    {
      *to++ = *from++;
    }
  }
}
 c00db44:	0001883a 	nop
 c00db48:	e037883a 	mov	sp,fp
 c00db4c:	df000017 	ldw	fp,0(sp)
 c00db50:	dec00104 	addi	sp,sp,4
 c00db54:	f800283a 	ret

0c00db58 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 c00db58:	defffe04 	addi	sp,sp,-8
 c00db5c:	dfc00115 	stw	ra,4(sp)
 c00db60:	df000015 	stw	fp,0(sp)
 c00db64:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 c00db68:	01830074 	movhi	r6,3073
 c00db6c:	31880304 	addi	r6,r6,8204
 c00db70:	01430074 	movhi	r5,3073
 c00db74:	29414604 	addi	r5,r5,1304
 c00db78:	01030074 	movhi	r4,3073
 c00db7c:	21080304 	addi	r4,r4,8204
 c00db80:	c00daf00 	call	c00daf0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 c00db84:	01830034 	movhi	r6,3072
 c00db88:	31808c04 	addi	r6,r6,560
 c00db8c:	01430034 	movhi	r5,3072
 c00db90:	29400804 	addi	r5,r5,32
 c00db94:	01030034 	movhi	r4,3072
 c00db98:	21000804 	addi	r4,r4,32
 c00db9c:	c00daf00 	call	c00daf0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 c00dba0:	01830074 	movhi	r6,3073
 c00dba4:	31814604 	addi	r6,r6,1304
 c00dba8:	01430074 	movhi	r5,3073
 c00dbac:	29404004 	addi	r5,r5,256
 c00dbb0:	01030074 	movhi	r4,3073
 c00dbb4:	21004004 	addi	r4,r4,256
 c00dbb8:	c00daf00 	call	c00daf0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 c00dbbc:	c00f0480 	call	c00f048 <alt_dcache_flush_all>
  alt_icache_flush_all();
 c00dbc0:	c00f2080 	call	c00f208 <alt_icache_flush_all>
}
 c00dbc4:	0001883a 	nop
 c00dbc8:	e037883a 	mov	sp,fp
 c00dbcc:	dfc00117 	ldw	ra,4(sp)
 c00dbd0:	df000017 	ldw	fp,0(sp)
 c00dbd4:	dec00204 	addi	sp,sp,8
 c00dbd8:	f800283a 	ret

0c00dbdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c00dbdc:	defffe04 	addi	sp,sp,-8
 c00dbe0:	dfc00115 	stw	ra,4(sp)
 c00dbe4:	df000015 	stw	fp,0(sp)
 c00dbe8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c00dbec:	d0a00d17 	ldw	r2,-32716(gp)
 c00dbf0:	10000326 	beq	r2,zero,c00dc00 <alt_get_errno+0x24>
 c00dbf4:	d0a00d17 	ldw	r2,-32716(gp)
 c00dbf8:	103ee83a 	callr	r2
 c00dbfc:	00000106 	br	c00dc04 <alt_get_errno+0x28>
 c00dc00:	d0a6d504 	addi	r2,gp,-25772
}
 c00dc04:	e037883a 	mov	sp,fp
 c00dc08:	dfc00117 	ldw	ra,4(sp)
 c00dc0c:	df000017 	ldw	fp,0(sp)
 c00dc10:	dec00204 	addi	sp,sp,8
 c00dc14:	f800283a 	ret

0c00dc18 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 c00dc18:	defff904 	addi	sp,sp,-28
 c00dc1c:	dfc00615 	stw	ra,24(sp)
 c00dc20:	df000515 	stw	fp,20(sp)
 c00dc24:	df000504 	addi	fp,sp,20
 c00dc28:	e13ffd15 	stw	r4,-12(fp)
 c00dc2c:	e17ffe15 	stw	r5,-8(fp)
 c00dc30:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 c00dc34:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c00dc38:	e0bffd17 	ldw	r2,-12(fp)
 c00dc3c:	10000816 	blt	r2,zero,c00dc60 <lseek+0x48>
 c00dc40:	01400304 	movi	r5,12
 c00dc44:	e13ffd17 	ldw	r4,-12(fp)
 c00dc48:	c0009680 	call	c000968 <__mulsi3>
 c00dc4c:	1007883a 	mov	r3,r2
 c00dc50:	00830074 	movhi	r2,3073
 c00dc54:	10837904 	addi	r2,r2,3556
 c00dc58:	1885883a 	add	r2,r3,r2
 c00dc5c:	00000106 	br	c00dc64 <lseek+0x4c>
 c00dc60:	0005883a 	mov	r2,zero
 c00dc64:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 c00dc68:	e0bffc17 	ldw	r2,-16(fp)
 c00dc6c:	10001026 	beq	r2,zero,c00dcb0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 c00dc70:	e0bffc17 	ldw	r2,-16(fp)
 c00dc74:	10800017 	ldw	r2,0(r2)
 c00dc78:	10800717 	ldw	r2,28(r2)
 c00dc7c:	10000926 	beq	r2,zero,c00dca4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 c00dc80:	e0bffc17 	ldw	r2,-16(fp)
 c00dc84:	10800017 	ldw	r2,0(r2)
 c00dc88:	10800717 	ldw	r2,28(r2)
 c00dc8c:	e1bfff17 	ldw	r6,-4(fp)
 c00dc90:	e17ffe17 	ldw	r5,-8(fp)
 c00dc94:	e13ffc17 	ldw	r4,-16(fp)
 c00dc98:	103ee83a 	callr	r2
 c00dc9c:	e0bffb15 	stw	r2,-20(fp)
 c00dca0:	00000506 	br	c00dcb8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 c00dca4:	00bfde84 	movi	r2,-134
 c00dca8:	e0bffb15 	stw	r2,-20(fp)
 c00dcac:	00000206 	br	c00dcb8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 c00dcb0:	00bfebc4 	movi	r2,-81
 c00dcb4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 c00dcb8:	e0bffb17 	ldw	r2,-20(fp)
 c00dcbc:	1000070e 	bge	r2,zero,c00dcdc <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 c00dcc0:	c00dbdc0 	call	c00dbdc <alt_get_errno>
 c00dcc4:	1007883a 	mov	r3,r2
 c00dcc8:	e0bffb17 	ldw	r2,-20(fp)
 c00dccc:	0085c83a 	sub	r2,zero,r2
 c00dcd0:	18800015 	stw	r2,0(r3)
    rc = -1;
 c00dcd4:	00bfffc4 	movi	r2,-1
 c00dcd8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 c00dcdc:	e0bffb17 	ldw	r2,-20(fp)
}
 c00dce0:	e037883a 	mov	sp,fp
 c00dce4:	dfc00117 	ldw	ra,4(sp)
 c00dce8:	df000017 	ldw	fp,0(sp)
 c00dcec:	dec00204 	addi	sp,sp,8
 c00dcf0:	f800283a 	ret

0c00dcf4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 c00dcf4:	defffd04 	addi	sp,sp,-12
 c00dcf8:	dfc00215 	stw	ra,8(sp)
 c00dcfc:	df000115 	stw	fp,4(sp)
 c00dd00:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 c00dd04:	0009883a 	mov	r4,zero
 c00dd08:	c00e1cc0 	call	c00e1cc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 c00dd0c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 c00dd10:	c00e2040 	call	c00e204 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 c00dd14:	01830074 	movhi	r6,3073
 c00dd18:	31813c04 	addi	r6,r6,1264
 c00dd1c:	01430074 	movhi	r5,3073
 c00dd20:	29413c04 	addi	r5,r5,1264
 c00dd24:	01030074 	movhi	r4,3073
 c00dd28:	21013c04 	addi	r4,r4,1264
 c00dd2c:	c00f5ac0 	call	c00f5ac <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 c00dd30:	c00f1480 	call	c00f148 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 c00dd34:	01030074 	movhi	r4,3073
 c00dd38:	213c6a04 	addi	r4,r4,-3672
 c00dd3c:	c00fd6c0 	call	c00fd6c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 c00dd40:	d0a6d617 	ldw	r2,-25768(gp)
 c00dd44:	d0e6d717 	ldw	r3,-25764(gp)
 c00dd48:	d126d817 	ldw	r4,-25760(gp)
 c00dd4c:	200d883a 	mov	r6,r4
 c00dd50:	180b883a 	mov	r5,r3
 c00dd54:	1009883a 	mov	r4,r2
 c00dd58:	c00026c0 	call	c00026c <main>
 c00dd5c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 c00dd60:	01000044 	movi	r4,1
 c00dd64:	c00d8100 	call	c00d810 <close>
  exit (result);
 c00dd68:	e13fff17 	ldw	r4,-4(fp)
 c00dd6c:	c00fd800 	call	c00fd80 <exit>

0c00dd70 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 c00dd70:	defffe04 	addi	sp,sp,-8
 c00dd74:	df000115 	stw	fp,4(sp)
 c00dd78:	df000104 	addi	fp,sp,4
 c00dd7c:	e13fff15 	stw	r4,-4(fp)
}
 c00dd80:	0001883a 	nop
 c00dd84:	e037883a 	mov	sp,fp
 c00dd88:	df000017 	ldw	fp,0(sp)
 c00dd8c:	dec00104 	addi	sp,sp,4
 c00dd90:	f800283a 	ret

0c00dd94 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 c00dd94:	defffe04 	addi	sp,sp,-8
 c00dd98:	df000115 	stw	fp,4(sp)
 c00dd9c:	df000104 	addi	fp,sp,4
 c00dda0:	e13fff15 	stw	r4,-4(fp)
}
 c00dda4:	0001883a 	nop
 c00dda8:	e037883a 	mov	sp,fp
 c00ddac:	df000017 	ldw	fp,0(sp)
 c00ddb0:	dec00104 	addi	sp,sp,4
 c00ddb4:	f800283a 	ret

0c00ddb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c00ddb8:	defffe04 	addi	sp,sp,-8
 c00ddbc:	dfc00115 	stw	ra,4(sp)
 c00ddc0:	df000015 	stw	fp,0(sp)
 c00ddc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c00ddc8:	d0a00d17 	ldw	r2,-32716(gp)
 c00ddcc:	10000326 	beq	r2,zero,c00dddc <alt_get_errno+0x24>
 c00ddd0:	d0a00d17 	ldw	r2,-32716(gp)
 c00ddd4:	103ee83a 	callr	r2
 c00ddd8:	00000106 	br	c00dde0 <alt_get_errno+0x28>
 c00dddc:	d0a6d504 	addi	r2,gp,-25772
}
 c00dde0:	e037883a 	mov	sp,fp
 c00dde4:	dfc00117 	ldw	ra,4(sp)
 c00dde8:	df000017 	ldw	fp,0(sp)
 c00ddec:	dec00204 	addi	sp,sp,8
 c00ddf0:	f800283a 	ret

0c00ddf4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 c00ddf4:	defff904 	addi	sp,sp,-28
 c00ddf8:	dfc00615 	stw	ra,24(sp)
 c00ddfc:	df000515 	stw	fp,20(sp)
 c00de00:	df000504 	addi	fp,sp,20
 c00de04:	e13ffd15 	stw	r4,-12(fp)
 c00de08:	e17ffe15 	stw	r5,-8(fp)
 c00de0c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c00de10:	e0bffd17 	ldw	r2,-12(fp)
 c00de14:	10000816 	blt	r2,zero,c00de38 <read+0x44>
 c00de18:	01400304 	movi	r5,12
 c00de1c:	e13ffd17 	ldw	r4,-12(fp)
 c00de20:	c0009680 	call	c000968 <__mulsi3>
 c00de24:	1007883a 	mov	r3,r2
 c00de28:	00830074 	movhi	r2,3073
 c00de2c:	10837904 	addi	r2,r2,3556
 c00de30:	1885883a 	add	r2,r3,r2
 c00de34:	00000106 	br	c00de3c <read+0x48>
 c00de38:	0005883a 	mov	r2,zero
 c00de3c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 c00de40:	e0bffb17 	ldw	r2,-20(fp)
 c00de44:	10002226 	beq	r2,zero,c00ded0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 c00de48:	e0bffb17 	ldw	r2,-20(fp)
 c00de4c:	10800217 	ldw	r2,8(r2)
 c00de50:	108000cc 	andi	r2,r2,3
 c00de54:	10800060 	cmpeqi	r2,r2,1
 c00de58:	1000181e 	bne	r2,zero,c00debc <read+0xc8>
        (fd->dev->read))
 c00de5c:	e0bffb17 	ldw	r2,-20(fp)
 c00de60:	10800017 	ldw	r2,0(r2)
 c00de64:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 c00de68:	10001426 	beq	r2,zero,c00debc <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 c00de6c:	e0bffb17 	ldw	r2,-20(fp)
 c00de70:	10800017 	ldw	r2,0(r2)
 c00de74:	10800517 	ldw	r2,20(r2)
 c00de78:	e0ffff17 	ldw	r3,-4(fp)
 c00de7c:	180d883a 	mov	r6,r3
 c00de80:	e17ffe17 	ldw	r5,-8(fp)
 c00de84:	e13ffb17 	ldw	r4,-20(fp)
 c00de88:	103ee83a 	callr	r2
 c00de8c:	e0bffc15 	stw	r2,-16(fp)
 c00de90:	e0bffc17 	ldw	r2,-16(fp)
 c00de94:	1000070e 	bge	r2,zero,c00deb4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 c00de98:	c00ddb80 	call	c00ddb8 <alt_get_errno>
 c00de9c:	1007883a 	mov	r3,r2
 c00dea0:	e0bffc17 	ldw	r2,-16(fp)
 c00dea4:	0085c83a 	sub	r2,zero,r2
 c00dea8:	18800015 	stw	r2,0(r3)
          return -1;
 c00deac:	00bfffc4 	movi	r2,-1
 c00deb0:	00000c06 	br	c00dee4 <read+0xf0>
        }
        return rval;
 c00deb4:	e0bffc17 	ldw	r2,-16(fp)
 c00deb8:	00000a06 	br	c00dee4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 c00debc:	c00ddb80 	call	c00ddb8 <alt_get_errno>
 c00dec0:	1007883a 	mov	r3,r2
 c00dec4:	00800344 	movi	r2,13
 c00dec8:	18800015 	stw	r2,0(r3)
 c00decc:	00000406 	br	c00dee0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 c00ded0:	c00ddb80 	call	c00ddb8 <alt_get_errno>
 c00ded4:	1007883a 	mov	r3,r2
 c00ded8:	00801444 	movi	r2,81
 c00dedc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 c00dee0:	00bfffc4 	movi	r2,-1
}
 c00dee4:	e037883a 	mov	sp,fp
 c00dee8:	dfc00117 	ldw	ra,4(sp)
 c00deec:	df000017 	ldw	fp,0(sp)
 c00def0:	dec00204 	addi	sp,sp,8
 c00def4:	f800283a 	ret

0c00def8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 c00def8:	defffc04 	addi	sp,sp,-16
 c00defc:	dfc00315 	stw	ra,12(sp)
 c00df00:	df000215 	stw	fp,8(sp)
 c00df04:	dc000115 	stw	r16,4(sp)
 c00df08:	df000204 	addi	fp,sp,8
 c00df0c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 c00df10:	e0bffe17 	ldw	r2,-8(fp)
 c00df14:	108000d0 	cmplti	r2,r2,3
 c00df18:	1000111e 	bne	r2,zero,c00df60 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 c00df1c:	04030074 	movhi	r16,3073
 c00df20:	84037904 	addi	r16,r16,3556
 c00df24:	e0bffe17 	ldw	r2,-8(fp)
 c00df28:	01400304 	movi	r5,12
 c00df2c:	1009883a 	mov	r4,r2
 c00df30:	c0009680 	call	c000968 <__mulsi3>
 c00df34:	8085883a 	add	r2,r16,r2
 c00df38:	10800204 	addi	r2,r2,8
 c00df3c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 c00df40:	04030074 	movhi	r16,3073
 c00df44:	84037904 	addi	r16,r16,3556
 c00df48:	e0bffe17 	ldw	r2,-8(fp)
 c00df4c:	01400304 	movi	r5,12
 c00df50:	1009883a 	mov	r4,r2
 c00df54:	c0009680 	call	c000968 <__mulsi3>
 c00df58:	8085883a 	add	r2,r16,r2
 c00df5c:	10000015 	stw	zero,0(r2)
  }
}
 c00df60:	0001883a 	nop
 c00df64:	e6ffff04 	addi	sp,fp,-4
 c00df68:	dfc00217 	ldw	ra,8(sp)
 c00df6c:	df000117 	ldw	fp,4(sp)
 c00df70:	dc000017 	ldw	r16,0(sp)
 c00df74:	dec00304 	addi	sp,sp,12
 c00df78:	f800283a 	ret

0c00df7c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 c00df7c:	defff904 	addi	sp,sp,-28
 c00df80:	df000615 	stw	fp,24(sp)
 c00df84:	df000604 	addi	fp,sp,24
 c00df88:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00df8c:	0005303a 	rdctl	r2,status
 c00df90:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00df94:	e0fffe17 	ldw	r3,-8(fp)
 c00df98:	00bfff84 	movi	r2,-2
 c00df9c:	1884703a 	and	r2,r3,r2
 c00dfa0:	1001703a 	wrctl	status,r2
  
  return context;
 c00dfa4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 c00dfa8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 c00dfac:	d0a00e17 	ldw	r2,-32712(gp)
 c00dfb0:	10c000c4 	addi	r3,r2,3
 c00dfb4:	00bfff04 	movi	r2,-4
 c00dfb8:	1884703a 	and	r2,r3,r2
 c00dfbc:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 c00dfc0:	d0e00e17 	ldw	r3,-32712(gp)
 c00dfc4:	e0bfff17 	ldw	r2,-4(fp)
 c00dfc8:	1887883a 	add	r3,r3,r2
 c00dfcc:	00840034 	movhi	r2,4096
 c00dfd0:	10800004 	addi	r2,r2,0
 c00dfd4:	10c0062e 	bgeu	r2,r3,c00dff0 <sbrk+0x74>
 c00dfd8:	e0bffb17 	ldw	r2,-20(fp)
 c00dfdc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00dfe0:	e0bffa17 	ldw	r2,-24(fp)
 c00dfe4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 c00dfe8:	00bfffc4 	movi	r2,-1
 c00dfec:	00000b06 	br	c00e01c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 c00dff0:	d0a00e17 	ldw	r2,-32712(gp)
 c00dff4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 c00dff8:	d0e00e17 	ldw	r3,-32712(gp)
 c00dffc:	e0bfff17 	ldw	r2,-4(fp)
 c00e000:	1885883a 	add	r2,r3,r2
 c00e004:	d0a00e15 	stw	r2,-32712(gp)
 c00e008:	e0bffb17 	ldw	r2,-20(fp)
 c00e00c:	e0bffc15 	stw	r2,-16(fp)
 c00e010:	e0bffc17 	ldw	r2,-16(fp)
 c00e014:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 c00e018:	e0bffd17 	ldw	r2,-12(fp)
} 
 c00e01c:	e037883a 	mov	sp,fp
 c00e020:	df000017 	ldw	fp,0(sp)
 c00e024:	dec00104 	addi	sp,sp,4
 c00e028:	f800283a 	ret

0c00e02c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 c00e02c:	defffd04 	addi	sp,sp,-12
 c00e030:	dfc00215 	stw	ra,8(sp)
 c00e034:	df000115 	stw	fp,4(sp)
 c00e038:	df000104 	addi	fp,sp,4
 c00e03c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 c00e040:	e13fff17 	ldw	r4,-4(fp)
 c00e044:	c00eef00 	call	c00eef0 <alt_busy_sleep>
}
 c00e048:	e037883a 	mov	sp,fp
 c00e04c:	dfc00117 	ldw	ra,4(sp)
 c00e050:	df000017 	ldw	fp,0(sp)
 c00e054:	dec00204 	addi	sp,sp,8
 c00e058:	f800283a 	ret

0c00e05c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c00e05c:	defffe04 	addi	sp,sp,-8
 c00e060:	dfc00115 	stw	ra,4(sp)
 c00e064:	df000015 	stw	fp,0(sp)
 c00e068:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c00e06c:	d0a00d17 	ldw	r2,-32716(gp)
 c00e070:	10000326 	beq	r2,zero,c00e080 <alt_get_errno+0x24>
 c00e074:	d0a00d17 	ldw	r2,-32716(gp)
 c00e078:	103ee83a 	callr	r2
 c00e07c:	00000106 	br	c00e084 <alt_get_errno+0x28>
 c00e080:	d0a6d504 	addi	r2,gp,-25772
}
 c00e084:	e037883a 	mov	sp,fp
 c00e088:	dfc00117 	ldw	ra,4(sp)
 c00e08c:	df000017 	ldw	fp,0(sp)
 c00e090:	dec00204 	addi	sp,sp,8
 c00e094:	f800283a 	ret

0c00e098 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 c00e098:	defff904 	addi	sp,sp,-28
 c00e09c:	dfc00615 	stw	ra,24(sp)
 c00e0a0:	df000515 	stw	fp,20(sp)
 c00e0a4:	df000504 	addi	fp,sp,20
 c00e0a8:	e13ffd15 	stw	r4,-12(fp)
 c00e0ac:	e17ffe15 	stw	r5,-8(fp)
 c00e0b0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c00e0b4:	e0bffd17 	ldw	r2,-12(fp)
 c00e0b8:	10000816 	blt	r2,zero,c00e0dc <write+0x44>
 c00e0bc:	01400304 	movi	r5,12
 c00e0c0:	e13ffd17 	ldw	r4,-12(fp)
 c00e0c4:	c0009680 	call	c000968 <__mulsi3>
 c00e0c8:	1007883a 	mov	r3,r2
 c00e0cc:	00830074 	movhi	r2,3073
 c00e0d0:	10837904 	addi	r2,r2,3556
 c00e0d4:	1885883a 	add	r2,r3,r2
 c00e0d8:	00000106 	br	c00e0e0 <write+0x48>
 c00e0dc:	0005883a 	mov	r2,zero
 c00e0e0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 c00e0e4:	e0bffb17 	ldw	r2,-20(fp)
 c00e0e8:	10002126 	beq	r2,zero,c00e170 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 c00e0ec:	e0bffb17 	ldw	r2,-20(fp)
 c00e0f0:	10800217 	ldw	r2,8(r2)
 c00e0f4:	108000cc 	andi	r2,r2,3
 c00e0f8:	10001826 	beq	r2,zero,c00e15c <write+0xc4>
 c00e0fc:	e0bffb17 	ldw	r2,-20(fp)
 c00e100:	10800017 	ldw	r2,0(r2)
 c00e104:	10800617 	ldw	r2,24(r2)
 c00e108:	10001426 	beq	r2,zero,c00e15c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 c00e10c:	e0bffb17 	ldw	r2,-20(fp)
 c00e110:	10800017 	ldw	r2,0(r2)
 c00e114:	10800617 	ldw	r2,24(r2)
 c00e118:	e0ffff17 	ldw	r3,-4(fp)
 c00e11c:	180d883a 	mov	r6,r3
 c00e120:	e17ffe17 	ldw	r5,-8(fp)
 c00e124:	e13ffb17 	ldw	r4,-20(fp)
 c00e128:	103ee83a 	callr	r2
 c00e12c:	e0bffc15 	stw	r2,-16(fp)
 c00e130:	e0bffc17 	ldw	r2,-16(fp)
 c00e134:	1000070e 	bge	r2,zero,c00e154 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 c00e138:	c00e05c0 	call	c00e05c <alt_get_errno>
 c00e13c:	1007883a 	mov	r3,r2
 c00e140:	e0bffc17 	ldw	r2,-16(fp)
 c00e144:	0085c83a 	sub	r2,zero,r2
 c00e148:	18800015 	stw	r2,0(r3)
        return -1;
 c00e14c:	00bfffc4 	movi	r2,-1
 c00e150:	00000c06 	br	c00e184 <write+0xec>
      }
      return rval;
 c00e154:	e0bffc17 	ldw	r2,-16(fp)
 c00e158:	00000a06 	br	c00e184 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 c00e15c:	c00e05c0 	call	c00e05c <alt_get_errno>
 c00e160:	1007883a 	mov	r3,r2
 c00e164:	00800344 	movi	r2,13
 c00e168:	18800015 	stw	r2,0(r3)
 c00e16c:	00000406 	br	c00e180 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 c00e170:	c00e05c0 	call	c00e05c <alt_get_errno>
 c00e174:	1007883a 	mov	r3,r2
 c00e178:	00801444 	movi	r2,81
 c00e17c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 c00e180:	00bfffc4 	movi	r2,-1
}
 c00e184:	e037883a 	mov	sp,fp
 c00e188:	dfc00117 	ldw	ra,4(sp)
 c00e18c:	df000017 	ldw	fp,0(sp)
 c00e190:	dec00204 	addi	sp,sp,8
 c00e194:	f800283a 	ret

0c00e198 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 c00e198:	defffd04 	addi	sp,sp,-12
 c00e19c:	dfc00215 	stw	ra,8(sp)
 c00e1a0:	df000115 	stw	fp,4(sp)
 c00e1a4:	df000104 	addi	fp,sp,4
 c00e1a8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 c00e1ac:	d1600a04 	addi	r5,gp,-32728
 c00e1b0:	e13fff17 	ldw	r4,-4(fp)
 c00e1b4:	c00f0a40 	call	c00f0a4 <alt_dev_llist_insert>
}
 c00e1b8:	e037883a 	mov	sp,fp
 c00e1bc:	dfc00117 	ldw	ra,4(sp)
 c00e1c0:	df000017 	ldw	fp,0(sp)
 c00e1c4:	dec00204 	addi	sp,sp,8
 c00e1c8:	f800283a 	ret

0c00e1cc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 c00e1cc:	defffd04 	addi	sp,sp,-12
 c00e1d0:	dfc00215 	stw	ra,8(sp)
 c00e1d4:	df000115 	stw	fp,4(sp)
 c00e1d8:	df000104 	addi	fp,sp,4
 c00e1dc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 c00e1e0:	c00fa500 	call	c00fa50 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 c00e1e4:	00800044 	movi	r2,1
 c00e1e8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 c00e1ec:	0001883a 	nop
 c00e1f0:	e037883a 	mov	sp,fp
 c00e1f4:	dfc00117 	ldw	ra,4(sp)
 c00e1f8:	df000017 	ldw	fp,0(sp)
 c00e1fc:	dec00204 	addi	sp,sp,8
 c00e200:	f800283a 	ret

0c00e204 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 c00e204:	defffe04 	addi	sp,sp,-8
 c00e208:	dfc00115 	stw	ra,4(sp)
 c00e20c:	df000015 	stw	fp,0(sp)
 c00e210:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 c00e214:	01c0fa04 	movi	r7,1000
 c00e218:	01800084 	movi	r6,2
 c00e21c:	000b883a 	mov	r5,zero
 c00e220:	01003004 	movi	r4,192
 c00e224:	c00ed480 	call	c00ed48 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 c00e228:	01800044 	movi	r6,1
 c00e22c:	000b883a 	mov	r5,zero
 c00e230:	01030074 	movhi	r4,3073
 c00e234:	2103e304 	addi	r4,r4,3980
 c00e238:	c00e3cc0 	call	c00e3cc <altera_avalon_jtag_uart_init>
 c00e23c:	01030074 	movhi	r4,3073
 c00e240:	2103d904 	addi	r4,r4,3940
 c00e244:	c00e1980 	call	c00e198 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 c00e248:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 c00e24c:	0001883a 	nop
}
 c00e250:	0001883a 	nop
 c00e254:	e037883a 	mov	sp,fp
 c00e258:	dfc00117 	ldw	ra,4(sp)
 c00e25c:	df000017 	ldw	fp,0(sp)
 c00e260:	dec00204 	addi	sp,sp,8
 c00e264:	f800283a 	ret

0c00e268 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 c00e268:	defffa04 	addi	sp,sp,-24
 c00e26c:	dfc00515 	stw	ra,20(sp)
 c00e270:	df000415 	stw	fp,16(sp)
 c00e274:	df000404 	addi	fp,sp,16
 c00e278:	e13ffd15 	stw	r4,-12(fp)
 c00e27c:	e17ffe15 	stw	r5,-8(fp)
 c00e280:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c00e284:	e0bffd17 	ldw	r2,-12(fp)
 c00e288:	10800017 	ldw	r2,0(r2)
 c00e28c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 c00e290:	e0bffc17 	ldw	r2,-16(fp)
 c00e294:	10c00a04 	addi	r3,r2,40
 c00e298:	e0bffd17 	ldw	r2,-12(fp)
 c00e29c:	10800217 	ldw	r2,8(r2)
 c00e2a0:	100f883a 	mov	r7,r2
 c00e2a4:	e1bfff17 	ldw	r6,-4(fp)
 c00e2a8:	e17ffe17 	ldw	r5,-8(fp)
 c00e2ac:	1809883a 	mov	r4,r3
 c00e2b0:	c00e8900 	call	c00e890 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 c00e2b4:	e037883a 	mov	sp,fp
 c00e2b8:	dfc00117 	ldw	ra,4(sp)
 c00e2bc:	df000017 	ldw	fp,0(sp)
 c00e2c0:	dec00204 	addi	sp,sp,8
 c00e2c4:	f800283a 	ret

0c00e2c8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 c00e2c8:	defffa04 	addi	sp,sp,-24
 c00e2cc:	dfc00515 	stw	ra,20(sp)
 c00e2d0:	df000415 	stw	fp,16(sp)
 c00e2d4:	df000404 	addi	fp,sp,16
 c00e2d8:	e13ffd15 	stw	r4,-12(fp)
 c00e2dc:	e17ffe15 	stw	r5,-8(fp)
 c00e2e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c00e2e4:	e0bffd17 	ldw	r2,-12(fp)
 c00e2e8:	10800017 	ldw	r2,0(r2)
 c00e2ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 c00e2f0:	e0bffc17 	ldw	r2,-16(fp)
 c00e2f4:	10c00a04 	addi	r3,r2,40
 c00e2f8:	e0bffd17 	ldw	r2,-12(fp)
 c00e2fc:	10800217 	ldw	r2,8(r2)
 c00e300:	100f883a 	mov	r7,r2
 c00e304:	e1bfff17 	ldw	r6,-4(fp)
 c00e308:	e17ffe17 	ldw	r5,-8(fp)
 c00e30c:	1809883a 	mov	r4,r3
 c00e310:	c00eaac0 	call	c00eaac <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 c00e314:	e037883a 	mov	sp,fp
 c00e318:	dfc00117 	ldw	ra,4(sp)
 c00e31c:	df000017 	ldw	fp,0(sp)
 c00e320:	dec00204 	addi	sp,sp,8
 c00e324:	f800283a 	ret

0c00e328 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 c00e328:	defffc04 	addi	sp,sp,-16
 c00e32c:	dfc00315 	stw	ra,12(sp)
 c00e330:	df000215 	stw	fp,8(sp)
 c00e334:	df000204 	addi	fp,sp,8
 c00e338:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c00e33c:	e0bfff17 	ldw	r2,-4(fp)
 c00e340:	10800017 	ldw	r2,0(r2)
 c00e344:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 c00e348:	e0bffe17 	ldw	r2,-8(fp)
 c00e34c:	10c00a04 	addi	r3,r2,40
 c00e350:	e0bfff17 	ldw	r2,-4(fp)
 c00e354:	10800217 	ldw	r2,8(r2)
 c00e358:	100b883a 	mov	r5,r2
 c00e35c:	1809883a 	mov	r4,r3
 c00e360:	c00e7380 	call	c00e738 <altera_avalon_jtag_uart_close>
}
 c00e364:	e037883a 	mov	sp,fp
 c00e368:	dfc00117 	ldw	ra,4(sp)
 c00e36c:	df000017 	ldw	fp,0(sp)
 c00e370:	dec00204 	addi	sp,sp,8
 c00e374:	f800283a 	ret

0c00e378 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 c00e378:	defffa04 	addi	sp,sp,-24
 c00e37c:	dfc00515 	stw	ra,20(sp)
 c00e380:	df000415 	stw	fp,16(sp)
 c00e384:	df000404 	addi	fp,sp,16
 c00e388:	e13ffd15 	stw	r4,-12(fp)
 c00e38c:	e17ffe15 	stw	r5,-8(fp)
 c00e390:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 c00e394:	e0bffd17 	ldw	r2,-12(fp)
 c00e398:	10800017 	ldw	r2,0(r2)
 c00e39c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 c00e3a0:	e0bffc17 	ldw	r2,-16(fp)
 c00e3a4:	10800a04 	addi	r2,r2,40
 c00e3a8:	e1bfff17 	ldw	r6,-4(fp)
 c00e3ac:	e17ffe17 	ldw	r5,-8(fp)
 c00e3b0:	1009883a 	mov	r4,r2
 c00e3b4:	c00e7a00 	call	c00e7a0 <altera_avalon_jtag_uart_ioctl>
}
 c00e3b8:	e037883a 	mov	sp,fp
 c00e3bc:	dfc00117 	ldw	ra,4(sp)
 c00e3c0:	df000017 	ldw	fp,0(sp)
 c00e3c4:	dec00204 	addi	sp,sp,8
 c00e3c8:	f800283a 	ret

0c00e3cc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 c00e3cc:	defffa04 	addi	sp,sp,-24
 c00e3d0:	dfc00515 	stw	ra,20(sp)
 c00e3d4:	df000415 	stw	fp,16(sp)
 c00e3d8:	df000404 	addi	fp,sp,16
 c00e3dc:	e13ffd15 	stw	r4,-12(fp)
 c00e3e0:	e17ffe15 	stw	r5,-8(fp)
 c00e3e4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c00e3e8:	e0bffd17 	ldw	r2,-12(fp)
 c00e3ec:	00c00044 	movi	r3,1
 c00e3f0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 c00e3f4:	e0bffd17 	ldw	r2,-12(fp)
 c00e3f8:	10800017 	ldw	r2,0(r2)
 c00e3fc:	10800104 	addi	r2,r2,4
 c00e400:	1007883a 	mov	r3,r2
 c00e404:	e0bffd17 	ldw	r2,-12(fp)
 c00e408:	10800817 	ldw	r2,32(r2)
 c00e40c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 c00e410:	e0bffe17 	ldw	r2,-8(fp)
 c00e414:	e0ffff17 	ldw	r3,-4(fp)
 c00e418:	d8000015 	stw	zero,0(sp)
 c00e41c:	e1fffd17 	ldw	r7,-12(fp)
 c00e420:	01830074 	movhi	r6,3073
 c00e424:	31b92304 	addi	r6,r6,-7028
 c00e428:	180b883a 	mov	r5,r3
 c00e42c:	1009883a 	mov	r4,r2
 c00e430:	c00f2280 	call	c00f228 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 c00e434:	e0bffd17 	ldw	r2,-12(fp)
 c00e438:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 c00e43c:	e0bffd17 	ldw	r2,-12(fp)
 c00e440:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c00e444:	d0e6da17 	ldw	r3,-25752(gp)
 c00e448:	e1fffd17 	ldw	r7,-12(fp)
 c00e44c:	01830074 	movhi	r6,3073
 c00e450:	31b9a604 	addi	r6,r6,-6504
 c00e454:	180b883a 	mov	r5,r3
 c00e458:	1009883a 	mov	r4,r2
 c00e45c:	c00edc40 	call	c00edc4 <alt_alarm_start>
 c00e460:	1000040e 	bge	r2,zero,c00e474 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 c00e464:	e0fffd17 	ldw	r3,-12(fp)
 c00e468:	00a00034 	movhi	r2,32768
 c00e46c:	10bfffc4 	addi	r2,r2,-1
 c00e470:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 c00e474:	0001883a 	nop
 c00e478:	e037883a 	mov	sp,fp
 c00e47c:	dfc00117 	ldw	ra,4(sp)
 c00e480:	df000017 	ldw	fp,0(sp)
 c00e484:	dec00204 	addi	sp,sp,8
 c00e488:	f800283a 	ret

0c00e48c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 c00e48c:	defff804 	addi	sp,sp,-32
 c00e490:	df000715 	stw	fp,28(sp)
 c00e494:	df000704 	addi	fp,sp,28
 c00e498:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 c00e49c:	e0bfff17 	ldw	r2,-4(fp)
 c00e4a0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 c00e4a4:	e0bffb17 	ldw	r2,-20(fp)
 c00e4a8:	10800017 	ldw	r2,0(r2)
 c00e4ac:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c00e4b0:	e0bffc17 	ldw	r2,-16(fp)
 c00e4b4:	10800104 	addi	r2,r2,4
 c00e4b8:	10800037 	ldwio	r2,0(r2)
 c00e4bc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 c00e4c0:	e0bffd17 	ldw	r2,-12(fp)
 c00e4c4:	1080c00c 	andi	r2,r2,768
 c00e4c8:	10006d26 	beq	r2,zero,c00e680 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 c00e4cc:	e0bffd17 	ldw	r2,-12(fp)
 c00e4d0:	1080400c 	andi	r2,r2,256
 c00e4d4:	10003526 	beq	r2,zero,c00e5ac <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 c00e4d8:	00800074 	movhi	r2,1
 c00e4dc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c00e4e0:	e0bffb17 	ldw	r2,-20(fp)
 c00e4e4:	10800a17 	ldw	r2,40(r2)
 c00e4e8:	10800044 	addi	r2,r2,1
 c00e4ec:	1081ffcc 	andi	r2,r2,2047
 c00e4f0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 c00e4f4:	e0bffb17 	ldw	r2,-20(fp)
 c00e4f8:	10c00b17 	ldw	r3,44(r2)
 c00e4fc:	e0bffe17 	ldw	r2,-8(fp)
 c00e500:	18801526 	beq	r3,r2,c00e558 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 c00e504:	e0bffc17 	ldw	r2,-16(fp)
 c00e508:	10800037 	ldwio	r2,0(r2)
 c00e50c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 c00e510:	e0bff917 	ldw	r2,-28(fp)
 c00e514:	10a0000c 	andi	r2,r2,32768
 c00e518:	10001126 	beq	r2,zero,c00e560 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 c00e51c:	e0bffb17 	ldw	r2,-20(fp)
 c00e520:	10800a17 	ldw	r2,40(r2)
 c00e524:	e0fff917 	ldw	r3,-28(fp)
 c00e528:	1809883a 	mov	r4,r3
 c00e52c:	e0fffb17 	ldw	r3,-20(fp)
 c00e530:	1885883a 	add	r2,r3,r2
 c00e534:	10800e04 	addi	r2,r2,56
 c00e538:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c00e53c:	e0bffb17 	ldw	r2,-20(fp)
 c00e540:	10800a17 	ldw	r2,40(r2)
 c00e544:	10800044 	addi	r2,r2,1
 c00e548:	10c1ffcc 	andi	r3,r2,2047
 c00e54c:	e0bffb17 	ldw	r2,-20(fp)
 c00e550:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 c00e554:	003fe206 	br	c00e4e0 <__alt_data_end+0xfc00e4e0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 c00e558:	0001883a 	nop
 c00e55c:	00000106 	br	c00e564 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 c00e560:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 c00e564:	e0bff917 	ldw	r2,-28(fp)
 c00e568:	10bfffec 	andhi	r2,r2,65535
 c00e56c:	10000f26 	beq	r2,zero,c00e5ac <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c00e570:	e0bffb17 	ldw	r2,-20(fp)
 c00e574:	10c00817 	ldw	r3,32(r2)
 c00e578:	00bfff84 	movi	r2,-2
 c00e57c:	1886703a 	and	r3,r3,r2
 c00e580:	e0bffb17 	ldw	r2,-20(fp)
 c00e584:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 c00e588:	e0bffc17 	ldw	r2,-16(fp)
 c00e58c:	10800104 	addi	r2,r2,4
 c00e590:	1007883a 	mov	r3,r2
 c00e594:	e0bffb17 	ldw	r2,-20(fp)
 c00e598:	10800817 	ldw	r2,32(r2)
 c00e59c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c00e5a0:	e0bffc17 	ldw	r2,-16(fp)
 c00e5a4:	10800104 	addi	r2,r2,4
 c00e5a8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 c00e5ac:	e0bffd17 	ldw	r2,-12(fp)
 c00e5b0:	1080800c 	andi	r2,r2,512
 c00e5b4:	103fbe26 	beq	r2,zero,c00e4b0 <__alt_data_end+0xfc00e4b0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 c00e5b8:	e0bffd17 	ldw	r2,-12(fp)
 c00e5bc:	1004d43a 	srli	r2,r2,16
 c00e5c0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 c00e5c4:	00001406 	br	c00e618 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 c00e5c8:	e0bffc17 	ldw	r2,-16(fp)
 c00e5cc:	e0fffb17 	ldw	r3,-20(fp)
 c00e5d0:	18c00d17 	ldw	r3,52(r3)
 c00e5d4:	e13ffb17 	ldw	r4,-20(fp)
 c00e5d8:	20c7883a 	add	r3,r4,r3
 c00e5dc:	18c20e04 	addi	r3,r3,2104
 c00e5e0:	18c00003 	ldbu	r3,0(r3)
 c00e5e4:	18c03fcc 	andi	r3,r3,255
 c00e5e8:	18c0201c 	xori	r3,r3,128
 c00e5ec:	18ffe004 	addi	r3,r3,-128
 c00e5f0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c00e5f4:	e0bffb17 	ldw	r2,-20(fp)
 c00e5f8:	10800d17 	ldw	r2,52(r2)
 c00e5fc:	10800044 	addi	r2,r2,1
 c00e600:	10c1ffcc 	andi	r3,r2,2047
 c00e604:	e0bffb17 	ldw	r2,-20(fp)
 c00e608:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 c00e60c:	e0bffa17 	ldw	r2,-24(fp)
 c00e610:	10bfffc4 	addi	r2,r2,-1
 c00e614:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 c00e618:	e0bffa17 	ldw	r2,-24(fp)
 c00e61c:	10000526 	beq	r2,zero,c00e634 <altera_avalon_jtag_uart_irq+0x1a8>
 c00e620:	e0bffb17 	ldw	r2,-20(fp)
 c00e624:	10c00d17 	ldw	r3,52(r2)
 c00e628:	e0bffb17 	ldw	r2,-20(fp)
 c00e62c:	10800c17 	ldw	r2,48(r2)
 c00e630:	18bfe51e 	bne	r3,r2,c00e5c8 <__alt_data_end+0xfc00e5c8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 c00e634:	e0bffa17 	ldw	r2,-24(fp)
 c00e638:	103f9d26 	beq	r2,zero,c00e4b0 <__alt_data_end+0xfc00e4b0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 c00e63c:	e0bffb17 	ldw	r2,-20(fp)
 c00e640:	10c00817 	ldw	r3,32(r2)
 c00e644:	00bfff44 	movi	r2,-3
 c00e648:	1886703a 	and	r3,r3,r2
 c00e64c:	e0bffb17 	ldw	r2,-20(fp)
 c00e650:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c00e654:	e0bffb17 	ldw	r2,-20(fp)
 c00e658:	10800017 	ldw	r2,0(r2)
 c00e65c:	10800104 	addi	r2,r2,4
 c00e660:	1007883a 	mov	r3,r2
 c00e664:	e0bffb17 	ldw	r2,-20(fp)
 c00e668:	10800817 	ldw	r2,32(r2)
 c00e66c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c00e670:	e0bffc17 	ldw	r2,-16(fp)
 c00e674:	10800104 	addi	r2,r2,4
 c00e678:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 c00e67c:	003f8c06 	br	c00e4b0 <__alt_data_end+0xfc00e4b0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 c00e680:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 c00e684:	0001883a 	nop
 c00e688:	e037883a 	mov	sp,fp
 c00e68c:	df000017 	ldw	fp,0(sp)
 c00e690:	dec00104 	addi	sp,sp,4
 c00e694:	f800283a 	ret

0c00e698 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 c00e698:	defff804 	addi	sp,sp,-32
 c00e69c:	df000715 	stw	fp,28(sp)
 c00e6a0:	df000704 	addi	fp,sp,28
 c00e6a4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 c00e6a8:	e0bffb17 	ldw	r2,-20(fp)
 c00e6ac:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 c00e6b0:	e0bff917 	ldw	r2,-28(fp)
 c00e6b4:	10800017 	ldw	r2,0(r2)
 c00e6b8:	10800104 	addi	r2,r2,4
 c00e6bc:	10800037 	ldwio	r2,0(r2)
 c00e6c0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 c00e6c4:	e0bffa17 	ldw	r2,-24(fp)
 c00e6c8:	1081000c 	andi	r2,r2,1024
 c00e6cc:	10000b26 	beq	r2,zero,c00e6fc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 c00e6d0:	e0bff917 	ldw	r2,-28(fp)
 c00e6d4:	10800017 	ldw	r2,0(r2)
 c00e6d8:	10800104 	addi	r2,r2,4
 c00e6dc:	1007883a 	mov	r3,r2
 c00e6e0:	e0bff917 	ldw	r2,-28(fp)
 c00e6e4:	10800817 	ldw	r2,32(r2)
 c00e6e8:	10810014 	ori	r2,r2,1024
 c00e6ec:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 c00e6f0:	e0bff917 	ldw	r2,-28(fp)
 c00e6f4:	10000915 	stw	zero,36(r2)
 c00e6f8:	00000a06 	br	c00e724 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 c00e6fc:	e0bff917 	ldw	r2,-28(fp)
 c00e700:	10c00917 	ldw	r3,36(r2)
 c00e704:	00a00034 	movhi	r2,32768
 c00e708:	10bfff04 	addi	r2,r2,-4
 c00e70c:	10c00536 	bltu	r2,r3,c00e724 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 c00e710:	e0bff917 	ldw	r2,-28(fp)
 c00e714:	10800917 	ldw	r2,36(r2)
 c00e718:	10c00044 	addi	r3,r2,1
 c00e71c:	e0bff917 	ldw	r2,-28(fp)
 c00e720:	10c00915 	stw	r3,36(r2)
 c00e724:	d0a6da17 	ldw	r2,-25752(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 c00e728:	e037883a 	mov	sp,fp
 c00e72c:	df000017 	ldw	fp,0(sp)
 c00e730:	dec00104 	addi	sp,sp,4
 c00e734:	f800283a 	ret

0c00e738 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 c00e738:	defffd04 	addi	sp,sp,-12
 c00e73c:	df000215 	stw	fp,8(sp)
 c00e740:	df000204 	addi	fp,sp,8
 c00e744:	e13ffe15 	stw	r4,-8(fp)
 c00e748:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 c00e74c:	00000506 	br	c00e764 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 c00e750:	e0bfff17 	ldw	r2,-4(fp)
 c00e754:	1090000c 	andi	r2,r2,16384
 c00e758:	10000226 	beq	r2,zero,c00e764 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 c00e75c:	00bffd44 	movi	r2,-11
 c00e760:	00000b06 	br	c00e790 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 c00e764:	e0bffe17 	ldw	r2,-8(fp)
 c00e768:	10c00d17 	ldw	r3,52(r2)
 c00e76c:	e0bffe17 	ldw	r2,-8(fp)
 c00e770:	10800c17 	ldw	r2,48(r2)
 c00e774:	18800526 	beq	r3,r2,c00e78c <altera_avalon_jtag_uart_close+0x54>
 c00e778:	e0bffe17 	ldw	r2,-8(fp)
 c00e77c:	10c00917 	ldw	r3,36(r2)
 c00e780:	e0bffe17 	ldw	r2,-8(fp)
 c00e784:	10800117 	ldw	r2,4(r2)
 c00e788:	18bff136 	bltu	r3,r2,c00e750 <__alt_data_end+0xfc00e750>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 c00e78c:	0005883a 	mov	r2,zero
}
 c00e790:	e037883a 	mov	sp,fp
 c00e794:	df000017 	ldw	fp,0(sp)
 c00e798:	dec00104 	addi	sp,sp,4
 c00e79c:	f800283a 	ret

0c00e7a0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 c00e7a0:	defffa04 	addi	sp,sp,-24
 c00e7a4:	df000515 	stw	fp,20(sp)
 c00e7a8:	df000504 	addi	fp,sp,20
 c00e7ac:	e13ffd15 	stw	r4,-12(fp)
 c00e7b0:	e17ffe15 	stw	r5,-8(fp)
 c00e7b4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 c00e7b8:	00bff9c4 	movi	r2,-25
 c00e7bc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 c00e7c0:	e0bffe17 	ldw	r2,-8(fp)
 c00e7c4:	10da8060 	cmpeqi	r3,r2,27137
 c00e7c8:	1800031e 	bne	r3,zero,c00e7d8 <altera_avalon_jtag_uart_ioctl+0x38>
 c00e7cc:	109a80a0 	cmpeqi	r2,r2,27138
 c00e7d0:	1000181e 	bne	r2,zero,c00e834 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 c00e7d4:	00002906 	br	c00e87c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 c00e7d8:	e0bffd17 	ldw	r2,-12(fp)
 c00e7dc:	10c00117 	ldw	r3,4(r2)
 c00e7e0:	00a00034 	movhi	r2,32768
 c00e7e4:	10bfffc4 	addi	r2,r2,-1
 c00e7e8:	18802126 	beq	r3,r2,c00e870 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 c00e7ec:	e0bfff17 	ldw	r2,-4(fp)
 c00e7f0:	10800017 	ldw	r2,0(r2)
 c00e7f4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 c00e7f8:	e0bffc17 	ldw	r2,-16(fp)
 c00e7fc:	10800090 	cmplti	r2,r2,2
 c00e800:	1000061e 	bne	r2,zero,c00e81c <altera_avalon_jtag_uart_ioctl+0x7c>
 c00e804:	e0fffc17 	ldw	r3,-16(fp)
 c00e808:	00a00034 	movhi	r2,32768
 c00e80c:	10bfffc4 	addi	r2,r2,-1
 c00e810:	18800226 	beq	r3,r2,c00e81c <altera_avalon_jtag_uart_ioctl+0x7c>
 c00e814:	e0bffc17 	ldw	r2,-16(fp)
 c00e818:	00000206 	br	c00e824 <altera_avalon_jtag_uart_ioctl+0x84>
 c00e81c:	00a00034 	movhi	r2,32768
 c00e820:	10bfff84 	addi	r2,r2,-2
 c00e824:	e0fffd17 	ldw	r3,-12(fp)
 c00e828:	18800115 	stw	r2,4(r3)
      rc = 0;
 c00e82c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 c00e830:	00000f06 	br	c00e870 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 c00e834:	e0bffd17 	ldw	r2,-12(fp)
 c00e838:	10c00117 	ldw	r3,4(r2)
 c00e83c:	00a00034 	movhi	r2,32768
 c00e840:	10bfffc4 	addi	r2,r2,-1
 c00e844:	18800c26 	beq	r3,r2,c00e878 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 c00e848:	e0bffd17 	ldw	r2,-12(fp)
 c00e84c:	10c00917 	ldw	r3,36(r2)
 c00e850:	e0bffd17 	ldw	r2,-12(fp)
 c00e854:	10800117 	ldw	r2,4(r2)
 c00e858:	1885803a 	cmpltu	r2,r3,r2
 c00e85c:	10c03fcc 	andi	r3,r2,255
 c00e860:	e0bfff17 	ldw	r2,-4(fp)
 c00e864:	10c00015 	stw	r3,0(r2)
      rc = 0;
 c00e868:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 c00e86c:	00000206 	br	c00e878 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 c00e870:	0001883a 	nop
 c00e874:	00000106 	br	c00e87c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 c00e878:	0001883a 	nop

  default:
    break;
  }

  return rc;
 c00e87c:	e0bffb17 	ldw	r2,-20(fp)
}
 c00e880:	e037883a 	mov	sp,fp
 c00e884:	df000017 	ldw	fp,0(sp)
 c00e888:	dec00104 	addi	sp,sp,4
 c00e88c:	f800283a 	ret

0c00e890 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 c00e890:	defff304 	addi	sp,sp,-52
 c00e894:	dfc00c15 	stw	ra,48(sp)
 c00e898:	df000b15 	stw	fp,44(sp)
 c00e89c:	df000b04 	addi	fp,sp,44
 c00e8a0:	e13ffc15 	stw	r4,-16(fp)
 c00e8a4:	e17ffd15 	stw	r5,-12(fp)
 c00e8a8:	e1bffe15 	stw	r6,-8(fp)
 c00e8ac:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 c00e8b0:	e0bffd17 	ldw	r2,-12(fp)
 c00e8b4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 c00e8b8:	00004706 	br	c00e9d8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 c00e8bc:	e0bffc17 	ldw	r2,-16(fp)
 c00e8c0:	10800a17 	ldw	r2,40(r2)
 c00e8c4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 c00e8c8:	e0bffc17 	ldw	r2,-16(fp)
 c00e8cc:	10800b17 	ldw	r2,44(r2)
 c00e8d0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 c00e8d4:	e0fff717 	ldw	r3,-36(fp)
 c00e8d8:	e0bff817 	ldw	r2,-32(fp)
 c00e8dc:	18800536 	bltu	r3,r2,c00e8f4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 c00e8e0:	e0fff717 	ldw	r3,-36(fp)
 c00e8e4:	e0bff817 	ldw	r2,-32(fp)
 c00e8e8:	1885c83a 	sub	r2,r3,r2
 c00e8ec:	e0bff615 	stw	r2,-40(fp)
 c00e8f0:	00000406 	br	c00e904 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 c00e8f4:	00c20004 	movi	r3,2048
 c00e8f8:	e0bff817 	ldw	r2,-32(fp)
 c00e8fc:	1885c83a 	sub	r2,r3,r2
 c00e900:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 c00e904:	e0bff617 	ldw	r2,-40(fp)
 c00e908:	10001e26 	beq	r2,zero,c00e984 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 c00e90c:	e0fffe17 	ldw	r3,-8(fp)
 c00e910:	e0bff617 	ldw	r2,-40(fp)
 c00e914:	1880022e 	bgeu	r3,r2,c00e920 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 c00e918:	e0bffe17 	ldw	r2,-8(fp)
 c00e91c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 c00e920:	e0bffc17 	ldw	r2,-16(fp)
 c00e924:	10c00e04 	addi	r3,r2,56
 c00e928:	e0bff817 	ldw	r2,-32(fp)
 c00e92c:	1885883a 	add	r2,r3,r2
 c00e930:	e1bff617 	ldw	r6,-40(fp)
 c00e934:	100b883a 	mov	r5,r2
 c00e938:	e13ff517 	ldw	r4,-44(fp)
 c00e93c:	c0009900 	call	c000990 <memcpy>
      ptr   += n;
 c00e940:	e0fff517 	ldw	r3,-44(fp)
 c00e944:	e0bff617 	ldw	r2,-40(fp)
 c00e948:	1885883a 	add	r2,r3,r2
 c00e94c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 c00e950:	e0fffe17 	ldw	r3,-8(fp)
 c00e954:	e0bff617 	ldw	r2,-40(fp)
 c00e958:	1885c83a 	sub	r2,r3,r2
 c00e95c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c00e960:	e0fff817 	ldw	r3,-32(fp)
 c00e964:	e0bff617 	ldw	r2,-40(fp)
 c00e968:	1885883a 	add	r2,r3,r2
 c00e96c:	10c1ffcc 	andi	r3,r2,2047
 c00e970:	e0bffc17 	ldw	r2,-16(fp)
 c00e974:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 c00e978:	e0bffe17 	ldw	r2,-8(fp)
 c00e97c:	00bfcf16 	blt	zero,r2,c00e8bc <__alt_data_end+0xfc00e8bc>
 c00e980:	00000106 	br	c00e988 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 c00e984:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 c00e988:	e0fff517 	ldw	r3,-44(fp)
 c00e98c:	e0bffd17 	ldw	r2,-12(fp)
 c00e990:	1880141e 	bne	r3,r2,c00e9e4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 c00e994:	e0bfff17 	ldw	r2,-4(fp)
 c00e998:	1090000c 	andi	r2,r2,16384
 c00e99c:	1000131e 	bne	r2,zero,c00e9ec <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 c00e9a0:	0001883a 	nop
 c00e9a4:	e0bffc17 	ldw	r2,-16(fp)
 c00e9a8:	10c00a17 	ldw	r3,40(r2)
 c00e9ac:	e0bff717 	ldw	r2,-36(fp)
 c00e9b0:	1880051e 	bne	r3,r2,c00e9c8 <altera_avalon_jtag_uart_read+0x138>
 c00e9b4:	e0bffc17 	ldw	r2,-16(fp)
 c00e9b8:	10c00917 	ldw	r3,36(r2)
 c00e9bc:	e0bffc17 	ldw	r2,-16(fp)
 c00e9c0:	10800117 	ldw	r2,4(r2)
 c00e9c4:	18bff736 	bltu	r3,r2,c00e9a4 <__alt_data_end+0xfc00e9a4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 c00e9c8:	e0bffc17 	ldw	r2,-16(fp)
 c00e9cc:	10c00a17 	ldw	r3,40(r2)
 c00e9d0:	e0bff717 	ldw	r2,-36(fp)
 c00e9d4:	18800726 	beq	r3,r2,c00e9f4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 c00e9d8:	e0bffe17 	ldw	r2,-8(fp)
 c00e9dc:	00bfb716 	blt	zero,r2,c00e8bc <__alt_data_end+0xfc00e8bc>
 c00e9e0:	00000506 	br	c00e9f8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 c00e9e4:	0001883a 	nop
 c00e9e8:	00000306 	br	c00e9f8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 c00e9ec:	0001883a 	nop
 c00e9f0:	00000106 	br	c00e9f8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 c00e9f4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 c00e9f8:	e0fff517 	ldw	r3,-44(fp)
 c00e9fc:	e0bffd17 	ldw	r2,-12(fp)
 c00ea00:	18801826 	beq	r3,r2,c00ea64 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00ea04:	0005303a 	rdctl	r2,status
 c00ea08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00ea0c:	e0fffb17 	ldw	r3,-20(fp)
 c00ea10:	00bfff84 	movi	r2,-2
 c00ea14:	1884703a 	and	r2,r3,r2
 c00ea18:	1001703a 	wrctl	status,r2
  
  return context;
 c00ea1c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 c00ea20:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c00ea24:	e0bffc17 	ldw	r2,-16(fp)
 c00ea28:	10800817 	ldw	r2,32(r2)
 c00ea2c:	10c00054 	ori	r3,r2,1
 c00ea30:	e0bffc17 	ldw	r2,-16(fp)
 c00ea34:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c00ea38:	e0bffc17 	ldw	r2,-16(fp)
 c00ea3c:	10800017 	ldw	r2,0(r2)
 c00ea40:	10800104 	addi	r2,r2,4
 c00ea44:	1007883a 	mov	r3,r2
 c00ea48:	e0bffc17 	ldw	r2,-16(fp)
 c00ea4c:	10800817 	ldw	r2,32(r2)
 c00ea50:	18800035 	stwio	r2,0(r3)
 c00ea54:	e0bffa17 	ldw	r2,-24(fp)
 c00ea58:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00ea5c:	e0bff917 	ldw	r2,-28(fp)
 c00ea60:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 c00ea64:	e0fff517 	ldw	r3,-44(fp)
 c00ea68:	e0bffd17 	ldw	r2,-12(fp)
 c00ea6c:	18800426 	beq	r3,r2,c00ea80 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 c00ea70:	e0fff517 	ldw	r3,-44(fp)
 c00ea74:	e0bffd17 	ldw	r2,-12(fp)
 c00ea78:	1885c83a 	sub	r2,r3,r2
 c00ea7c:	00000606 	br	c00ea98 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 c00ea80:	e0bfff17 	ldw	r2,-4(fp)
 c00ea84:	1090000c 	andi	r2,r2,16384
 c00ea88:	10000226 	beq	r2,zero,c00ea94 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 c00ea8c:	00bffd44 	movi	r2,-11
 c00ea90:	00000106 	br	c00ea98 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 c00ea94:	00bffec4 	movi	r2,-5
}
 c00ea98:	e037883a 	mov	sp,fp
 c00ea9c:	dfc00117 	ldw	ra,4(sp)
 c00eaa0:	df000017 	ldw	fp,0(sp)
 c00eaa4:	dec00204 	addi	sp,sp,8
 c00eaa8:	f800283a 	ret

0c00eaac <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 c00eaac:	defff304 	addi	sp,sp,-52
 c00eab0:	dfc00c15 	stw	ra,48(sp)
 c00eab4:	df000b15 	stw	fp,44(sp)
 c00eab8:	df000b04 	addi	fp,sp,44
 c00eabc:	e13ffc15 	stw	r4,-16(fp)
 c00eac0:	e17ffd15 	stw	r5,-12(fp)
 c00eac4:	e1bffe15 	stw	r6,-8(fp)
 c00eac8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 c00eacc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 c00ead0:	e0bffd17 	ldw	r2,-12(fp)
 c00ead4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 c00ead8:	00003706 	br	c00ebb8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 c00eadc:	e0bffc17 	ldw	r2,-16(fp)
 c00eae0:	10800c17 	ldw	r2,48(r2)
 c00eae4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 c00eae8:	e0bffc17 	ldw	r2,-16(fp)
 c00eaec:	10800d17 	ldw	r2,52(r2)
 c00eaf0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 c00eaf4:	e0fff917 	ldw	r3,-28(fp)
 c00eaf8:	e0bff517 	ldw	r2,-44(fp)
 c00eafc:	1880062e 	bgeu	r3,r2,c00eb18 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 c00eb00:	e0fff517 	ldw	r3,-44(fp)
 c00eb04:	e0bff917 	ldw	r2,-28(fp)
 c00eb08:	1885c83a 	sub	r2,r3,r2
 c00eb0c:	10bfffc4 	addi	r2,r2,-1
 c00eb10:	e0bff615 	stw	r2,-40(fp)
 c00eb14:	00000b06 	br	c00eb44 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 c00eb18:	e0bff517 	ldw	r2,-44(fp)
 c00eb1c:	10000526 	beq	r2,zero,c00eb34 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 c00eb20:	00c20004 	movi	r3,2048
 c00eb24:	e0bff917 	ldw	r2,-28(fp)
 c00eb28:	1885c83a 	sub	r2,r3,r2
 c00eb2c:	e0bff615 	stw	r2,-40(fp)
 c00eb30:	00000406 	br	c00eb44 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 c00eb34:	00c1ffc4 	movi	r3,2047
 c00eb38:	e0bff917 	ldw	r2,-28(fp)
 c00eb3c:	1885c83a 	sub	r2,r3,r2
 c00eb40:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 c00eb44:	e0bff617 	ldw	r2,-40(fp)
 c00eb48:	10001e26 	beq	r2,zero,c00ebc4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 c00eb4c:	e0fffe17 	ldw	r3,-8(fp)
 c00eb50:	e0bff617 	ldw	r2,-40(fp)
 c00eb54:	1880022e 	bgeu	r3,r2,c00eb60 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 c00eb58:	e0bffe17 	ldw	r2,-8(fp)
 c00eb5c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 c00eb60:	e0bffc17 	ldw	r2,-16(fp)
 c00eb64:	10c20e04 	addi	r3,r2,2104
 c00eb68:	e0bff917 	ldw	r2,-28(fp)
 c00eb6c:	1885883a 	add	r2,r3,r2
 c00eb70:	e1bff617 	ldw	r6,-40(fp)
 c00eb74:	e17ffd17 	ldw	r5,-12(fp)
 c00eb78:	1009883a 	mov	r4,r2
 c00eb7c:	c0009900 	call	c000990 <memcpy>
      ptr   += n;
 c00eb80:	e0fffd17 	ldw	r3,-12(fp)
 c00eb84:	e0bff617 	ldw	r2,-40(fp)
 c00eb88:	1885883a 	add	r2,r3,r2
 c00eb8c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 c00eb90:	e0fffe17 	ldw	r3,-8(fp)
 c00eb94:	e0bff617 	ldw	r2,-40(fp)
 c00eb98:	1885c83a 	sub	r2,r3,r2
 c00eb9c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c00eba0:	e0fff917 	ldw	r3,-28(fp)
 c00eba4:	e0bff617 	ldw	r2,-40(fp)
 c00eba8:	1885883a 	add	r2,r3,r2
 c00ebac:	10c1ffcc 	andi	r3,r2,2047
 c00ebb0:	e0bffc17 	ldw	r2,-16(fp)
 c00ebb4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 c00ebb8:	e0bffe17 	ldw	r2,-8(fp)
 c00ebbc:	00bfc716 	blt	zero,r2,c00eadc <__alt_data_end+0xfc00eadc>
 c00ebc0:	00000106 	br	c00ebc8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 c00ebc4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00ebc8:	0005303a 	rdctl	r2,status
 c00ebcc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00ebd0:	e0fffb17 	ldw	r3,-20(fp)
 c00ebd4:	00bfff84 	movi	r2,-2
 c00ebd8:	1884703a 	and	r2,r3,r2
 c00ebdc:	1001703a 	wrctl	status,r2
  
  return context;
 c00ebe0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 c00ebe4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 c00ebe8:	e0bffc17 	ldw	r2,-16(fp)
 c00ebec:	10800817 	ldw	r2,32(r2)
 c00ebf0:	10c00094 	ori	r3,r2,2
 c00ebf4:	e0bffc17 	ldw	r2,-16(fp)
 c00ebf8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c00ebfc:	e0bffc17 	ldw	r2,-16(fp)
 c00ec00:	10800017 	ldw	r2,0(r2)
 c00ec04:	10800104 	addi	r2,r2,4
 c00ec08:	1007883a 	mov	r3,r2
 c00ec0c:	e0bffc17 	ldw	r2,-16(fp)
 c00ec10:	10800817 	ldw	r2,32(r2)
 c00ec14:	18800035 	stwio	r2,0(r3)
 c00ec18:	e0bffa17 	ldw	r2,-24(fp)
 c00ec1c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00ec20:	e0bff817 	ldw	r2,-32(fp)
 c00ec24:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 c00ec28:	e0bffe17 	ldw	r2,-8(fp)
 c00ec2c:	0080100e 	bge	zero,r2,c00ec70 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 c00ec30:	e0bfff17 	ldw	r2,-4(fp)
 c00ec34:	1090000c 	andi	r2,r2,16384
 c00ec38:	1000101e 	bne	r2,zero,c00ec7c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 c00ec3c:	0001883a 	nop
 c00ec40:	e0bffc17 	ldw	r2,-16(fp)
 c00ec44:	10c00d17 	ldw	r3,52(r2)
 c00ec48:	e0bff517 	ldw	r2,-44(fp)
 c00ec4c:	1880051e 	bne	r3,r2,c00ec64 <altera_avalon_jtag_uart_write+0x1b8>
 c00ec50:	e0bffc17 	ldw	r2,-16(fp)
 c00ec54:	10c00917 	ldw	r3,36(r2)
 c00ec58:	e0bffc17 	ldw	r2,-16(fp)
 c00ec5c:	10800117 	ldw	r2,4(r2)
 c00ec60:	18bff736 	bltu	r3,r2,c00ec40 <__alt_data_end+0xfc00ec40>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 c00ec64:	e0bffc17 	ldw	r2,-16(fp)
 c00ec68:	10800917 	ldw	r2,36(r2)
 c00ec6c:	1000051e 	bne	r2,zero,c00ec84 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 c00ec70:	e0bffe17 	ldw	r2,-8(fp)
 c00ec74:	00bfd016 	blt	zero,r2,c00ebb8 <__alt_data_end+0xfc00ebb8>
 c00ec78:	00000306 	br	c00ec88 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 c00ec7c:	0001883a 	nop
 c00ec80:	00000106 	br	c00ec88 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 c00ec84:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 c00ec88:	e0fffd17 	ldw	r3,-12(fp)
 c00ec8c:	e0bff717 	ldw	r2,-36(fp)
 c00ec90:	18800426 	beq	r3,r2,c00eca4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 c00ec94:	e0fffd17 	ldw	r3,-12(fp)
 c00ec98:	e0bff717 	ldw	r2,-36(fp)
 c00ec9c:	1885c83a 	sub	r2,r3,r2
 c00eca0:	00000606 	br	c00ecbc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 c00eca4:	e0bfff17 	ldw	r2,-4(fp)
 c00eca8:	1090000c 	andi	r2,r2,16384
 c00ecac:	10000226 	beq	r2,zero,c00ecb8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 c00ecb0:	00bffd44 	movi	r2,-11
 c00ecb4:	00000106 	br	c00ecbc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 c00ecb8:	00bffec4 	movi	r2,-5
}
 c00ecbc:	e037883a 	mov	sp,fp
 c00ecc0:	dfc00117 	ldw	ra,4(sp)
 c00ecc4:	df000017 	ldw	fp,0(sp)
 c00ecc8:	dec00204 	addi	sp,sp,8
 c00eccc:	f800283a 	ret

0c00ecd0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 c00ecd0:	defffa04 	addi	sp,sp,-24
 c00ecd4:	dfc00515 	stw	ra,20(sp)
 c00ecd8:	df000415 	stw	fp,16(sp)
 c00ecdc:	df000404 	addi	fp,sp,16
 c00ece0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 c00ece4:	0007883a 	mov	r3,zero
 c00ece8:	e0bfff17 	ldw	r2,-4(fp)
 c00ecec:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 c00ecf0:	e0bfff17 	ldw	r2,-4(fp)
 c00ecf4:	10800104 	addi	r2,r2,4
 c00ecf8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00ecfc:	0005303a 	rdctl	r2,status
 c00ed00:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00ed04:	e0fffd17 	ldw	r3,-12(fp)
 c00ed08:	00bfff84 	movi	r2,-2
 c00ed0c:	1884703a 	and	r2,r3,r2
 c00ed10:	1001703a 	wrctl	status,r2
  
  return context;
 c00ed14:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 c00ed18:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 c00ed1c:	c00f9480 	call	c00f948 <alt_tick>
 c00ed20:	e0bffc17 	ldw	r2,-16(fp)
 c00ed24:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00ed28:	e0bffe17 	ldw	r2,-8(fp)
 c00ed2c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 c00ed30:	0001883a 	nop
 c00ed34:	e037883a 	mov	sp,fp
 c00ed38:	dfc00117 	ldw	ra,4(sp)
 c00ed3c:	df000017 	ldw	fp,0(sp)
 c00ed40:	dec00204 	addi	sp,sp,8
 c00ed44:	f800283a 	ret

0c00ed48 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 c00ed48:	defff804 	addi	sp,sp,-32
 c00ed4c:	dfc00715 	stw	ra,28(sp)
 c00ed50:	df000615 	stw	fp,24(sp)
 c00ed54:	df000604 	addi	fp,sp,24
 c00ed58:	e13ffc15 	stw	r4,-16(fp)
 c00ed5c:	e17ffd15 	stw	r5,-12(fp)
 c00ed60:	e1bffe15 	stw	r6,-8(fp)
 c00ed64:	e1ffff15 	stw	r7,-4(fp)
 c00ed68:	e0bfff17 	ldw	r2,-4(fp)
 c00ed6c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 c00ed70:	d0a6da17 	ldw	r2,-25752(gp)
 c00ed74:	1000021e 	bne	r2,zero,c00ed80 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 c00ed78:	e0bffb17 	ldw	r2,-20(fp)
 c00ed7c:	d0a6da15 	stw	r2,-25752(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 c00ed80:	e0bffc17 	ldw	r2,-16(fp)
 c00ed84:	10800104 	addi	r2,r2,4
 c00ed88:	00c001c4 	movi	r3,7
 c00ed8c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 c00ed90:	d8000015 	stw	zero,0(sp)
 c00ed94:	e1fffc17 	ldw	r7,-16(fp)
 c00ed98:	01830074 	movhi	r6,3073
 c00ed9c:	31bb3404 	addi	r6,r6,-4912
 c00eda0:	e17ffe17 	ldw	r5,-8(fp)
 c00eda4:	e13ffd17 	ldw	r4,-12(fp)
 c00eda8:	c00f2280 	call	c00f228 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 c00edac:	0001883a 	nop
 c00edb0:	e037883a 	mov	sp,fp
 c00edb4:	dfc00117 	ldw	ra,4(sp)
 c00edb8:	df000017 	ldw	fp,0(sp)
 c00edbc:	dec00204 	addi	sp,sp,8
 c00edc0:	f800283a 	ret

0c00edc4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 c00edc4:	defff504 	addi	sp,sp,-44
 c00edc8:	df000a15 	stw	fp,40(sp)
 c00edcc:	df000a04 	addi	fp,sp,40
 c00edd0:	e13ffc15 	stw	r4,-16(fp)
 c00edd4:	e17ffd15 	stw	r5,-12(fp)
 c00edd8:	e1bffe15 	stw	r6,-8(fp)
 c00eddc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 c00ede0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c00ede4:	d0a6da17 	ldw	r2,-25752(gp)
  
  if (alt_ticks_per_second ())
 c00ede8:	10003c26 	beq	r2,zero,c00eedc <alt_alarm_start+0x118>
  {
    if (alarm)
 c00edec:	e0bffc17 	ldw	r2,-16(fp)
 c00edf0:	10003826 	beq	r2,zero,c00eed4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 c00edf4:	e0bffc17 	ldw	r2,-16(fp)
 c00edf8:	e0fffe17 	ldw	r3,-8(fp)
 c00edfc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 c00ee00:	e0bffc17 	ldw	r2,-16(fp)
 c00ee04:	e0ffff17 	ldw	r3,-4(fp)
 c00ee08:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00ee0c:	0005303a 	rdctl	r2,status
 c00ee10:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00ee14:	e0fff917 	ldw	r3,-28(fp)
 c00ee18:	00bfff84 	movi	r2,-2
 c00ee1c:	1884703a 	and	r2,r3,r2
 c00ee20:	1001703a 	wrctl	status,r2
  
  return context;
 c00ee24:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 c00ee28:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 c00ee2c:	d0a6db17 	ldw	r2,-25748(gp)
      
      current_nticks = alt_nticks();
 c00ee30:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 c00ee34:	e0fffd17 	ldw	r3,-12(fp)
 c00ee38:	e0bff617 	ldw	r2,-40(fp)
 c00ee3c:	1885883a 	add	r2,r3,r2
 c00ee40:	10c00044 	addi	r3,r2,1
 c00ee44:	e0bffc17 	ldw	r2,-16(fp)
 c00ee48:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 c00ee4c:	e0bffc17 	ldw	r2,-16(fp)
 c00ee50:	10c00217 	ldw	r3,8(r2)
 c00ee54:	e0bff617 	ldw	r2,-40(fp)
 c00ee58:	1880042e 	bgeu	r3,r2,c00ee6c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 c00ee5c:	e0bffc17 	ldw	r2,-16(fp)
 c00ee60:	00c00044 	movi	r3,1
 c00ee64:	10c00405 	stb	r3,16(r2)
 c00ee68:	00000206 	br	c00ee74 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 c00ee6c:	e0bffc17 	ldw	r2,-16(fp)
 c00ee70:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 c00ee74:	e0bffc17 	ldw	r2,-16(fp)
 c00ee78:	d0e01004 	addi	r3,gp,-32704
 c00ee7c:	e0fffa15 	stw	r3,-24(fp)
 c00ee80:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 c00ee84:	e0bffb17 	ldw	r2,-20(fp)
 c00ee88:	e0fffa17 	ldw	r3,-24(fp)
 c00ee8c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 c00ee90:	e0bffa17 	ldw	r2,-24(fp)
 c00ee94:	10c00017 	ldw	r3,0(r2)
 c00ee98:	e0bffb17 	ldw	r2,-20(fp)
 c00ee9c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 c00eea0:	e0bffa17 	ldw	r2,-24(fp)
 c00eea4:	10800017 	ldw	r2,0(r2)
 c00eea8:	e0fffb17 	ldw	r3,-20(fp)
 c00eeac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 c00eeb0:	e0bffa17 	ldw	r2,-24(fp)
 c00eeb4:	e0fffb17 	ldw	r3,-20(fp)
 c00eeb8:	10c00015 	stw	r3,0(r2)
 c00eebc:	e0bff817 	ldw	r2,-32(fp)
 c00eec0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00eec4:	e0bff717 	ldw	r2,-36(fp)
 c00eec8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 c00eecc:	0005883a 	mov	r2,zero
 c00eed0:	00000306 	br	c00eee0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 c00eed4:	00bffa84 	movi	r2,-22
 c00eed8:	00000106 	br	c00eee0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 c00eedc:	00bfde84 	movi	r2,-134
  }
}
 c00eee0:	e037883a 	mov	sp,fp
 c00eee4:	df000017 	ldw	fp,0(sp)
 c00eee8:	dec00104 	addi	sp,sp,4
 c00eeec:	f800283a 	ret

0c00eef0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 c00eef0:	defffa04 	addi	sp,sp,-24
 c00eef4:	dfc00515 	stw	ra,20(sp)
 c00eef8:	df000415 	stw	fp,16(sp)
 c00eefc:	df000404 	addi	fp,sp,16
 c00ef00:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 c00ef04:	00800244 	movi	r2,9
 c00ef08:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 c00ef0c:	014003f4 	movhi	r5,15
 c00ef10:	29509004 	addi	r5,r5,16960
 c00ef14:	e13ffd17 	ldw	r4,-12(fp)
 c00ef18:	c0009680 	call	c000968 <__mulsi3>
 c00ef1c:	100b883a 	mov	r5,r2
 c00ef20:	0100bef4 	movhi	r4,763
 c00ef24:	213c2004 	addi	r4,r4,-3968
 c00ef28:	c00ae740 	call	c00ae74 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 c00ef2c:	100b883a 	mov	r5,r2
 c00ef30:	01200034 	movhi	r4,32768
 c00ef34:	213fffc4 	addi	r4,r4,-1
 c00ef38:	c00ae740 	call	c00ae74 <__udivsi3>
 c00ef3c:	100b883a 	mov	r5,r2
 c00ef40:	e13fff17 	ldw	r4,-4(fp)
 c00ef44:	c00ae740 	call	c00ae74 <__udivsi3>
 c00ef48:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 c00ef4c:	e0bffe17 	ldw	r2,-8(fp)
 c00ef50:	10002a26 	beq	r2,zero,c00effc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 c00ef54:	e03ffc15 	stw	zero,-16(fp)
 c00ef58:	00001706 	br	c00efb8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 c00ef5c:	00a00034 	movhi	r2,32768
 c00ef60:	10bfffc4 	addi	r2,r2,-1
 c00ef64:	10bfffc4 	addi	r2,r2,-1
 c00ef68:	103ffe1e 	bne	r2,zero,c00ef64 <__alt_data_end+0xfc00ef64>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 c00ef6c:	014003f4 	movhi	r5,15
 c00ef70:	29509004 	addi	r5,r5,16960
 c00ef74:	e13ffd17 	ldw	r4,-12(fp)
 c00ef78:	c0009680 	call	c000968 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 c00ef7c:	100b883a 	mov	r5,r2
 c00ef80:	0100bef4 	movhi	r4,763
 c00ef84:	213c2004 	addi	r4,r4,-3968
 c00ef88:	c00ae740 	call	c00ae74 <__udivsi3>
 c00ef8c:	100b883a 	mov	r5,r2
 c00ef90:	01200034 	movhi	r4,32768
 c00ef94:	213fffc4 	addi	r4,r4,-1
 c00ef98:	c00ae740 	call	c00ae74 <__udivsi3>
 c00ef9c:	1007883a 	mov	r3,r2
 c00efa0:	e0bfff17 	ldw	r2,-4(fp)
 c00efa4:	10c5c83a 	sub	r2,r2,r3
 c00efa8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 c00efac:	e0bffc17 	ldw	r2,-16(fp)
 c00efb0:	10800044 	addi	r2,r2,1
 c00efb4:	e0bffc15 	stw	r2,-16(fp)
 c00efb8:	e0fffc17 	ldw	r3,-16(fp)
 c00efbc:	e0bffe17 	ldw	r2,-8(fp)
 c00efc0:	18bfe616 	blt	r3,r2,c00ef5c <__alt_data_end+0xfc00ef5c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 c00efc4:	014003f4 	movhi	r5,15
 c00efc8:	29509004 	addi	r5,r5,16960
 c00efcc:	e13ffd17 	ldw	r4,-12(fp)
 c00efd0:	c0009680 	call	c000968 <__mulsi3>
 c00efd4:	100b883a 	mov	r5,r2
 c00efd8:	0100bef4 	movhi	r4,763
 c00efdc:	213c2004 	addi	r4,r4,-3968
 c00efe0:	c00ae740 	call	c00ae74 <__udivsi3>
 c00efe4:	e17fff17 	ldw	r5,-4(fp)
 c00efe8:	1009883a 	mov	r4,r2
 c00efec:	c0009680 	call	c000968 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 c00eff0:	10bfffc4 	addi	r2,r2,-1
 c00eff4:	103ffe1e 	bne	r2,zero,c00eff0 <__alt_data_end+0xfc00eff0>
 c00eff8:	00000d06 	br	c00f030 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 c00effc:	014003f4 	movhi	r5,15
 c00f000:	29509004 	addi	r5,r5,16960
 c00f004:	e13ffd17 	ldw	r4,-12(fp)
 c00f008:	c0009680 	call	c000968 <__mulsi3>
 c00f00c:	100b883a 	mov	r5,r2
 c00f010:	0100bef4 	movhi	r4,763
 c00f014:	213c2004 	addi	r4,r4,-3968
 c00f018:	c00ae740 	call	c00ae74 <__udivsi3>
 c00f01c:	e17fff17 	ldw	r5,-4(fp)
 c00f020:	1009883a 	mov	r4,r2
 c00f024:	c0009680 	call	c000968 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 c00f028:	10bfffc4 	addi	r2,r2,-1
 c00f02c:	00bffe16 	blt	zero,r2,c00f028 <__alt_data_end+0xfc00f028>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 c00f030:	0005883a 	mov	r2,zero
}
 c00f034:	e037883a 	mov	sp,fp
 c00f038:	dfc00117 	ldw	ra,4(sp)
 c00f03c:	df000017 	ldw	fp,0(sp)
 c00f040:	dec00204 	addi	sp,sp,8
 c00f044:	f800283a 	ret

0c00f048 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 c00f048:	deffff04 	addi	sp,sp,-4
 c00f04c:	df000015 	stw	fp,0(sp)
 c00f050:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 c00f054:	0001883a 	nop
 c00f058:	e037883a 	mov	sp,fp
 c00f05c:	df000017 	ldw	fp,0(sp)
 c00f060:	dec00104 	addi	sp,sp,4
 c00f064:	f800283a 	ret

0c00f068 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c00f068:	defffe04 	addi	sp,sp,-8
 c00f06c:	dfc00115 	stw	ra,4(sp)
 c00f070:	df000015 	stw	fp,0(sp)
 c00f074:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c00f078:	d0a00d17 	ldw	r2,-32716(gp)
 c00f07c:	10000326 	beq	r2,zero,c00f08c <alt_get_errno+0x24>
 c00f080:	d0a00d17 	ldw	r2,-32716(gp)
 c00f084:	103ee83a 	callr	r2
 c00f088:	00000106 	br	c00f090 <alt_get_errno+0x28>
 c00f08c:	d0a6d504 	addi	r2,gp,-25772
}
 c00f090:	e037883a 	mov	sp,fp
 c00f094:	dfc00117 	ldw	ra,4(sp)
 c00f098:	df000017 	ldw	fp,0(sp)
 c00f09c:	dec00204 	addi	sp,sp,8
 c00f0a0:	f800283a 	ret

0c00f0a4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 c00f0a4:	defffa04 	addi	sp,sp,-24
 c00f0a8:	dfc00515 	stw	ra,20(sp)
 c00f0ac:	df000415 	stw	fp,16(sp)
 c00f0b0:	df000404 	addi	fp,sp,16
 c00f0b4:	e13ffe15 	stw	r4,-8(fp)
 c00f0b8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 c00f0bc:	e0bffe17 	ldw	r2,-8(fp)
 c00f0c0:	10000326 	beq	r2,zero,c00f0d0 <alt_dev_llist_insert+0x2c>
 c00f0c4:	e0bffe17 	ldw	r2,-8(fp)
 c00f0c8:	10800217 	ldw	r2,8(r2)
 c00f0cc:	1000061e 	bne	r2,zero,c00f0e8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 c00f0d0:	c00f0680 	call	c00f068 <alt_get_errno>
 c00f0d4:	1007883a 	mov	r3,r2
 c00f0d8:	00800584 	movi	r2,22
 c00f0dc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 c00f0e0:	00bffa84 	movi	r2,-22
 c00f0e4:	00001306 	br	c00f134 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 c00f0e8:	e0bffe17 	ldw	r2,-8(fp)
 c00f0ec:	e0ffff17 	ldw	r3,-4(fp)
 c00f0f0:	e0fffc15 	stw	r3,-16(fp)
 c00f0f4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 c00f0f8:	e0bffd17 	ldw	r2,-12(fp)
 c00f0fc:	e0fffc17 	ldw	r3,-16(fp)
 c00f100:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 c00f104:	e0bffc17 	ldw	r2,-16(fp)
 c00f108:	10c00017 	ldw	r3,0(r2)
 c00f10c:	e0bffd17 	ldw	r2,-12(fp)
 c00f110:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 c00f114:	e0bffc17 	ldw	r2,-16(fp)
 c00f118:	10800017 	ldw	r2,0(r2)
 c00f11c:	e0fffd17 	ldw	r3,-12(fp)
 c00f120:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 c00f124:	e0bffc17 	ldw	r2,-16(fp)
 c00f128:	e0fffd17 	ldw	r3,-12(fp)
 c00f12c:	10c00015 	stw	r3,0(r2)

  return 0;  
 c00f130:	0005883a 	mov	r2,zero
}
 c00f134:	e037883a 	mov	sp,fp
 c00f138:	dfc00117 	ldw	ra,4(sp)
 c00f13c:	df000017 	ldw	fp,0(sp)
 c00f140:	dec00204 	addi	sp,sp,8
 c00f144:	f800283a 	ret

0c00f148 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 c00f148:	defffd04 	addi	sp,sp,-12
 c00f14c:	dfc00215 	stw	ra,8(sp)
 c00f150:	df000115 	stw	fp,4(sp)
 c00f154:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 c00f158:	00830074 	movhi	r2,3073
 c00f15c:	10803f04 	addi	r2,r2,252
 c00f160:	e0bfff15 	stw	r2,-4(fp)
 c00f164:	00000606 	br	c00f180 <_do_ctors+0x38>
        (*ctor) (); 
 c00f168:	e0bfff17 	ldw	r2,-4(fp)
 c00f16c:	10800017 	ldw	r2,0(r2)
 c00f170:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 c00f174:	e0bfff17 	ldw	r2,-4(fp)
 c00f178:	10bfff04 	addi	r2,r2,-4
 c00f17c:	e0bfff15 	stw	r2,-4(fp)
 c00f180:	e0ffff17 	ldw	r3,-4(fp)
 c00f184:	00830074 	movhi	r2,3073
 c00f188:	10804004 	addi	r2,r2,256
 c00f18c:	18bff62e 	bgeu	r3,r2,c00f168 <__alt_data_end+0xfc00f168>
        (*ctor) (); 
}
 c00f190:	0001883a 	nop
 c00f194:	e037883a 	mov	sp,fp
 c00f198:	dfc00117 	ldw	ra,4(sp)
 c00f19c:	df000017 	ldw	fp,0(sp)
 c00f1a0:	dec00204 	addi	sp,sp,8
 c00f1a4:	f800283a 	ret

0c00f1a8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 c00f1a8:	defffd04 	addi	sp,sp,-12
 c00f1ac:	dfc00215 	stw	ra,8(sp)
 c00f1b0:	df000115 	stw	fp,4(sp)
 c00f1b4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 c00f1b8:	00830074 	movhi	r2,3073
 c00f1bc:	10803f04 	addi	r2,r2,252
 c00f1c0:	e0bfff15 	stw	r2,-4(fp)
 c00f1c4:	00000606 	br	c00f1e0 <_do_dtors+0x38>
        (*dtor) (); 
 c00f1c8:	e0bfff17 	ldw	r2,-4(fp)
 c00f1cc:	10800017 	ldw	r2,0(r2)
 c00f1d0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 c00f1d4:	e0bfff17 	ldw	r2,-4(fp)
 c00f1d8:	10bfff04 	addi	r2,r2,-4
 c00f1dc:	e0bfff15 	stw	r2,-4(fp)
 c00f1e0:	e0ffff17 	ldw	r3,-4(fp)
 c00f1e4:	00830074 	movhi	r2,3073
 c00f1e8:	10804004 	addi	r2,r2,256
 c00f1ec:	18bff62e 	bgeu	r3,r2,c00f1c8 <__alt_data_end+0xfc00f1c8>
        (*dtor) (); 
}
 c00f1f0:	0001883a 	nop
 c00f1f4:	e037883a 	mov	sp,fp
 c00f1f8:	dfc00117 	ldw	ra,4(sp)
 c00f1fc:	df000017 	ldw	fp,0(sp)
 c00f200:	dec00204 	addi	sp,sp,8
 c00f204:	f800283a 	ret

0c00f208 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 c00f208:	deffff04 	addi	sp,sp,-4
 c00f20c:	df000015 	stw	fp,0(sp)
 c00f210:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 c00f214:	0001883a 	nop
 c00f218:	e037883a 	mov	sp,fp
 c00f21c:	df000017 	ldw	fp,0(sp)
 c00f220:	dec00104 	addi	sp,sp,4
 c00f224:	f800283a 	ret

0c00f228 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 c00f228:	defff904 	addi	sp,sp,-28
 c00f22c:	dfc00615 	stw	ra,24(sp)
 c00f230:	df000515 	stw	fp,20(sp)
 c00f234:	df000504 	addi	fp,sp,20
 c00f238:	e13ffc15 	stw	r4,-16(fp)
 c00f23c:	e17ffd15 	stw	r5,-12(fp)
 c00f240:	e1bffe15 	stw	r6,-8(fp)
 c00f244:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 c00f248:	e0800217 	ldw	r2,8(fp)
 c00f24c:	d8800015 	stw	r2,0(sp)
 c00f250:	e1ffff17 	ldw	r7,-4(fp)
 c00f254:	e1bffe17 	ldw	r6,-8(fp)
 c00f258:	e17ffd17 	ldw	r5,-12(fp)
 c00f25c:	e13ffc17 	ldw	r4,-16(fp)
 c00f260:	c00f3d80 	call	c00f3d8 <alt_iic_isr_register>
}  
 c00f264:	e037883a 	mov	sp,fp
 c00f268:	dfc00117 	ldw	ra,4(sp)
 c00f26c:	df000017 	ldw	fp,0(sp)
 c00f270:	dec00204 	addi	sp,sp,8
 c00f274:	f800283a 	ret

0c00f278 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 c00f278:	defff904 	addi	sp,sp,-28
 c00f27c:	df000615 	stw	fp,24(sp)
 c00f280:	df000604 	addi	fp,sp,24
 c00f284:	e13ffe15 	stw	r4,-8(fp)
 c00f288:	e17fff15 	stw	r5,-4(fp)
 c00f28c:	e0bfff17 	ldw	r2,-4(fp)
 c00f290:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00f294:	0005303a 	rdctl	r2,status
 c00f298:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00f29c:	e0fffb17 	ldw	r3,-20(fp)
 c00f2a0:	00bfff84 	movi	r2,-2
 c00f2a4:	1884703a 	and	r2,r3,r2
 c00f2a8:	1001703a 	wrctl	status,r2
  
  return context;
 c00f2ac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 c00f2b0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 c00f2b4:	00c00044 	movi	r3,1
 c00f2b8:	e0bffa17 	ldw	r2,-24(fp)
 c00f2bc:	1884983a 	sll	r2,r3,r2
 c00f2c0:	1007883a 	mov	r3,r2
 c00f2c4:	d0a6d917 	ldw	r2,-25756(gp)
 c00f2c8:	1884b03a 	or	r2,r3,r2
 c00f2cc:	d0a6d915 	stw	r2,-25756(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 c00f2d0:	d0a6d917 	ldw	r2,-25756(gp)
 c00f2d4:	100170fa 	wrctl	ienable,r2
 c00f2d8:	e0bffc17 	ldw	r2,-16(fp)
 c00f2dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00f2e0:	e0bffd17 	ldw	r2,-12(fp)
 c00f2e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 c00f2e8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 c00f2ec:	0001883a 	nop
}
 c00f2f0:	e037883a 	mov	sp,fp
 c00f2f4:	df000017 	ldw	fp,0(sp)
 c00f2f8:	dec00104 	addi	sp,sp,4
 c00f2fc:	f800283a 	ret

0c00f300 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 c00f300:	defff904 	addi	sp,sp,-28
 c00f304:	df000615 	stw	fp,24(sp)
 c00f308:	df000604 	addi	fp,sp,24
 c00f30c:	e13ffe15 	stw	r4,-8(fp)
 c00f310:	e17fff15 	stw	r5,-4(fp)
 c00f314:	e0bfff17 	ldw	r2,-4(fp)
 c00f318:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00f31c:	0005303a 	rdctl	r2,status
 c00f320:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00f324:	e0fffb17 	ldw	r3,-20(fp)
 c00f328:	00bfff84 	movi	r2,-2
 c00f32c:	1884703a 	and	r2,r3,r2
 c00f330:	1001703a 	wrctl	status,r2
  
  return context;
 c00f334:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 c00f338:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 c00f33c:	00c00044 	movi	r3,1
 c00f340:	e0bffa17 	ldw	r2,-24(fp)
 c00f344:	1884983a 	sll	r2,r3,r2
 c00f348:	0084303a 	nor	r2,zero,r2
 c00f34c:	1007883a 	mov	r3,r2
 c00f350:	d0a6d917 	ldw	r2,-25756(gp)
 c00f354:	1884703a 	and	r2,r3,r2
 c00f358:	d0a6d915 	stw	r2,-25756(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 c00f35c:	d0a6d917 	ldw	r2,-25756(gp)
 c00f360:	100170fa 	wrctl	ienable,r2
 c00f364:	e0bffc17 	ldw	r2,-16(fp)
 c00f368:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00f36c:	e0bffd17 	ldw	r2,-12(fp)
 c00f370:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 c00f374:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 c00f378:	0001883a 	nop
}
 c00f37c:	e037883a 	mov	sp,fp
 c00f380:	df000017 	ldw	fp,0(sp)
 c00f384:	dec00104 	addi	sp,sp,4
 c00f388:	f800283a 	ret

0c00f38c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 c00f38c:	defffc04 	addi	sp,sp,-16
 c00f390:	df000315 	stw	fp,12(sp)
 c00f394:	df000304 	addi	fp,sp,12
 c00f398:	e13ffe15 	stw	r4,-8(fp)
 c00f39c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 c00f3a0:	000530fa 	rdctl	r2,ienable
 c00f3a4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 c00f3a8:	00c00044 	movi	r3,1
 c00f3ac:	e0bfff17 	ldw	r2,-4(fp)
 c00f3b0:	1884983a 	sll	r2,r3,r2
 c00f3b4:	1007883a 	mov	r3,r2
 c00f3b8:	e0bffd17 	ldw	r2,-12(fp)
 c00f3bc:	1884703a 	and	r2,r3,r2
 c00f3c0:	1004c03a 	cmpne	r2,r2,zero
 c00f3c4:	10803fcc 	andi	r2,r2,255
}
 c00f3c8:	e037883a 	mov	sp,fp
 c00f3cc:	df000017 	ldw	fp,0(sp)
 c00f3d0:	dec00104 	addi	sp,sp,4
 c00f3d4:	f800283a 	ret

0c00f3d8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 c00f3d8:	defff504 	addi	sp,sp,-44
 c00f3dc:	dfc00a15 	stw	ra,40(sp)
 c00f3e0:	df000915 	stw	fp,36(sp)
 c00f3e4:	df000904 	addi	fp,sp,36
 c00f3e8:	e13ffc15 	stw	r4,-16(fp)
 c00f3ec:	e17ffd15 	stw	r5,-12(fp)
 c00f3f0:	e1bffe15 	stw	r6,-8(fp)
 c00f3f4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 c00f3f8:	00bffa84 	movi	r2,-22
 c00f3fc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 c00f400:	e0bffd17 	ldw	r2,-12(fp)
 c00f404:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 c00f408:	e0bff817 	ldw	r2,-32(fp)
 c00f40c:	10800808 	cmpgei	r2,r2,32
 c00f410:	1000271e 	bne	r2,zero,c00f4b0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00f414:	0005303a 	rdctl	r2,status
 c00f418:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00f41c:	e0fffb17 	ldw	r3,-20(fp)
 c00f420:	00bfff84 	movi	r2,-2
 c00f424:	1884703a 	and	r2,r3,r2
 c00f428:	1001703a 	wrctl	status,r2
  
  return context;
 c00f42c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 c00f430:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 c00f434:	00830074 	movhi	r2,3073
 c00f438:	108ed804 	addi	r2,r2,15200
 c00f43c:	e0fff817 	ldw	r3,-32(fp)
 c00f440:	180690fa 	slli	r3,r3,3
 c00f444:	10c5883a 	add	r2,r2,r3
 c00f448:	e0fffe17 	ldw	r3,-8(fp)
 c00f44c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 c00f450:	00830074 	movhi	r2,3073
 c00f454:	108ed804 	addi	r2,r2,15200
 c00f458:	e0fff817 	ldw	r3,-32(fp)
 c00f45c:	180690fa 	slli	r3,r3,3
 c00f460:	10c5883a 	add	r2,r2,r3
 c00f464:	10800104 	addi	r2,r2,4
 c00f468:	e0ffff17 	ldw	r3,-4(fp)
 c00f46c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 c00f470:	e0bffe17 	ldw	r2,-8(fp)
 c00f474:	10000526 	beq	r2,zero,c00f48c <alt_iic_isr_register+0xb4>
 c00f478:	e0bff817 	ldw	r2,-32(fp)
 c00f47c:	100b883a 	mov	r5,r2
 c00f480:	e13ffc17 	ldw	r4,-16(fp)
 c00f484:	c00f2780 	call	c00f278 <alt_ic_irq_enable>
 c00f488:	00000406 	br	c00f49c <alt_iic_isr_register+0xc4>
 c00f48c:	e0bff817 	ldw	r2,-32(fp)
 c00f490:	100b883a 	mov	r5,r2
 c00f494:	e13ffc17 	ldw	r4,-16(fp)
 c00f498:	c00f3000 	call	c00f300 <alt_ic_irq_disable>
 c00f49c:	e0bff715 	stw	r2,-36(fp)
 c00f4a0:	e0bffa17 	ldw	r2,-24(fp)
 c00f4a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00f4a8:	e0bff917 	ldw	r2,-28(fp)
 c00f4ac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 c00f4b0:	e0bff717 	ldw	r2,-36(fp)
}
 c00f4b4:	e037883a 	mov	sp,fp
 c00f4b8:	dfc00117 	ldw	ra,4(sp)
 c00f4bc:	df000017 	ldw	fp,0(sp)
 c00f4c0:	dec00204 	addi	sp,sp,8
 c00f4c4:	f800283a 	ret

0c00f4c8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 c00f4c8:	defff804 	addi	sp,sp,-32
 c00f4cc:	dfc00715 	stw	ra,28(sp)
 c00f4d0:	df000615 	stw	fp,24(sp)
 c00f4d4:	dc000515 	stw	r16,20(sp)
 c00f4d8:	df000604 	addi	fp,sp,24
 c00f4dc:	e13ffb15 	stw	r4,-20(fp)
 c00f4e0:	e17ffc15 	stw	r5,-16(fp)
 c00f4e4:	e1bffd15 	stw	r6,-12(fp)
 c00f4e8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 c00f4ec:	e1bffe17 	ldw	r6,-8(fp)
 c00f4f0:	e17ffd17 	ldw	r5,-12(fp)
 c00f4f4:	e13ffc17 	ldw	r4,-16(fp)
 c00f4f8:	c00f7500 	call	c00f750 <open>
 c00f4fc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 c00f500:	e0bffa17 	ldw	r2,-24(fp)
 c00f504:	10002216 	blt	r2,zero,c00f590 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 c00f508:	04030074 	movhi	r16,3073
 c00f50c:	84037904 	addi	r16,r16,3556
 c00f510:	e0bffa17 	ldw	r2,-24(fp)
 c00f514:	01400304 	movi	r5,12
 c00f518:	1009883a 	mov	r4,r2
 c00f51c:	c0009680 	call	c000968 <__mulsi3>
 c00f520:	8085883a 	add	r2,r16,r2
 c00f524:	10c00017 	ldw	r3,0(r2)
 c00f528:	e0bffb17 	ldw	r2,-20(fp)
 c00f52c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 c00f530:	04030074 	movhi	r16,3073
 c00f534:	84037904 	addi	r16,r16,3556
 c00f538:	e0bffa17 	ldw	r2,-24(fp)
 c00f53c:	01400304 	movi	r5,12
 c00f540:	1009883a 	mov	r4,r2
 c00f544:	c0009680 	call	c000968 <__mulsi3>
 c00f548:	8085883a 	add	r2,r16,r2
 c00f54c:	10800104 	addi	r2,r2,4
 c00f550:	10c00017 	ldw	r3,0(r2)
 c00f554:	e0bffb17 	ldw	r2,-20(fp)
 c00f558:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 c00f55c:	04030074 	movhi	r16,3073
 c00f560:	84037904 	addi	r16,r16,3556
 c00f564:	e0bffa17 	ldw	r2,-24(fp)
 c00f568:	01400304 	movi	r5,12
 c00f56c:	1009883a 	mov	r4,r2
 c00f570:	c0009680 	call	c000968 <__mulsi3>
 c00f574:	8085883a 	add	r2,r16,r2
 c00f578:	10800204 	addi	r2,r2,8
 c00f57c:	10c00017 	ldw	r3,0(r2)
 c00f580:	e0bffb17 	ldw	r2,-20(fp)
 c00f584:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 c00f588:	e13ffa17 	ldw	r4,-24(fp)
 c00f58c:	c00def80 	call	c00def8 <alt_release_fd>
  }
} 
 c00f590:	0001883a 	nop
 c00f594:	e6ffff04 	addi	sp,fp,-4
 c00f598:	dfc00217 	ldw	ra,8(sp)
 c00f59c:	df000117 	ldw	fp,4(sp)
 c00f5a0:	dc000017 	ldw	r16,0(sp)
 c00f5a4:	dec00304 	addi	sp,sp,12
 c00f5a8:	f800283a 	ret

0c00f5ac <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 c00f5ac:	defffb04 	addi	sp,sp,-20
 c00f5b0:	dfc00415 	stw	ra,16(sp)
 c00f5b4:	df000315 	stw	fp,12(sp)
 c00f5b8:	df000304 	addi	fp,sp,12
 c00f5bc:	e13ffd15 	stw	r4,-12(fp)
 c00f5c0:	e17ffe15 	stw	r5,-8(fp)
 c00f5c4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 c00f5c8:	01c07fc4 	movi	r7,511
 c00f5cc:	01800044 	movi	r6,1
 c00f5d0:	e17ffd17 	ldw	r5,-12(fp)
 c00f5d4:	01030074 	movhi	r4,3073
 c00f5d8:	21037c04 	addi	r4,r4,3568
 c00f5dc:	c00f4c80 	call	c00f4c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 c00f5e0:	01c07fc4 	movi	r7,511
 c00f5e4:	000d883a 	mov	r6,zero
 c00f5e8:	e17ffe17 	ldw	r5,-8(fp)
 c00f5ec:	01030074 	movhi	r4,3073
 c00f5f0:	21037904 	addi	r4,r4,3556
 c00f5f4:	c00f4c80 	call	c00f4c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 c00f5f8:	01c07fc4 	movi	r7,511
 c00f5fc:	01800044 	movi	r6,1
 c00f600:	e17fff17 	ldw	r5,-4(fp)
 c00f604:	01030074 	movhi	r4,3073
 c00f608:	21037f04 	addi	r4,r4,3580
 c00f60c:	c00f4c80 	call	c00f4c8 <alt_open_fd>
}  
 c00f610:	0001883a 	nop
 c00f614:	e037883a 	mov	sp,fp
 c00f618:	dfc00117 	ldw	ra,4(sp)
 c00f61c:	df000017 	ldw	fp,0(sp)
 c00f620:	dec00204 	addi	sp,sp,8
 c00f624:	f800283a 	ret

0c00f628 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c00f628:	defffe04 	addi	sp,sp,-8
 c00f62c:	dfc00115 	stw	ra,4(sp)
 c00f630:	df000015 	stw	fp,0(sp)
 c00f634:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c00f638:	d0a00d17 	ldw	r2,-32716(gp)
 c00f63c:	10000326 	beq	r2,zero,c00f64c <alt_get_errno+0x24>
 c00f640:	d0a00d17 	ldw	r2,-32716(gp)
 c00f644:	103ee83a 	callr	r2
 c00f648:	00000106 	br	c00f650 <alt_get_errno+0x28>
 c00f64c:	d0a6d504 	addi	r2,gp,-25772
}
 c00f650:	e037883a 	mov	sp,fp
 c00f654:	dfc00117 	ldw	ra,4(sp)
 c00f658:	df000017 	ldw	fp,0(sp)
 c00f65c:	dec00204 	addi	sp,sp,8
 c00f660:	f800283a 	ret

0c00f664 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 c00f664:	defffb04 	addi	sp,sp,-20
 c00f668:	dfc00415 	stw	ra,16(sp)
 c00f66c:	df000315 	stw	fp,12(sp)
 c00f670:	dc000215 	stw	r16,8(sp)
 c00f674:	df000304 	addi	fp,sp,12
 c00f678:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 c00f67c:	e0bffe17 	ldw	r2,-8(fp)
 c00f680:	10800217 	ldw	r2,8(r2)
 c00f684:	10d00034 	orhi	r3,r2,16384
 c00f688:	e0bffe17 	ldw	r2,-8(fp)
 c00f68c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 c00f690:	e03ffd15 	stw	zero,-12(fp)
 c00f694:	00002306 	br	c00f724 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 c00f698:	04030074 	movhi	r16,3073
 c00f69c:	84037904 	addi	r16,r16,3556
 c00f6a0:	e0bffd17 	ldw	r2,-12(fp)
 c00f6a4:	01400304 	movi	r5,12
 c00f6a8:	1009883a 	mov	r4,r2
 c00f6ac:	c0009680 	call	c000968 <__mulsi3>
 c00f6b0:	8085883a 	add	r2,r16,r2
 c00f6b4:	10c00017 	ldw	r3,0(r2)
 c00f6b8:	e0bffe17 	ldw	r2,-8(fp)
 c00f6bc:	10800017 	ldw	r2,0(r2)
 c00f6c0:	1880151e 	bne	r3,r2,c00f718 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 c00f6c4:	04030074 	movhi	r16,3073
 c00f6c8:	84037904 	addi	r16,r16,3556
 c00f6cc:	e0bffd17 	ldw	r2,-12(fp)
 c00f6d0:	01400304 	movi	r5,12
 c00f6d4:	1009883a 	mov	r4,r2
 c00f6d8:	c0009680 	call	c000968 <__mulsi3>
 c00f6dc:	8085883a 	add	r2,r16,r2
 c00f6e0:	10800204 	addi	r2,r2,8
 c00f6e4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 c00f6e8:	10000b0e 	bge	r2,zero,c00f718 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 c00f6ec:	01400304 	movi	r5,12
 c00f6f0:	e13ffd17 	ldw	r4,-12(fp)
 c00f6f4:	c0009680 	call	c000968 <__mulsi3>
 c00f6f8:	1007883a 	mov	r3,r2
 c00f6fc:	00830074 	movhi	r2,3073
 c00f700:	10837904 	addi	r2,r2,3556
 c00f704:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 c00f708:	e0bffe17 	ldw	r2,-8(fp)
 c00f70c:	18800226 	beq	r3,r2,c00f718 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 c00f710:	00bffcc4 	movi	r2,-13
 c00f714:	00000806 	br	c00f738 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 c00f718:	e0bffd17 	ldw	r2,-12(fp)
 c00f71c:	10800044 	addi	r2,r2,1
 c00f720:	e0bffd15 	stw	r2,-12(fp)
 c00f724:	d0a00c17 	ldw	r2,-32720(gp)
 c00f728:	1007883a 	mov	r3,r2
 c00f72c:	e0bffd17 	ldw	r2,-12(fp)
 c00f730:	18bfd92e 	bgeu	r3,r2,c00f698 <__alt_data_end+0xfc00f698>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 c00f734:	0005883a 	mov	r2,zero
}
 c00f738:	e6ffff04 	addi	sp,fp,-4
 c00f73c:	dfc00217 	ldw	ra,8(sp)
 c00f740:	df000117 	ldw	fp,4(sp)
 c00f744:	dc000017 	ldw	r16,0(sp)
 c00f748:	dec00304 	addi	sp,sp,12
 c00f74c:	f800283a 	ret

0c00f750 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 c00f750:	defff604 	addi	sp,sp,-40
 c00f754:	dfc00915 	stw	ra,36(sp)
 c00f758:	df000815 	stw	fp,32(sp)
 c00f75c:	df000804 	addi	fp,sp,32
 c00f760:	e13ffd15 	stw	r4,-12(fp)
 c00f764:	e17ffe15 	stw	r5,-8(fp)
 c00f768:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 c00f76c:	00bfffc4 	movi	r2,-1
 c00f770:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 c00f774:	00bffb44 	movi	r2,-19
 c00f778:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 c00f77c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 c00f780:	d1600a04 	addi	r5,gp,-32728
 c00f784:	e13ffd17 	ldw	r4,-12(fp)
 c00f788:	c00fa740 	call	c00fa74 <alt_find_dev>
 c00f78c:	e0bff815 	stw	r2,-32(fp)
 c00f790:	e0bff817 	ldw	r2,-32(fp)
 c00f794:	1000051e 	bne	r2,zero,c00f7ac <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 c00f798:	e13ffd17 	ldw	r4,-12(fp)
 c00f79c:	c00fb040 	call	c00fb04 <alt_find_file>
 c00f7a0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 c00f7a4:	00800044 	movi	r2,1
 c00f7a8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 c00f7ac:	e0bff817 	ldw	r2,-32(fp)
 c00f7b0:	10002b26 	beq	r2,zero,c00f860 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 c00f7b4:	e13ff817 	ldw	r4,-32(fp)
 c00f7b8:	c00fc0c0 	call	c00fc0c <alt_get_fd>
 c00f7bc:	e0bff915 	stw	r2,-28(fp)
 c00f7c0:	e0bff917 	ldw	r2,-28(fp)
 c00f7c4:	1000030e 	bge	r2,zero,c00f7d4 <open+0x84>
    {
      status = index;
 c00f7c8:	e0bff917 	ldw	r2,-28(fp)
 c00f7cc:	e0bffa15 	stw	r2,-24(fp)
 c00f7d0:	00002506 	br	c00f868 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 c00f7d4:	01400304 	movi	r5,12
 c00f7d8:	e13ff917 	ldw	r4,-28(fp)
 c00f7dc:	c0009680 	call	c000968 <__mulsi3>
 c00f7e0:	1007883a 	mov	r3,r2
 c00f7e4:	00830074 	movhi	r2,3073
 c00f7e8:	10837904 	addi	r2,r2,3556
 c00f7ec:	1885883a 	add	r2,r3,r2
 c00f7f0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 c00f7f4:	e0fffe17 	ldw	r3,-8(fp)
 c00f7f8:	00900034 	movhi	r2,16384
 c00f7fc:	10bfffc4 	addi	r2,r2,-1
 c00f800:	1886703a 	and	r3,r3,r2
 c00f804:	e0bffc17 	ldw	r2,-16(fp)
 c00f808:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 c00f80c:	e0bffb17 	ldw	r2,-20(fp)
 c00f810:	1000051e 	bne	r2,zero,c00f828 <open+0xd8>
 c00f814:	e13ffc17 	ldw	r4,-16(fp)
 c00f818:	c00f6640 	call	c00f664 <alt_file_locked>
 c00f81c:	e0bffa15 	stw	r2,-24(fp)
 c00f820:	e0bffa17 	ldw	r2,-24(fp)
 c00f824:	10001016 	blt	r2,zero,c00f868 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 c00f828:	e0bff817 	ldw	r2,-32(fp)
 c00f82c:	10800317 	ldw	r2,12(r2)
 c00f830:	10000826 	beq	r2,zero,c00f854 <open+0x104>
 c00f834:	e0bff817 	ldw	r2,-32(fp)
 c00f838:	10800317 	ldw	r2,12(r2)
 c00f83c:	e1ffff17 	ldw	r7,-4(fp)
 c00f840:	e1bffe17 	ldw	r6,-8(fp)
 c00f844:	e17ffd17 	ldw	r5,-12(fp)
 c00f848:	e13ffc17 	ldw	r4,-16(fp)
 c00f84c:	103ee83a 	callr	r2
 c00f850:	00000106 	br	c00f858 <open+0x108>
 c00f854:	0005883a 	mov	r2,zero
 c00f858:	e0bffa15 	stw	r2,-24(fp)
 c00f85c:	00000206 	br	c00f868 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 c00f860:	00bffb44 	movi	r2,-19
 c00f864:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 c00f868:	e0bffa17 	ldw	r2,-24(fp)
 c00f86c:	1000090e 	bge	r2,zero,c00f894 <open+0x144>
  {
    alt_release_fd (index);  
 c00f870:	e13ff917 	ldw	r4,-28(fp)
 c00f874:	c00def80 	call	c00def8 <alt_release_fd>
    ALT_ERRNO = -status;
 c00f878:	c00f6280 	call	c00f628 <alt_get_errno>
 c00f87c:	1007883a 	mov	r3,r2
 c00f880:	e0bffa17 	ldw	r2,-24(fp)
 c00f884:	0085c83a 	sub	r2,zero,r2
 c00f888:	18800015 	stw	r2,0(r3)
    return -1;
 c00f88c:	00bfffc4 	movi	r2,-1
 c00f890:	00000106 	br	c00f898 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 c00f894:	e0bff917 	ldw	r2,-28(fp)
}
 c00f898:	e037883a 	mov	sp,fp
 c00f89c:	dfc00117 	ldw	ra,4(sp)
 c00f8a0:	df000017 	ldw	fp,0(sp)
 c00f8a4:	dec00204 	addi	sp,sp,8
 c00f8a8:	f800283a 	ret

0c00f8ac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 c00f8ac:	defffa04 	addi	sp,sp,-24
 c00f8b0:	df000515 	stw	fp,20(sp)
 c00f8b4:	df000504 	addi	fp,sp,20
 c00f8b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00f8bc:	0005303a 	rdctl	r2,status
 c00f8c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00f8c4:	e0fffc17 	ldw	r3,-16(fp)
 c00f8c8:	00bfff84 	movi	r2,-2
 c00f8cc:	1884703a 	and	r2,r3,r2
 c00f8d0:	1001703a 	wrctl	status,r2
  
  return context;
 c00f8d4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 c00f8d8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 c00f8dc:	e0bfff17 	ldw	r2,-4(fp)
 c00f8e0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 c00f8e4:	e0bffd17 	ldw	r2,-12(fp)
 c00f8e8:	10800017 	ldw	r2,0(r2)
 c00f8ec:	e0fffd17 	ldw	r3,-12(fp)
 c00f8f0:	18c00117 	ldw	r3,4(r3)
 c00f8f4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 c00f8f8:	e0bffd17 	ldw	r2,-12(fp)
 c00f8fc:	10800117 	ldw	r2,4(r2)
 c00f900:	e0fffd17 	ldw	r3,-12(fp)
 c00f904:	18c00017 	ldw	r3,0(r3)
 c00f908:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 c00f90c:	e0bffd17 	ldw	r2,-12(fp)
 c00f910:	e0fffd17 	ldw	r3,-12(fp)
 c00f914:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 c00f918:	e0bffd17 	ldw	r2,-12(fp)
 c00f91c:	e0fffd17 	ldw	r3,-12(fp)
 c00f920:	10c00015 	stw	r3,0(r2)
 c00f924:	e0bffb17 	ldw	r2,-20(fp)
 c00f928:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00f92c:	e0bffe17 	ldw	r2,-8(fp)
 c00f930:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 c00f934:	0001883a 	nop
 c00f938:	e037883a 	mov	sp,fp
 c00f93c:	df000017 	ldw	fp,0(sp)
 c00f940:	dec00104 	addi	sp,sp,4
 c00f944:	f800283a 	ret

0c00f948 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 c00f948:	defffb04 	addi	sp,sp,-20
 c00f94c:	dfc00415 	stw	ra,16(sp)
 c00f950:	df000315 	stw	fp,12(sp)
 c00f954:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 c00f958:	d0a01017 	ldw	r2,-32704(gp)
 c00f95c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 c00f960:	d0a6db17 	ldw	r2,-25748(gp)
 c00f964:	10800044 	addi	r2,r2,1
 c00f968:	d0a6db15 	stw	r2,-25748(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 c00f96c:	00002e06 	br	c00fa28 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 c00f970:	e0bffd17 	ldw	r2,-12(fp)
 c00f974:	10800017 	ldw	r2,0(r2)
 c00f978:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 c00f97c:	e0bffd17 	ldw	r2,-12(fp)
 c00f980:	10800403 	ldbu	r2,16(r2)
 c00f984:	10803fcc 	andi	r2,r2,255
 c00f988:	10000426 	beq	r2,zero,c00f99c <alt_tick+0x54>
 c00f98c:	d0a6db17 	ldw	r2,-25748(gp)
 c00f990:	1000021e 	bne	r2,zero,c00f99c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 c00f994:	e0bffd17 	ldw	r2,-12(fp)
 c00f998:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 c00f99c:	e0bffd17 	ldw	r2,-12(fp)
 c00f9a0:	10800217 	ldw	r2,8(r2)
 c00f9a4:	d0e6db17 	ldw	r3,-25748(gp)
 c00f9a8:	18801d36 	bltu	r3,r2,c00fa20 <alt_tick+0xd8>
 c00f9ac:	e0bffd17 	ldw	r2,-12(fp)
 c00f9b0:	10800403 	ldbu	r2,16(r2)
 c00f9b4:	10803fcc 	andi	r2,r2,255
 c00f9b8:	1000191e 	bne	r2,zero,c00fa20 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 c00f9bc:	e0bffd17 	ldw	r2,-12(fp)
 c00f9c0:	10800317 	ldw	r2,12(r2)
 c00f9c4:	e0fffd17 	ldw	r3,-12(fp)
 c00f9c8:	18c00517 	ldw	r3,20(r3)
 c00f9cc:	1809883a 	mov	r4,r3
 c00f9d0:	103ee83a 	callr	r2
 c00f9d4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 c00f9d8:	e0bfff17 	ldw	r2,-4(fp)
 c00f9dc:	1000031e 	bne	r2,zero,c00f9ec <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 c00f9e0:	e13ffd17 	ldw	r4,-12(fp)
 c00f9e4:	c00f8ac0 	call	c00f8ac <alt_alarm_stop>
 c00f9e8:	00000d06 	br	c00fa20 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 c00f9ec:	e0bffd17 	ldw	r2,-12(fp)
 c00f9f0:	10c00217 	ldw	r3,8(r2)
 c00f9f4:	e0bfff17 	ldw	r2,-4(fp)
 c00f9f8:	1887883a 	add	r3,r3,r2
 c00f9fc:	e0bffd17 	ldw	r2,-12(fp)
 c00fa00:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 c00fa04:	e0bffd17 	ldw	r2,-12(fp)
 c00fa08:	10c00217 	ldw	r3,8(r2)
 c00fa0c:	d0a6db17 	ldw	r2,-25748(gp)
 c00fa10:	1880032e 	bgeu	r3,r2,c00fa20 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 c00fa14:	e0bffd17 	ldw	r2,-12(fp)
 c00fa18:	00c00044 	movi	r3,1
 c00fa1c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 c00fa20:	e0bffe17 	ldw	r2,-8(fp)
 c00fa24:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 c00fa28:	e0fffd17 	ldw	r3,-12(fp)
 c00fa2c:	d0a01004 	addi	r2,gp,-32704
 c00fa30:	18bfcf1e 	bne	r3,r2,c00f970 <__alt_data_end+0xfc00f970>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 c00fa34:	0001883a 	nop
}
 c00fa38:	0001883a 	nop
 c00fa3c:	e037883a 	mov	sp,fp
 c00fa40:	dfc00117 	ldw	ra,4(sp)
 c00fa44:	df000017 	ldw	fp,0(sp)
 c00fa48:	dec00204 	addi	sp,sp,8
 c00fa4c:	f800283a 	ret

0c00fa50 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 c00fa50:	deffff04 	addi	sp,sp,-4
 c00fa54:	df000015 	stw	fp,0(sp)
 c00fa58:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 c00fa5c:	000170fa 	wrctl	ienable,zero
}
 c00fa60:	0001883a 	nop
 c00fa64:	e037883a 	mov	sp,fp
 c00fa68:	df000017 	ldw	fp,0(sp)
 c00fa6c:	dec00104 	addi	sp,sp,4
 c00fa70:	f800283a 	ret

0c00fa74 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 c00fa74:	defffa04 	addi	sp,sp,-24
 c00fa78:	dfc00515 	stw	ra,20(sp)
 c00fa7c:	df000415 	stw	fp,16(sp)
 c00fa80:	df000404 	addi	fp,sp,16
 c00fa84:	e13ffe15 	stw	r4,-8(fp)
 c00fa88:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 c00fa8c:	e0bfff17 	ldw	r2,-4(fp)
 c00fa90:	10800017 	ldw	r2,0(r2)
 c00fa94:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 c00fa98:	e13ffe17 	ldw	r4,-8(fp)
 c00fa9c:	c0075580 	call	c007558 <strlen>
 c00faa0:	10800044 	addi	r2,r2,1
 c00faa4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 c00faa8:	00000d06 	br	c00fae0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 c00faac:	e0bffc17 	ldw	r2,-16(fp)
 c00fab0:	10800217 	ldw	r2,8(r2)
 c00fab4:	e0fffd17 	ldw	r3,-12(fp)
 c00fab8:	180d883a 	mov	r6,r3
 c00fabc:	e17ffe17 	ldw	r5,-8(fp)
 c00fac0:	1009883a 	mov	r4,r2
 c00fac4:	c00fdb80 	call	c00fdb8 <memcmp>
 c00fac8:	1000021e 	bne	r2,zero,c00fad4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 c00facc:	e0bffc17 	ldw	r2,-16(fp)
 c00fad0:	00000706 	br	c00faf0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 c00fad4:	e0bffc17 	ldw	r2,-16(fp)
 c00fad8:	10800017 	ldw	r2,0(r2)
 c00fadc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 c00fae0:	e0fffc17 	ldw	r3,-16(fp)
 c00fae4:	e0bfff17 	ldw	r2,-4(fp)
 c00fae8:	18bff01e 	bne	r3,r2,c00faac <__alt_data_end+0xfc00faac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 c00faec:	0005883a 	mov	r2,zero
}
 c00faf0:	e037883a 	mov	sp,fp
 c00faf4:	dfc00117 	ldw	ra,4(sp)
 c00faf8:	df000017 	ldw	fp,0(sp)
 c00fafc:	dec00204 	addi	sp,sp,8
 c00fb00:	f800283a 	ret

0c00fb04 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 c00fb04:	defffb04 	addi	sp,sp,-20
 c00fb08:	dfc00415 	stw	ra,16(sp)
 c00fb0c:	df000315 	stw	fp,12(sp)
 c00fb10:	df000304 	addi	fp,sp,12
 c00fb14:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 c00fb18:	d0a00817 	ldw	r2,-32736(gp)
 c00fb1c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 c00fb20:	00003106 	br	c00fbe8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 c00fb24:	e0bffd17 	ldw	r2,-12(fp)
 c00fb28:	10800217 	ldw	r2,8(r2)
 c00fb2c:	1009883a 	mov	r4,r2
 c00fb30:	c0075580 	call	c007558 <strlen>
 c00fb34:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 c00fb38:	e0bffd17 	ldw	r2,-12(fp)
 c00fb3c:	10c00217 	ldw	r3,8(r2)
 c00fb40:	e0bffe17 	ldw	r2,-8(fp)
 c00fb44:	10bfffc4 	addi	r2,r2,-1
 c00fb48:	1885883a 	add	r2,r3,r2
 c00fb4c:	10800003 	ldbu	r2,0(r2)
 c00fb50:	10803fcc 	andi	r2,r2,255
 c00fb54:	1080201c 	xori	r2,r2,128
 c00fb58:	10bfe004 	addi	r2,r2,-128
 c00fb5c:	10800bd8 	cmpnei	r2,r2,47
 c00fb60:	1000031e 	bne	r2,zero,c00fb70 <alt_find_file+0x6c>
    {
      len -= 1;
 c00fb64:	e0bffe17 	ldw	r2,-8(fp)
 c00fb68:	10bfffc4 	addi	r2,r2,-1
 c00fb6c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 c00fb70:	e0bffe17 	ldw	r2,-8(fp)
 c00fb74:	e0ffff17 	ldw	r3,-4(fp)
 c00fb78:	1885883a 	add	r2,r3,r2
 c00fb7c:	10800003 	ldbu	r2,0(r2)
 c00fb80:	10803fcc 	andi	r2,r2,255
 c00fb84:	1080201c 	xori	r2,r2,128
 c00fb88:	10bfe004 	addi	r2,r2,-128
 c00fb8c:	10800be0 	cmpeqi	r2,r2,47
 c00fb90:	1000081e 	bne	r2,zero,c00fbb4 <alt_find_file+0xb0>
 c00fb94:	e0bffe17 	ldw	r2,-8(fp)
 c00fb98:	e0ffff17 	ldw	r3,-4(fp)
 c00fb9c:	1885883a 	add	r2,r3,r2
 c00fba0:	10800003 	ldbu	r2,0(r2)
 c00fba4:	10803fcc 	andi	r2,r2,255
 c00fba8:	1080201c 	xori	r2,r2,128
 c00fbac:	10bfe004 	addi	r2,r2,-128
 c00fbb0:	10000a1e 	bne	r2,zero,c00fbdc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 c00fbb4:	e0bffd17 	ldw	r2,-12(fp)
 c00fbb8:	10800217 	ldw	r2,8(r2)
 c00fbbc:	e0fffe17 	ldw	r3,-8(fp)
 c00fbc0:	180d883a 	mov	r6,r3
 c00fbc4:	e17fff17 	ldw	r5,-4(fp)
 c00fbc8:	1009883a 	mov	r4,r2
 c00fbcc:	c00fdb80 	call	c00fdb8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 c00fbd0:	1000021e 	bne	r2,zero,c00fbdc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 c00fbd4:	e0bffd17 	ldw	r2,-12(fp)
 c00fbd8:	00000706 	br	c00fbf8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 c00fbdc:	e0bffd17 	ldw	r2,-12(fp)
 c00fbe0:	10800017 	ldw	r2,0(r2)
 c00fbe4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 c00fbe8:	e0fffd17 	ldw	r3,-12(fp)
 c00fbec:	d0a00804 	addi	r2,gp,-32736
 c00fbf0:	18bfcc1e 	bne	r3,r2,c00fb24 <__alt_data_end+0xfc00fb24>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 c00fbf4:	0005883a 	mov	r2,zero
}
 c00fbf8:	e037883a 	mov	sp,fp
 c00fbfc:	dfc00117 	ldw	ra,4(sp)
 c00fc00:	df000017 	ldw	fp,0(sp)
 c00fc04:	dec00204 	addi	sp,sp,8
 c00fc08:	f800283a 	ret

0c00fc0c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 c00fc0c:	defffa04 	addi	sp,sp,-24
 c00fc10:	dfc00515 	stw	ra,20(sp)
 c00fc14:	df000415 	stw	fp,16(sp)
 c00fc18:	dc000315 	stw	r16,12(sp)
 c00fc1c:	df000404 	addi	fp,sp,16
 c00fc20:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 c00fc24:	00bffa04 	movi	r2,-24
 c00fc28:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 c00fc2c:	e03ffc15 	stw	zero,-16(fp)
 c00fc30:	00001d06 	br	c00fca8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 c00fc34:	04030074 	movhi	r16,3073
 c00fc38:	84037904 	addi	r16,r16,3556
 c00fc3c:	e0bffc17 	ldw	r2,-16(fp)
 c00fc40:	01400304 	movi	r5,12
 c00fc44:	1009883a 	mov	r4,r2
 c00fc48:	c0009680 	call	c000968 <__mulsi3>
 c00fc4c:	8085883a 	add	r2,r16,r2
 c00fc50:	10800017 	ldw	r2,0(r2)
 c00fc54:	1000111e 	bne	r2,zero,c00fc9c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 c00fc58:	04030074 	movhi	r16,3073
 c00fc5c:	84037904 	addi	r16,r16,3556
 c00fc60:	e0bffc17 	ldw	r2,-16(fp)
 c00fc64:	01400304 	movi	r5,12
 c00fc68:	1009883a 	mov	r4,r2
 c00fc6c:	c0009680 	call	c000968 <__mulsi3>
 c00fc70:	8085883a 	add	r2,r16,r2
 c00fc74:	e0fffe17 	ldw	r3,-8(fp)
 c00fc78:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 c00fc7c:	d0e00c17 	ldw	r3,-32720(gp)
 c00fc80:	e0bffc17 	ldw	r2,-16(fp)
 c00fc84:	1880020e 	bge	r3,r2,c00fc90 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 c00fc88:	e0bffc17 	ldw	r2,-16(fp)
 c00fc8c:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
 c00fc90:	e0bffc17 	ldw	r2,-16(fp)
 c00fc94:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 c00fc98:	00000606 	br	c00fcb4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 c00fc9c:	e0bffc17 	ldw	r2,-16(fp)
 c00fca0:	10800044 	addi	r2,r2,1
 c00fca4:	e0bffc15 	stw	r2,-16(fp)
 c00fca8:	e0bffc17 	ldw	r2,-16(fp)
 c00fcac:	10800810 	cmplti	r2,r2,32
 c00fcb0:	103fe01e 	bne	r2,zero,c00fc34 <__alt_data_end+0xfc00fc34>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 c00fcb4:	e0bffd17 	ldw	r2,-12(fp)
}
 c00fcb8:	e6ffff04 	addi	sp,fp,-4
 c00fcbc:	dfc00217 	ldw	ra,8(sp)
 c00fcc0:	df000117 	ldw	fp,4(sp)
 c00fcc4:	dc000017 	ldw	r16,0(sp)
 c00fcc8:	dec00304 	addi	sp,sp,12
 c00fccc:	f800283a 	ret

0c00fcd0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 c00fcd0:	defffe04 	addi	sp,sp,-8
 c00fcd4:	df000115 	stw	fp,4(sp)
 c00fcd8:	df000104 	addi	fp,sp,4
 c00fcdc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 c00fce0:	e0bfff17 	ldw	r2,-4(fp)
 c00fce4:	10bffe84 	addi	r2,r2,-6
 c00fce8:	10c00428 	cmpgeui	r3,r2,16
 c00fcec:	18001a1e 	bne	r3,zero,c00fd58 <alt_exception_cause_generated_bad_addr+0x88>
 c00fcf0:	100690ba 	slli	r3,r2,2
 c00fcf4:	00830074 	movhi	r2,3073
 c00fcf8:	10bf4204 	addi	r2,r2,-760
 c00fcfc:	1885883a 	add	r2,r3,r2
 c00fd00:	10800017 	ldw	r2,0(r2)
 c00fd04:	1000683a 	jmp	r2
 c00fd08:	0c00fd48 	cmpgei	r16,at,1013
 c00fd0c:	0c00fd48 	cmpgei	r16,at,1013
 c00fd10:	0c00fd58 	cmpnei	r16,at,1013
 c00fd14:	0c00fd58 	cmpnei	r16,at,1013
 c00fd18:	0c00fd58 	cmpnei	r16,at,1013
 c00fd1c:	0c00fd48 	cmpgei	r16,at,1013
 c00fd20:	0c00fd50 	cmplti	r16,at,1013
 c00fd24:	0c00fd58 	cmpnei	r16,at,1013
 c00fd28:	0c00fd48 	cmpgei	r16,at,1013
 c00fd2c:	0c00fd48 	cmpgei	r16,at,1013
 c00fd30:	0c00fd58 	cmpnei	r16,at,1013
 c00fd34:	0c00fd48 	cmpgei	r16,at,1013
 c00fd38:	0c00fd50 	cmplti	r16,at,1013
 c00fd3c:	0c00fd58 	cmpnei	r16,at,1013
 c00fd40:	0c00fd58 	cmpnei	r16,at,1013
 c00fd44:	0c00fd48 	cmpgei	r16,at,1013
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 c00fd48:	00800044 	movi	r2,1
 c00fd4c:	00000306 	br	c00fd5c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 c00fd50:	0005883a 	mov	r2,zero
 c00fd54:	00000106 	br	c00fd5c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 c00fd58:	0005883a 	mov	r2,zero
  }
}
 c00fd5c:	e037883a 	mov	sp,fp
 c00fd60:	df000017 	ldw	fp,0(sp)
 c00fd64:	dec00104 	addi	sp,sp,4
 c00fd68:	f800283a 	ret

0c00fd6c <atexit>:
 c00fd6c:	200b883a 	mov	r5,r4
 c00fd70:	000f883a 	mov	r7,zero
 c00fd74:	000d883a 	mov	r6,zero
 c00fd78:	0009883a 	mov	r4,zero
 c00fd7c:	c00fe341 	jmpi	c00fe34 <__register_exitproc>

0c00fd80 <exit>:
 c00fd80:	defffe04 	addi	sp,sp,-8
 c00fd84:	000b883a 	mov	r5,zero
 c00fd88:	dc000015 	stw	r16,0(sp)
 c00fd8c:	dfc00115 	stw	ra,4(sp)
 c00fd90:	2021883a 	mov	r16,r4
 c00fd94:	c00ff4c0 	call	c00ff4c <__call_exitprocs>
 c00fd98:	00830074 	movhi	r2,3073
 c00fd9c:	1087f304 	addi	r2,r2,8140
 c00fda0:	11000017 	ldw	r4,0(r2)
 c00fda4:	20800f17 	ldw	r2,60(r4)
 c00fda8:	10000126 	beq	r2,zero,c00fdb0 <exit+0x30>
 c00fdac:	103ee83a 	callr	r2
 c00fdb0:	8009883a 	mov	r4,r16
 c00fdb4:	c0100cc0 	call	c0100cc <_exit>

0c00fdb8 <memcmp>:
 c00fdb8:	01c000c4 	movi	r7,3
 c00fdbc:	3980192e 	bgeu	r7,r6,c00fe24 <memcmp+0x6c>
 c00fdc0:	2144b03a 	or	r2,r4,r5
 c00fdc4:	11c4703a 	and	r2,r2,r7
 c00fdc8:	10000f26 	beq	r2,zero,c00fe08 <memcmp+0x50>
 c00fdcc:	20800003 	ldbu	r2,0(r4)
 c00fdd0:	28c00003 	ldbu	r3,0(r5)
 c00fdd4:	10c0151e 	bne	r2,r3,c00fe2c <memcmp+0x74>
 c00fdd8:	31bfff84 	addi	r6,r6,-2
 c00fddc:	01ffffc4 	movi	r7,-1
 c00fde0:	00000406 	br	c00fdf4 <memcmp+0x3c>
 c00fde4:	20800003 	ldbu	r2,0(r4)
 c00fde8:	28c00003 	ldbu	r3,0(r5)
 c00fdec:	31bfffc4 	addi	r6,r6,-1
 c00fdf0:	10c00e1e 	bne	r2,r3,c00fe2c <memcmp+0x74>
 c00fdf4:	21000044 	addi	r4,r4,1
 c00fdf8:	29400044 	addi	r5,r5,1
 c00fdfc:	31fff91e 	bne	r6,r7,c00fde4 <__alt_data_end+0xfc00fde4>
 c00fe00:	0005883a 	mov	r2,zero
 c00fe04:	f800283a 	ret
 c00fe08:	20c00017 	ldw	r3,0(r4)
 c00fe0c:	28800017 	ldw	r2,0(r5)
 c00fe10:	18bfee1e 	bne	r3,r2,c00fdcc <__alt_data_end+0xfc00fdcc>
 c00fe14:	31bfff04 	addi	r6,r6,-4
 c00fe18:	21000104 	addi	r4,r4,4
 c00fe1c:	29400104 	addi	r5,r5,4
 c00fe20:	39bff936 	bltu	r7,r6,c00fe08 <__alt_data_end+0xfc00fe08>
 c00fe24:	303fe91e 	bne	r6,zero,c00fdcc <__alt_data_end+0xfc00fdcc>
 c00fe28:	003ff506 	br	c00fe00 <__alt_data_end+0xfc00fe00>
 c00fe2c:	10c5c83a 	sub	r2,r2,r3
 c00fe30:	f800283a 	ret

0c00fe34 <__register_exitproc>:
 c00fe34:	defffa04 	addi	sp,sp,-24
 c00fe38:	dc000315 	stw	r16,12(sp)
 c00fe3c:	04030074 	movhi	r16,3073
 c00fe40:	8407f304 	addi	r16,r16,8140
 c00fe44:	80c00017 	ldw	r3,0(r16)
 c00fe48:	dc400415 	stw	r17,16(sp)
 c00fe4c:	dfc00515 	stw	ra,20(sp)
 c00fe50:	18805217 	ldw	r2,328(r3)
 c00fe54:	2023883a 	mov	r17,r4
 c00fe58:	10003726 	beq	r2,zero,c00ff38 <__register_exitproc+0x104>
 c00fe5c:	10c00117 	ldw	r3,4(r2)
 c00fe60:	010007c4 	movi	r4,31
 c00fe64:	20c00e16 	blt	r4,r3,c00fea0 <__register_exitproc+0x6c>
 c00fe68:	1a000044 	addi	r8,r3,1
 c00fe6c:	8800221e 	bne	r17,zero,c00fef8 <__register_exitproc+0xc4>
 c00fe70:	18c00084 	addi	r3,r3,2
 c00fe74:	18c7883a 	add	r3,r3,r3
 c00fe78:	18c7883a 	add	r3,r3,r3
 c00fe7c:	12000115 	stw	r8,4(r2)
 c00fe80:	10c7883a 	add	r3,r2,r3
 c00fe84:	19400015 	stw	r5,0(r3)
 c00fe88:	0005883a 	mov	r2,zero
 c00fe8c:	dfc00517 	ldw	ra,20(sp)
 c00fe90:	dc400417 	ldw	r17,16(sp)
 c00fe94:	dc000317 	ldw	r16,12(sp)
 c00fe98:	dec00604 	addi	sp,sp,24
 c00fe9c:	f800283a 	ret
 c00fea0:	00800034 	movhi	r2,0
 c00fea4:	10800004 	addi	r2,r2,0
 c00fea8:	10002626 	beq	r2,zero,c00ff44 <__register_exitproc+0x110>
 c00feac:	01006404 	movi	r4,400
 c00feb0:	d9400015 	stw	r5,0(sp)
 c00feb4:	d9800115 	stw	r6,4(sp)
 c00feb8:	d9c00215 	stw	r7,8(sp)
 c00febc:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 c00fec0:	d9400017 	ldw	r5,0(sp)
 c00fec4:	d9800117 	ldw	r6,4(sp)
 c00fec8:	d9c00217 	ldw	r7,8(sp)
 c00fecc:	10001d26 	beq	r2,zero,c00ff44 <__register_exitproc+0x110>
 c00fed0:	81000017 	ldw	r4,0(r16)
 c00fed4:	10000115 	stw	zero,4(r2)
 c00fed8:	02000044 	movi	r8,1
 c00fedc:	22405217 	ldw	r9,328(r4)
 c00fee0:	0007883a 	mov	r3,zero
 c00fee4:	12400015 	stw	r9,0(r2)
 c00fee8:	20805215 	stw	r2,328(r4)
 c00feec:	10006215 	stw	zero,392(r2)
 c00fef0:	10006315 	stw	zero,396(r2)
 c00fef4:	883fde26 	beq	r17,zero,c00fe70 <__alt_data_end+0xfc00fe70>
 c00fef8:	18c9883a 	add	r4,r3,r3
 c00fefc:	2109883a 	add	r4,r4,r4
 c00ff00:	1109883a 	add	r4,r2,r4
 c00ff04:	21802215 	stw	r6,136(r4)
 c00ff08:	01800044 	movi	r6,1
 c00ff0c:	12406217 	ldw	r9,392(r2)
 c00ff10:	30cc983a 	sll	r6,r6,r3
 c00ff14:	4992b03a 	or	r9,r9,r6
 c00ff18:	12406215 	stw	r9,392(r2)
 c00ff1c:	21c04215 	stw	r7,264(r4)
 c00ff20:	01000084 	movi	r4,2
 c00ff24:	893fd21e 	bne	r17,r4,c00fe70 <__alt_data_end+0xfc00fe70>
 c00ff28:	11006317 	ldw	r4,396(r2)
 c00ff2c:	218cb03a 	or	r6,r4,r6
 c00ff30:	11806315 	stw	r6,396(r2)
 c00ff34:	003fce06 	br	c00fe70 <__alt_data_end+0xfc00fe70>
 c00ff38:	18805304 	addi	r2,r3,332
 c00ff3c:	18805215 	stw	r2,328(r3)
 c00ff40:	003fc606 	br	c00fe5c <__alt_data_end+0xfc00fe5c>
 c00ff44:	00bfffc4 	movi	r2,-1
 c00ff48:	003fd006 	br	c00fe8c <__alt_data_end+0xfc00fe8c>

0c00ff4c <__call_exitprocs>:
 c00ff4c:	defff504 	addi	sp,sp,-44
 c00ff50:	df000915 	stw	fp,36(sp)
 c00ff54:	dd400615 	stw	r21,24(sp)
 c00ff58:	dc800315 	stw	r18,12(sp)
 c00ff5c:	dfc00a15 	stw	ra,40(sp)
 c00ff60:	ddc00815 	stw	r23,32(sp)
 c00ff64:	dd800715 	stw	r22,28(sp)
 c00ff68:	dd000515 	stw	r20,20(sp)
 c00ff6c:	dcc00415 	stw	r19,16(sp)
 c00ff70:	dc400215 	stw	r17,8(sp)
 c00ff74:	dc000115 	stw	r16,4(sp)
 c00ff78:	d9000015 	stw	r4,0(sp)
 c00ff7c:	2839883a 	mov	fp,r5
 c00ff80:	04800044 	movi	r18,1
 c00ff84:	057fffc4 	movi	r21,-1
 c00ff88:	00830074 	movhi	r2,3073
 c00ff8c:	1087f304 	addi	r2,r2,8140
 c00ff90:	12000017 	ldw	r8,0(r2)
 c00ff94:	45005217 	ldw	r20,328(r8)
 c00ff98:	44c05204 	addi	r19,r8,328
 c00ff9c:	a0001c26 	beq	r20,zero,c010010 <__call_exitprocs+0xc4>
 c00ffa0:	a0800117 	ldw	r2,4(r20)
 c00ffa4:	15ffffc4 	addi	r23,r2,-1
 c00ffa8:	b8000d16 	blt	r23,zero,c00ffe0 <__call_exitprocs+0x94>
 c00ffac:	14000044 	addi	r16,r2,1
 c00ffb0:	8421883a 	add	r16,r16,r16
 c00ffb4:	8421883a 	add	r16,r16,r16
 c00ffb8:	84402004 	addi	r17,r16,128
 c00ffbc:	a463883a 	add	r17,r20,r17
 c00ffc0:	a421883a 	add	r16,r20,r16
 c00ffc4:	e0001e26 	beq	fp,zero,c010040 <__call_exitprocs+0xf4>
 c00ffc8:	80804017 	ldw	r2,256(r16)
 c00ffcc:	e0801c26 	beq	fp,r2,c010040 <__call_exitprocs+0xf4>
 c00ffd0:	bdffffc4 	addi	r23,r23,-1
 c00ffd4:	843fff04 	addi	r16,r16,-4
 c00ffd8:	8c7fff04 	addi	r17,r17,-4
 c00ffdc:	bd7ff91e 	bne	r23,r21,c00ffc4 <__alt_data_end+0xfc00ffc4>
 c00ffe0:	00800034 	movhi	r2,0
 c00ffe4:	10800004 	addi	r2,r2,0
 c00ffe8:	10000926 	beq	r2,zero,c010010 <__call_exitprocs+0xc4>
 c00ffec:	a0800117 	ldw	r2,4(r20)
 c00fff0:	1000301e 	bne	r2,zero,c0100b4 <__call_exitprocs+0x168>
 c00fff4:	a0800017 	ldw	r2,0(r20)
 c00fff8:	10003226 	beq	r2,zero,c0100c4 <__call_exitprocs+0x178>
 c00fffc:	a009883a 	mov	r4,r20
 c010000:	98800015 	stw	r2,0(r19)
 c010004:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 c010008:	9d000017 	ldw	r20,0(r19)
 c01000c:	a03fe41e 	bne	r20,zero,c00ffa0 <__alt_data_end+0xfc00ffa0>
 c010010:	dfc00a17 	ldw	ra,40(sp)
 c010014:	df000917 	ldw	fp,36(sp)
 c010018:	ddc00817 	ldw	r23,32(sp)
 c01001c:	dd800717 	ldw	r22,28(sp)
 c010020:	dd400617 	ldw	r21,24(sp)
 c010024:	dd000517 	ldw	r20,20(sp)
 c010028:	dcc00417 	ldw	r19,16(sp)
 c01002c:	dc800317 	ldw	r18,12(sp)
 c010030:	dc400217 	ldw	r17,8(sp)
 c010034:	dc000117 	ldw	r16,4(sp)
 c010038:	dec00b04 	addi	sp,sp,44
 c01003c:	f800283a 	ret
 c010040:	a0800117 	ldw	r2,4(r20)
 c010044:	80c00017 	ldw	r3,0(r16)
 c010048:	10bfffc4 	addi	r2,r2,-1
 c01004c:	15c01426 	beq	r2,r23,c0100a0 <__call_exitprocs+0x154>
 c010050:	80000015 	stw	zero,0(r16)
 c010054:	183fde26 	beq	r3,zero,c00ffd0 <__alt_data_end+0xfc00ffd0>
 c010058:	95c8983a 	sll	r4,r18,r23
 c01005c:	a0806217 	ldw	r2,392(r20)
 c010060:	a5800117 	ldw	r22,4(r20)
 c010064:	2084703a 	and	r2,r4,r2
 c010068:	10000b26 	beq	r2,zero,c010098 <__call_exitprocs+0x14c>
 c01006c:	a0806317 	ldw	r2,396(r20)
 c010070:	2088703a 	and	r4,r4,r2
 c010074:	20000c1e 	bne	r4,zero,c0100a8 <__call_exitprocs+0x15c>
 c010078:	89400017 	ldw	r5,0(r17)
 c01007c:	d9000017 	ldw	r4,0(sp)
 c010080:	183ee83a 	callr	r3
 c010084:	a0800117 	ldw	r2,4(r20)
 c010088:	15bfbf1e 	bne	r2,r22,c00ff88 <__alt_data_end+0xfc00ff88>
 c01008c:	98800017 	ldw	r2,0(r19)
 c010090:	153fcf26 	beq	r2,r20,c00ffd0 <__alt_data_end+0xfc00ffd0>
 c010094:	003fbc06 	br	c00ff88 <__alt_data_end+0xfc00ff88>
 c010098:	183ee83a 	callr	r3
 c01009c:	003ff906 	br	c010084 <__alt_data_end+0xfc010084>
 c0100a0:	a5c00115 	stw	r23,4(r20)
 c0100a4:	003feb06 	br	c010054 <__alt_data_end+0xfc010054>
 c0100a8:	89000017 	ldw	r4,0(r17)
 c0100ac:	183ee83a 	callr	r3
 c0100b0:	003ff406 	br	c010084 <__alt_data_end+0xfc010084>
 c0100b4:	a0800017 	ldw	r2,0(r20)
 c0100b8:	a027883a 	mov	r19,r20
 c0100bc:	1029883a 	mov	r20,r2
 c0100c0:	003fb606 	br	c00ff9c <__alt_data_end+0xfc00ff9c>
 c0100c4:	0005883a 	mov	r2,zero
 c0100c8:	003ffb06 	br	c0100b8 <__alt_data_end+0xfc0100b8>

0c0100cc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 c0100cc:	defffd04 	addi	sp,sp,-12
 c0100d0:	df000215 	stw	fp,8(sp)
 c0100d4:	df000204 	addi	fp,sp,8
 c0100d8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 c0100dc:	0001883a 	nop
 c0100e0:	e0bfff17 	ldw	r2,-4(fp)
 c0100e4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 c0100e8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 c0100ec:	10000226 	beq	r2,zero,c0100f8 <_exit+0x2c>
    ALT_SIM_FAIL();
 c0100f0:	002af070 	cmpltui	zero,zero,43969
 c0100f4:	00000106 	br	c0100fc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 c0100f8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 c0100fc:	003fff06 	br	c0100fc <__alt_data_end+0xfc0100fc>
